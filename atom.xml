<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code@浮生记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="onlookerliu.github.io/"/>
  <updated>2018-03-19T14:05:45.626Z</updated>
  <id>onlookerliu.github.io/</id>
  
  <author>
    <name>Monad Kai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Project-Euler-019</title>
    <link href="onlookerliu.github.io/2018/03/13/Project-Euler-019/"/>
    <id>onlookerliu.github.io/2018/03/13/Project-Euler-019/</id>
    <published>2018-03-13T14:01:49.000Z</published>
    <updated>2018-03-19T14:05:45.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>You are given the following information,<br>but you may prefer to do some research for yourself.</p><pre><code>1 Jan 1900 was a Monday.Thirty days has September,April, June and November.All the rest have thirty-one,Saving February alone,Which has twenty-eight, rain or shine.And on leap years, twenty-nine.A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</code></pre><p>How many Sundays fell on the first of the month during<br>the twentieth century (1 Jan 1901 to 31 Dec 2000)?</p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">171</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> calendar <span class="keyword">import</span> monthrange; <span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line">print(len([(year, month) <span class="keyword">for</span> year, month <span class="keyword">in</span> product(list(range(<span class="number">1901</span>, <span class="number">2001</span>)), list(range(<span class="number">1</span>, <span class="number">13</span>))) <span class="keyword">if</span> monthrange(year, month)[<span class="number">0</span>] == <span class="number">6</span>]))</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">months = [</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">28</span>,</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">30</span>,</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">30</span>,</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">30</span>,</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">30</span>,</span><br><span class="line">    <span class="number">31</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">week = [<span class="string">'sun'</span>,</span><br><span class="line">        <span class="string">'mon'</span>,</span><br><span class="line">        <span class="string">'tue'</span>,</span><br><span class="line">        <span class="string">'wed'</span>,</span><br><span class="line">        <span class="string">'thu'</span>,</span><br><span class="line">        <span class="string">'fri'</span>,</span><br><span class="line">        <span class="string">'sat'</span></span><br><span class="line">       ]</span><br><span class="line"></span><br><span class="line">leapyears = [year <span class="keyword">for</span> year <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>) <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">day = <span class="number">0</span> <span class="comment"># 1 Jan 1901</span></span><br><span class="line">month = <span class="number">0</span> <span class="comment"># January</span></span><br><span class="line">year = <span class="number">1</span> <span class="comment"># 1901</span></span><br><span class="line">weekday = <span class="number">2</span> <span class="comment"># Tuesday</span></span><br><span class="line"></span><br><span class="line">days = &#123;day: week[weekday]&#125; </span><br><span class="line"></span><br><span class="line">since_last_month = <span class="number">0</span></span><br><span class="line">since_last_year = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">first_of_months = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> year &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="comment">#print "%s/%s/%s - %s" % (month+1, since_last_month+1, year+1900, week[weekday])</span></span><br><span class="line">    <span class="comment"># if it's the first of the month, make a note </span></span><br><span class="line">    <span class="comment"># of the weekday.</span></span><br><span class="line">    <span class="keyword">if</span> since_last_month == <span class="number">0</span>:</span><br><span class="line">        first_of_months[<span class="string">"%s/%s/%s"</span> % (month+<span class="number">1</span>, since_last_month+<span class="number">1</span>, year+<span class="number">1900</span>)] = week[weekday]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># increment the counters..</span></span><br><span class="line">    day += <span class="number">1</span></span><br><span class="line">    since_last_month += <span class="number">1</span></span><br><span class="line">    since_last_year += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># check what year it is</span></span><br><span class="line">    days_of_year = <span class="number">365</span></span><br><span class="line">    <span class="keyword">if</span> year <span class="keyword">in</span> leapyears:</span><br><span class="line">        days_of_year += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> since_last_year &gt;= days_of_year:</span><br><span class="line">        year += <span class="number">1</span></span><br><span class="line">        since_last_year = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check what month it is</span></span><br><span class="line">    days_of_month = months[month]</span><br><span class="line">    <span class="keyword">if</span> month == <span class="number">1</span> <span class="keyword">and</span> year <span class="keyword">in</span> leapyears: <span class="comment"># february</span></span><br><span class="line">        days_of_month += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> since_last_month &gt;= days_of_month:</span><br><span class="line">        month += <span class="number">1</span></span><br><span class="line">        since_last_month = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> month &gt; len(months)<span class="number">-1</span>:</span><br><span class="line">            month = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check what day of the week it is</span></span><br><span class="line">    weekday += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> weekday &gt; len(week)<span class="number">-1</span>:</span><br><span class="line">        weekday = <span class="number">0</span></span><br><span class="line">    days[day] = week[weekday]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">date_sort</span><span class="params">(date)</span>:</span></span><br><span class="line">    date_str = date[<span class="number">0</span>]</span><br><span class="line">    month,day,year = date_str.split(<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">return</span> int(month)*int(day)*int(year)</span><br><span class="line"></span><br><span class="line">print(len([weekday <span class="keyword">for</span> weekday <span class="keyword">in</span> list(first_of_months.values()) <span class="keyword">if</span> weekday == <span class="string">'sun'</span>]))</span><br></pre></td></tr></table></figure><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'date'</span></span><br><span class="line">puts Date.new(<span class="number">1901</span>,<span class="number">1</span>,<span class="number">1</span>).upto(Date.new(<span class="number">2000</span>,<span class="number">12</span>,<span class="number">31</span>)).find_all &#123; <span class="params">|d|</span> d.mday == <span class="number">1</span> &amp;&amp; d.wday == <span class="number">0</span> &#125;.count</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p019</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p019().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We use Zeller's congruence to compute the day of week when given the year, month, and day.</span></span><br><span class="line"><span class="comment"> * Then we simply check the first day of all the months in the given range by brute force.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Zeller's congruence is well-known and a bit long to explain.</span></span><br><span class="line"><span class="comment"> * See: https://en.wikipedia.org/wiki/Zeller%27s_congruence</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1901</span>; y &lt;= <span class="number">2000</span>; y++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt;= <span class="number">12</span>; m++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dayOfWeek(y, m, <span class="number">1</span>) == <span class="number">0</span>)  <span class="comment">// Sunday</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Return value: 0 = Sunday, 1 = Monday, ..., 6 = Saturday.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dayOfWeek</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (year &lt; <span class="number">0</span> || year &gt; <span class="number">10000</span> || month &lt; <span class="number">1</span> || month &gt; <span class="number">12</span> || day &lt; <span class="number">1</span> || day &gt; <span class="number">31</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Zeller's congruence algorithm</span></span><br><span class="line"><span class="keyword">int</span> m = (month - <span class="number">3</span> + <span class="number">4800</span>) % <span class="number">4800</span>;</span><br><span class="line"><span class="keyword">int</span> y = (year + m / <span class="number">12</span>) % <span class="number">400</span>;</span><br><span class="line">m %= <span class="number">12</span>;</span><br><span class="line"><span class="keyword">return</span> (y + y/<span class="number">4</span> - y/<span class="number">100</span> + (<span class="number">13</span> * m + <span class="number">2</span>) / <span class="number">5</span> + day + <span class="number">2</span>) % <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * We simply use Mathematica's built-in date library to compute the answer by brute force.</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line">&lt;&lt; Miscellaneous`Calendar`</span><br><span class="line"><span class="keyword">Sum</span>[<span class="keyword">Boole</span>[DayOfWeek[&#123;y, m, 1&#125;] === <span class="keyword">Sunday</span>], &#123;y, 1901, 2000&#125;, &#123;m, 1, 12&#125;]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;You are given the following information,&lt;br&gt;but yo
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-018</title>
    <link href="onlookerliu.github.io/2018/03/13/Project-Euler-018/"/>
    <id>onlookerliu.github.io/2018/03/13/Project-Euler-018/</id>
    <published>2018-03-13T13:50:28.000Z</published>
    <updated>2018-03-19T13:57:53.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><br>By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.<br></p><pre><code>37 42 4 68 5 9 3</code></pre><p><br>That is, $3 + 7 + 4 + 9 = 23$.<br></p><p><br>Find the maximum total from top to bottom of the triangle below:<br></p><pre><code>7595 6417 47 8218 35 87 1020 04 82 47 6519 01 23 75 03 3488 02 77 73 07 63 6799 65 04 28 06 16 70 9241 41 26 56 83 40 80 70 3341 48 72 33 47 32 37 16 94 2953 71 44 65 25 43 91 52 97 51 1470 11 33 28 77 73 17 78 39 68 17 5791 71 52 38 17 14 91 43 58 50 27 29 4863 66 04 68 89 53 67 30 73 16 69 87 40 3104 62 98 27 23 09 70 98 73 93 38 53 60 04 23</code></pre><p><br>NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)<br></p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1074</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_sum</span><span class="params">(triangle)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_options</span><span class="params">(row, index)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> triangle[row+<span class="number">1</span>][index], triangle[row+<span class="number">1</span>][index+<span class="number">1</span>]</span><br><span class="line">    row = len(triangle) - <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> index, node <span class="keyword">in</span> enumerate(triangle[row]):</span><br><span class="line">                best = max([node + option <span class="keyword">for</span> option <span class="keyword">in</span> get_options(row, index)])</span><br><span class="line">                triangle[row][index] = best</span><br><span class="line">            row -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    triangle_str = <span class="string">'''\</span></span><br><span class="line"><span class="string">    75</span></span><br><span class="line"><span class="string">    95 64</span></span><br><span class="line"><span class="string">    17 47 82</span></span><br><span class="line"><span class="string">    18 35 87 10</span></span><br><span class="line"><span class="string">    20 04 82 47 65</span></span><br><span class="line"><span class="string">    19 01 23 75 03 34</span></span><br><span class="line"><span class="string">    88 02 77 73 07 63 67</span></span><br><span class="line"><span class="string">    99 65 04 28 06 16 70 92</span></span><br><span class="line"><span class="string">    41 41 26 56 83 40 80 70 33</span></span><br><span class="line"><span class="string">    41 48 72 33 47 32 37 16 94 29</span></span><br><span class="line"><span class="string">    53 71 44 65 25 43 91 52 97 51 14</span></span><br><span class="line"><span class="string">    70 11 33 28 77 73 17 78 39 68 17 57</span></span><br><span class="line"><span class="string">    91 71 52 38 17 14 91 43 58 50 27 29 48</span></span><br><span class="line"><span class="string">    63 66 04 68 89 53 67 30 73 16 69 87 40 31</span></span><br><span class="line"><span class="string">    04 62 98 27 23 09 70 98 73 93 38 53 60 04 23'''</span></span><br><span class="line"></span><br><span class="line">    triangle = [[int(digit) <span class="keyword">for</span> digit <span class="keyword">in</span> line.strip().split()] <span class="keyword">for</span> line <span class="keyword">in</span> triangle_str.splitlines()]</span><br><span class="line">    print(find_sum(triangle))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">triangle_str = <span class="string">&lt;&lt;EOS</span></span><br><span class="line"><span class="string">75</span></span><br><span class="line"><span class="number">95</span> <span class="number">64</span></span><br><span class="line"><span class="number">17</span> <span class="number">47</span> <span class="number">82</span></span><br><span class="line"><span class="number">18</span> <span class="number">35</span> <span class="number">87</span> <span class="number">10</span></span><br><span class="line"><span class="number">20</span> <span class="number">04</span> <span class="number">82</span> <span class="number">47</span> <span class="number">65</span></span><br><span class="line"><span class="number">19</span> <span class="number">01</span> <span class="number">23</span> <span class="number">75</span> <span class="number">03</span> <span class="number">34</span></span><br><span class="line"><span class="number">88</span> <span class="number">02</span> <span class="number">77</span> <span class="number">73</span> <span class="number">07</span> <span class="number">63</span> <span class="number">67</span></span><br><span class="line"><span class="number">99</span> <span class="number">65</span> <span class="number">04</span> <span class="number">28</span> <span class="number">06</span> <span class="number">16</span> <span class="number">70</span> <span class="number">92</span></span><br><span class="line"><span class="number">41</span> <span class="number">41</span> <span class="number">26</span> <span class="number">56</span> <span class="number">83</span> <span class="number">40</span> <span class="number">80</span> <span class="number">70</span> <span class="number">33</span></span><br><span class="line"><span class="number">41</span> <span class="number">48</span> <span class="number">72</span> <span class="number">33</span> <span class="number">47</span> <span class="number">32</span> <span class="number">37</span> <span class="number">16</span> <span class="number">94</span> <span class="number">29</span></span><br><span class="line"><span class="number">53</span> <span class="number">71</span> <span class="number">44</span> <span class="number">65</span> <span class="number">25</span> <span class="number">43</span> <span class="number">91</span> <span class="number">52</span> <span class="number">97</span> <span class="number">51</span> <span class="number">14</span></span><br><span class="line"><span class="number">70</span> <span class="number">11</span> <span class="number">33</span> <span class="number">28</span> <span class="number">77</span> <span class="number">73</span> <span class="number">17</span> <span class="number">78</span> <span class="number">39</span> <span class="number">68</span> <span class="number">17</span> <span class="number">57</span></span><br><span class="line"><span class="number">91</span> <span class="number">71</span> <span class="number">52</span> <span class="number">38</span> <span class="number">17</span> <span class="number">14</span> <span class="number">91</span> <span class="number">43</span> <span class="number">58</span> <span class="number">50</span> <span class="number">27</span> <span class="number">29</span> <span class="number">48</span></span><br><span class="line"><span class="number">63</span> <span class="number">66</span> <span class="number">04</span> <span class="number">68</span> <span class="number">89</span> <span class="number">53</span> <span class="number">67</span> <span class="number">30</span> <span class="number">73</span> <span class="number">16</span> <span class="number">69</span> <span class="number">87</span> <span class="number">40</span> <span class="number">31</span></span><br><span class="line"><span class="number">04</span> <span class="number">62</span> <span class="number">98</span> <span class="number">27</span> <span class="number">23</span> 09 <span class="number">70</span> <span class="number">98</span> <span class="number">73</span> <span class="number">93</span> <span class="number">38</span> <span class="number">53</span> <span class="number">60</span> <span class="number">04</span> <span class="number">23</span></span><br><span class="line">EOS</span><br><span class="line"></span><br><span class="line">triangle = triangle_str.each_line.map &#123; <span class="params">|line|</span> line.split.map(&amp;<span class="symbol">:to_i</span>) &#125;</span><br><span class="line"></span><br><span class="line">(triangle.length - <span class="number">2</span>).downto(<span class="number">0</span>) <span class="keyword">do</span> <span class="params">|y|</span></span><br><span class="line">  triangle[y].length.times <span class="keyword">do</span> <span class="params">|x|</span> </span><br><span class="line">    triangle[y][x] += [triangle[y+<span class="number">1</span>][x], triangle[y+<span class="number">1</span>][x+<span class="number">1</span>]].max</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts triangle[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">parse</span> :: <span class="type">String</span> -&gt; [[<span class="type">Integer</span>]]</span><br><span class="line"><span class="title">parse</span> = map (map read . words) . lines</span><br><span class="line"></span><br><span class="line"><span class="title">best</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">best</span> row = map maximum choices <span class="keyword">where</span></span><br><span class="line">    choices = zipWith (\a b -&gt; a : [b]) row (tail row)</span><br><span class="line"></span><br><span class="line"><span class="title">maxStep</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">maxStep</span> current next = zipWith (+) next (best current)</span><br><span class="line"></span><br><span class="line"><span class="title">maxPath</span> :: [[<span class="type">Integer</span>]] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">maxPath</span> [[x]] = x</span><br><span class="line"><span class="title">maxPath</span> (current:next:rest) = maxPath $ (maxStep current next) : rest</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">        str &lt;- readFile <span class="string">"/home/zach/code/euler/018/triangle.txt"</span></span><br><span class="line">        print $ maxPath $ reverse $ parse str</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p018</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p018().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We create a new blank triangle with the same dimensions as the original big triangle.</span></span><br><span class="line"><span class="comment"> * For each cell of the big triangle, we consider the sub-triangle whose top is at this cell,</span></span><br><span class="line"><span class="comment"> * calculate the maximum path sum when starting from this cell, and store the result</span></span><br><span class="line"><span class="comment"> * in the corresponding cell of the blank triangle.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * If we start at a particular cell, what is the maximum path total? If the cell is at the</span></span><br><span class="line"><span class="comment"> * bottom of the big triangle, then it is simply the cell's value. Otherwise the answer is</span></span><br><span class="line"><span class="comment"> * the cell's value plus either &#123;the maximum path total of the cell down and to the left&#125;</span></span><br><span class="line"><span class="comment"> * or &#123;the maximum path total of the cell down and to the right&#125;, whichever is greater.</span></span><br><span class="line"><span class="comment"> * By computing the blank triangle's values from bottom up, the dependent values are always</span></span><br><span class="line"><span class="comment"> * computed before they are utilized. This technique is known as dynamic programming.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = triangle.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; triangle[i].length; j++)</span><br><span class="line">triangle[i][j] += Math.max(triangle[i + <span class="number">1</span>][j], triangle[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(triangle[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[][] triangle = &#123;  <span class="comment">// Mutable</span></span><br><span class="line">&#123;<span class="number">75</span>&#125;,</span><br><span class="line">&#123;<span class="number">95</span>,<span class="number">64</span>&#125;,</span><br><span class="line">&#123;<span class="number">17</span>,<span class="number">47</span>,<span class="number">82</span>&#125;,</span><br><span class="line">&#123;<span class="number">18</span>,<span class="number">35</span>,<span class="number">87</span>,<span class="number">10</span>&#125;,</span><br><span class="line">&#123;<span class="number">20</span>, <span class="number">4</span>,<span class="number">82</span>,<span class="number">47</span>,<span class="number">65</span>&#125;,</span><br><span class="line">&#123;<span class="number">19</span>, <span class="number">1</span>,<span class="number">23</span>,<span class="number">75</span>, <span class="number">3</span>,<span class="number">34</span>&#125;,</span><br><span class="line">&#123;<span class="number">88</span>, <span class="number">2</span>,<span class="number">77</span>,<span class="number">73</span>, <span class="number">7</span>,<span class="number">63</span>,<span class="number">67</span>&#125;,</span><br><span class="line">&#123;<span class="number">99</span>,<span class="number">65</span>, <span class="number">4</span>,<span class="number">28</span>, <span class="number">6</span>,<span class="number">16</span>,<span class="number">70</span>,<span class="number">92</span>&#125;,</span><br><span class="line">&#123;<span class="number">41</span>,<span class="number">41</span>,<span class="number">26</span>,<span class="number">56</span>,<span class="number">83</span>,<span class="number">40</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">33</span>&#125;,</span><br><span class="line">&#123;<span class="number">41</span>,<span class="number">48</span>,<span class="number">72</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">32</span>,<span class="number">37</span>,<span class="number">16</span>,<span class="number">94</span>,<span class="number">29</span>&#125;,</span><br><span class="line">&#123;<span class="number">53</span>,<span class="number">71</span>,<span class="number">44</span>,<span class="number">65</span>,<span class="number">25</span>,<span class="number">43</span>,<span class="number">91</span>,<span class="number">52</span>,<span class="number">97</span>,<span class="number">51</span>,<span class="number">14</span>&#125;,</span><br><span class="line">&#123;<span class="number">70</span>,<span class="number">11</span>,<span class="number">33</span>,<span class="number">28</span>,<span class="number">77</span>,<span class="number">73</span>,<span class="number">17</span>,<span class="number">78</span>,<span class="number">39</span>,<span class="number">68</span>,<span class="number">17</span>,<span class="number">57</span>&#125;,</span><br><span class="line">&#123;<span class="number">91</span>,<span class="number">71</span>,<span class="number">52</span>,<span class="number">38</span>,<span class="number">17</span>,<span class="number">14</span>,<span class="number">91</span>,<span class="number">43</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">27</span>,<span class="number">29</span>,<span class="number">48</span>&#125;,</span><br><span class="line">&#123;<span class="number">63</span>,<span class="number">66</span>, <span class="number">4</span>,<span class="number">68</span>,<span class="number">89</span>,<span class="number">53</span>,<span class="number">67</span>,<span class="number">30</span>,<span class="number">73</span>,<span class="number">16</span>,<span class="number">69</span>,<span class="number">87</span>,<span class="number">40</span>,<span class="number">31</span>&#125;,</span><br><span class="line">&#123; <span class="number">4</span>,<span class="number">62</span>,<span class="number">98</span>,<span class="number">27</span>,<span class="number">23</span>, <span class="number">9</span>,<span class="number">70</span>,<span class="number">98</span>,<span class="number">73</span>,<span class="number">93</span>,<span class="number">38</span>,<span class="number">53</span>,<span class="number">60</span>, <span class="number">4</span>,<span class="number">23</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * If we start at a particular cell in the triangle, what is the maximum path total?</span></span><br><span class="line"><span class="comment"> * If the cell is in the bottom row, then it is simply the cell's value. Otherwise the answer</span></span><br><span class="line"><span class="comment"> * is the cell's value plus either &#123;the maximum path total of the cell down and to the left&#125;</span></span><br><span class="line"><span class="comment"> * or &#123;the maximum path total of the cell down and to the right&#125;, whichever is greater.</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line"></span><br><span class="line">triangle = &#123;</span><br><span class="line">  &#123;75&#125;,</span><br><span class="line">  &#123;95,64&#125;,</span><br><span class="line">  &#123;17,47,82&#125;,</span><br><span class="line">  &#123;18,35,87,10&#125;,</span><br><span class="line">  &#123;20,04,82,47,65&#125;,</span><br><span class="line">  &#123;19,01,23,75,03,34&#125;,</span><br><span class="line">  &#123;88,02,77,73,07,63,67&#125;,</span><br><span class="line">  &#123;99,65,04,28,06,16,70,92&#125;,</span><br><span class="line">  &#123;41,41,26,56,83,40,80,70,33&#125;,</span><br><span class="line">  &#123;41,48,72,33,47,32,37,16,94,29&#125;,</span><br><span class="line">  &#123;53,71,44,65,25,43,91,52,97,51,14&#125;,</span><br><span class="line">  &#123;70,11,33,28,77,73,17,78,39,68,17,57&#125;,</span><br><span class="line">  &#123;91,71,52,38,17,14,91,43,58,50,27,29,48&#125;,</span><br><span class="line">  &#123;63,66,04,68,89,53,67,30,73,16,69,87,40,31&#125;,</span><br><span class="line">  &#123;04,62,98,27,23,09,70,98,73,93,38,53,60,04,23&#125;&#125;;</span><br><span class="line"></span><br><span class="line">MaxPath[i_, j_] := triangle[[i, j]] +</span><br><span class="line">  <span class="keyword">If</span>[i &lt; <span class="keyword">Length</span>[triangle], <span class="keyword">Max</span>[MaxPath[i + <span class="number">1</span>, j], MaxPath[i + <span class="number">1</span>, j + <span class="number">1</span>]], <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">MaxPath[<span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;&lt;br&gt;By starting at the top of the triangle below a
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 008</title>
    <link href="onlookerliu.github.io/2018/03/12/LeetCode-Notes-008/"/>
    <id>onlookerliu.github.io/2018/03/12/LeetCode-Notes-008/</id>
    <published>2018-03-12T13:43:39.000Z</published>
    <updated>2018-03-19T16:22:16.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Binary-Tree-Level-Order-Traversal"><a href="#Binary-Tree-Level-Order-Traversal" class="headerlink" title="Binary Tree Level Order Traversal"></a>Binary Tree Level Order Traversal</h3><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ans = []</span><br><span class="line">    , tmp = [root];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (tmp.length) &#123;</span><br><span class="line">    <span class="keyword">var</span> res = []</span><br><span class="line">      , a = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tmp.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!tmp[i]) <span class="keyword">continue</span>;</span><br><span class="line">      res.push(tmp[i].val);</span><br><span class="line">      a.push(tmp[i].left);</span><br><span class="line">      a.push(tmp[i].right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tmp = a.concat();</span><br><span class="line">    <span class="keyword">if</span> (res.length)</span><br><span class="line">      ans.push(res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Binary-Tree-Level-Order-Traversal-II"><a href="#Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="Binary Tree Level Order Traversal II"></a>Binary Tree Level Order Traversal II</h3><p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its bottom-up level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrderBottom = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ans = [], tmp = [root];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (tmp.length) &#123;</span><br><span class="line">  <span class="keyword">var</span> res = [], _tmp = [];</span><br><span class="line"></span><br><span class="line">  tmp.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  res.push(item.val);</span><br><span class="line">  <span class="keyword">if</span> (item.left)</span><br><span class="line">  _tmp.push(item.left);</span><br><span class="line">  <span class="keyword">if</span> (item.right)</span><br><span class="line">  _tmp.push(item.right);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ans.push(res);</span><br><span class="line">  tmp = _tmp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans.reverse();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Binary-Tree-Paths"><a href="#Binary-Tree-Paths" class="headerlink" title="Binary Tree Paths"></a>Binary Tree Paths</h3><p>Given a binary tree, return all root-to-leaf paths.</p><p>For example, given the following binary tree:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   1</span><br><span class="line"> /   \</span><br><span class="line">2     3</span><br><span class="line"> \</span><br><span class="line">  5</span><br></pre></td></tr></table></figure></p><p>All root-to-leaf paths are:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ans, res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  res.push(root.val);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!root.left &amp;&amp; !root.right) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = res.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre, item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> pre + <span class="string">'-&gt;'</span> + item;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    str = str.toString();</span><br><span class="line"></span><br><span class="line">    ans.push(str);</span><br><span class="line">    res.pop();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root.left) </span><br><span class="line">    dfs(root.left);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (root.right)</span><br><span class="line">    dfs(root.right);</span><br><span class="line"></span><br><span class="line">  res.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> binaryTreePaths = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  ans = [], res = [];</span><br><span class="line">  dfs(root);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Binary-Tree-Level-Order-Traversal&quot;&gt;&lt;a href=&quot;#Binary-Tree-Level-Order-Traversal&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree Level Order Tr
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-017</title>
    <link href="onlookerliu.github.io/2018/03/12/Project-Euler-017/"/>
    <id>onlookerliu.github.io/2018/03/12/Project-Euler-017/</id>
    <published>2018-03-12T07:57:40.000Z</published>
    <updated>2018-03-19T08:41:25.811Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><br>If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are $3 + 3 + 5 + 4 + 4 = 19$ letters used in total.<br></p><p><br>If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?<br></p><p><br>NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of “and” when writing out numbers is in compliance with British usage.<br></p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21124</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_english</span><span class="params">(number)</span>:</span></span><br><span class="line">    _ones = &#123;</span><br><span class="line">            <span class="number">1</span>: <span class="string">'one'</span>,</span><br><span class="line">            <span class="number">2</span>: <span class="string">'two'</span>,</span><br><span class="line">            <span class="number">3</span>: <span class="string">'three'</span>,</span><br><span class="line">            <span class="number">4</span>: <span class="string">'four'</span>,</span><br><span class="line">            <span class="number">5</span>: <span class="string">'five'</span>,</span><br><span class="line">            <span class="number">6</span>: <span class="string">'six'</span>,</span><br><span class="line">            <span class="number">7</span>: <span class="string">'seven'</span>,</span><br><span class="line">            <span class="number">8</span>: <span class="string">'eight'</span>,</span><br><span class="line">            <span class="number">9</span>: <span class="string">'nine'</span>,</span><br><span class="line">            <span class="number">10</span>: <span class="string">'ten'</span>,</span><br><span class="line">            <span class="number">11</span>: <span class="string">'eleven'</span>,</span><br><span class="line">            <span class="number">12</span>: <span class="string">'twelve'</span>,</span><br><span class="line">            <span class="number">13</span>: <span class="string">'thirteen'</span>,</span><br><span class="line">            <span class="number">14</span>: <span class="string">'fourteen'</span>,</span><br><span class="line">            <span class="number">15</span>: <span class="string">'fifteen'</span>,</span><br><span class="line">            <span class="number">16</span>: <span class="string">'sixteen'</span>,</span><br><span class="line">            <span class="number">17</span>: <span class="string">'seventeen'</span>,</span><br><span class="line">            <span class="number">18</span>: <span class="string">'eighteen'</span>,</span><br><span class="line">            <span class="number">19</span>: <span class="string">'nineteen'</span>,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    _tens = &#123;</span><br><span class="line">            <span class="number">2</span>: <span class="string">'twenty'</span>,</span><br><span class="line">            <span class="number">3</span>: <span class="string">'thirty'</span>,</span><br><span class="line">            <span class="number">4</span>: <span class="string">'forty'</span>,</span><br><span class="line">            <span class="number">5</span>: <span class="string">'fifty'</span>,</span><br><span class="line">            <span class="number">6</span>: <span class="string">'sixty'</span>,</span><br><span class="line">            <span class="number">7</span>: <span class="string">'seventy'</span>,</span><br><span class="line">            <span class="number">8</span>: <span class="string">'eighty'</span>,</span><br><span class="line">            <span class="number">9</span>: <span class="string">'ninety'</span></span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span> abs(number) &gt;= <span class="number">10000</span>:</span><br><span class="line">        <span class="keyword">return</span> str(number)</span><br><span class="line">    <span class="keyword">elif</span> number == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'zero'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> number &lt; <span class="number">0</span>:</span><br><span class="line">            output += <span class="string">'negative '</span></span><br><span class="line">            number = abs(number)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> number &gt;= <span class="number">1000</span>:</span><br><span class="line">            output += _ones[number // <span class="number">1000</span>]</span><br><span class="line">            <span class="keyword">if</span> number % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">                output += <span class="string">" thousand"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                output += <span class="string">" thousand "</span></span><br><span class="line">            number %= <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> number &gt;= <span class="number">100</span>:</span><br><span class="line">            output += _ones[number // <span class="number">100</span>]</span><br><span class="line">            <span class="keyword">if</span> number % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                output += <span class="string">" hundred"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                output += <span class="string">" hundred and "</span></span><br><span class="line">            number %= <span class="number">100</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> number &gt;= <span class="number">20</span>:</span><br><span class="line">            output += _tens[number // <span class="number">10</span>]</span><br><span class="line">            number %= <span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> number % <span class="number">10</span> <span class="keyword">in</span> _ones:</span><br><span class="line">                output += <span class="string">'-'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> number <span class="keyword">in</span> _ones:</span><br><span class="line">            output += _ones[number]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanse_string</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="string">'''remove spaces and hyphens'''</span></span><br><span class="line">    string = string.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">    string = string.replace(<span class="string">'-'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line">print(sum(len(cleanse_string(to_english(i))) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1001</span>)))</span><br></pre></td></tr></table></figure></p><hr><p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ones = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">'one'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'two'</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">'three'</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="string">'four'</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">'five'</span>,</span><br><span class="line">  <span class="number">6</span>: <span class="string">'six'</span>,</span><br><span class="line">  <span class="number">7</span>: <span class="string">'seven'</span>,</span><br><span class="line">  <span class="number">8</span>: <span class="string">'eight'</span>,</span><br><span class="line">  <span class="number">9</span>: <span class="string">'nine'</span>,</span><br><span class="line">  <span class="number">10</span>: <span class="string">'ten'</span>,</span><br><span class="line">  <span class="number">11</span>: <span class="string">'eleven'</span>,</span><br><span class="line">  <span class="number">12</span>: <span class="string">'twelve'</span>,</span><br><span class="line">  <span class="number">13</span>: <span class="string">'thirteen'</span>,</span><br><span class="line">  <span class="number">14</span>: <span class="string">'fourteen'</span>,</span><br><span class="line">  <span class="number">15</span>: <span class="string">'fifteen'</span>,</span><br><span class="line">  <span class="number">16</span>: <span class="string">'sixteen'</span>,</span><br><span class="line">  <span class="number">17</span>: <span class="string">'seventeen'</span>,</span><br><span class="line">  <span class="number">18</span>: <span class="string">'eighteen'</span>,</span><br><span class="line">  <span class="number">19</span>: <span class="string">'nineteen'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tens = &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="string">'twenty'</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">'thirty'</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="string">'forty'</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">'fifty'</span>,</span><br><span class="line">  <span class="number">6</span>: <span class="string">'sixty'</span>,</span><br><span class="line">  <span class="number">7</span>: <span class="string">'seventy'</span>,</span><br><span class="line">  <span class="number">8</span>: <span class="string">'eighty'</span>,</span><br><span class="line">  <span class="number">9</span>: <span class="string">'ninety'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">english</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> parts = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (number &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">    parts.push(ones[<span class="built_in">Math</span>.floor(number / <span class="number">1000</span>)])</span><br><span class="line">    parts.push(<span class="string">"thousand"</span>)</span><br><span class="line">    number %= <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (number &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">    parts.push(ones[<span class="built_in">Math</span>.floor(number / <span class="number">100</span>)])</span><br><span class="line">    parts.push(<span class="string">"hundred"</span>)</span><br><span class="line">    <span class="keyword">if</span> (number % <span class="number">100</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      parts.push(<span class="string">"and"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    number %= <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (number &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">    parts.push(tens[<span class="built_in">Math</span>.floor(number / <span class="number">10</span>)])</span><br><span class="line">    number %= <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ones[number]) &#123;</span><br><span class="line">    parts.push(ones[number])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parts.join(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> words = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  words.push(english(i))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(words.join(<span class="string">""</span>).length)</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'linguistics'</span> <span class="comment"># gem install linguistics</span></span><br><span class="line">Linguistics::use( <span class="symbol">:en</span> )</span><br><span class="line">puts (<span class="number">1</span>..<span class="number">1000</span>).map &#123; <span class="params">|i|</span> i.en.numwords.gsub(<span class="regexp">/[ -]/</span>, <span class="string">''</span>).length &#125;.reduce(<span class="symbol">:+</span>)</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p017</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p017().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * - For the numbers 0 to 19, we write the single word:</span></span><br><span class="line"><span class="comment"> *   &#123;zero, one, two, three, four, five, six, seven, eight, nine,</span></span><br><span class="line"><span class="comment"> *   ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen&#125;.</span></span><br><span class="line"><span class="comment"> * - For the numbers 20 to 99, we write the word for the tens place:</span></span><br><span class="line"><span class="comment"> *   &#123;twenty, thirty, forty, fifty, sixty, seventy, eighty, ninety&#125;.</span></span><br><span class="line"><span class="comment"> *   Subsequently if the last digit is not 0, then we write the word for the ones place (one to nine).</span></span><br><span class="line"><span class="comment"> * - For the numbers 100 to 999, we write the ones word for the hundreds place followed by "hundred":</span></span><br><span class="line"><span class="comment"> *   &#123;one hundred, two hundred, three hundred, ..., eight hundred, nine hundred&#125;.</span></span><br><span class="line"><span class="comment"> *   Subsequently if the last two digits are not 00, then we write the word "and"</span></span><br><span class="line"><span class="comment"> *   followed by the phrase for the last two digits (from 01 to 99).</span></span><br><span class="line"><span class="comment"> * - For the numbers 1000 to 999999, we write the word for the three digits starting at the</span></span><br><span class="line"><span class="comment"> *   thousands place and going leftward, followed by "thousand". Subsequently if the last three</span></span><br><span class="line"><span class="comment"> *   digits are not 000, then we write the phrase for the last three digits (from 001 to 999).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">sum += toEnglish(i).length();</span><br><span class="line"><span class="keyword">return</span> Integer.toString(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toEnglish</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &lt;= n &amp;&amp; n &lt; <span class="number">20</span>)</span><br><span class="line"><span class="keyword">return</span> ONES[n];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">20</span> &lt;= n &amp;&amp; n &lt; <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> TENS[n / <span class="number">10</span>] + (n % <span class="number">10</span> != <span class="number">0</span> ? ONES[n % <span class="number">10</span>] : <span class="string">""</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">100</span> &lt;= n &amp;&amp; n &lt; <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">return</span> ONES[n / <span class="number">100</span>] + <span class="string">"hundred"</span> + (n % <span class="number">100</span> != <span class="number">0</span> ? <span class="string">"and"</span> + toEnglish(n % <span class="number">100</span>) : <span class="string">""</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1000</span> &lt;= n &amp;&amp; n &lt; <span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">return</span> toEnglish(n / <span class="number">1000</span>) + <span class="string">"thousand"</span> + (n % <span class="number">1000</span> != <span class="number">0</span> ? toEnglish(n % <span class="number">1000</span>) : <span class="string">""</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String[] ONES = &#123;</span><br><span class="line"><span class="string">"zero"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>, <span class="string">"six"</span>, <span class="string">"seven"</span>, <span class="string">"eight"</span>, <span class="string">"nine"</span>,</span><br><span class="line"><span class="string">"ten"</span>, <span class="string">"eleven"</span>, <span class="string">"twelve"</span>, <span class="string">"thirteen"</span>, <span class="string">"fourteen"</span>, <span class="string">"fifteen"</span>, <span class="string">"sixteen"</span>, <span class="string">"seventeen"</span>, <span class="string">"eighteen"</span>, <span class="string">"nineteen"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String[] TENS = &#123;</span><br><span class="line"><span class="string">""</span>, <span class="string">""</span>, <span class="string">"twenty"</span>, <span class="string">"thirty"</span>, <span class="string">"forty"</span>, <span class="string">"fifty"</span>, <span class="string">"sixty"</span>, <span class="string">"seventy"</span>, <span class="string">"eighty"</span>, <span class="string">"ninety"</span>&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * - For the numbers 0 to 19, we write the single word:</span></span><br><span class="line"><span class="comment"> *   &#123;zero, one, two, three, four, five, six, seven, eight, nine,</span></span><br><span class="line"><span class="comment"> *   ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen&#125;.</span></span><br><span class="line"><span class="comment"> * - For the numbers 20 to 99, we write the word for the tens place:</span></span><br><span class="line"><span class="comment"> *   &#123;twenty, thirty, forty, fifty, sixty, seventy, eighty, ninety&#125;.</span></span><br><span class="line"><span class="comment"> *   Subsequently if the last digit is not 0, then we write the word for the ones place (one to nine).</span></span><br><span class="line"><span class="comment"> * - For the numbers 100 to 999, we write the ones word for the hundreds place followed by "hundred":</span></span><br><span class="line"><span class="comment"> *   &#123;one hundred, two hundred, three hundred, ..., eight hundred, nine hundred&#125;.</span></span><br><span class="line"><span class="comment"> *   Subsequently if the last two digits are not 00, then we write the word "and"</span></span><br><span class="line"><span class="comment"> *   followed by the phrase for the last two digits (from 01 to 99).</span></span><br><span class="line"><span class="comment"> * - For the numbers 1000 to 999999, we write the word for the three digits starting at the</span></span><br><span class="line"><span class="comment"> *   thousands place and going leftward, followed by "thousand". Subsequently if the last three</span></span><br><span class="line"><span class="comment"> *   digits are not 000, then we write the phrase for the last three digits (from 001 to 999).</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line"></span><br><span class="line">ones = &#123;"one", "two", "three", "four", "five", "six", "seven", "eight", "nine",</span><br><span class="line">        "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"&#125;;</span><br><span class="line">tens = &#123;"", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"&#125;;</span><br><span class="line"></span><br><span class="line">ToEnglish[n_] := <span class="keyword">Piecewise</span>[&#123;</span><br><span class="line">  &#123;"zero",</span><br><span class="line">    n == 0&#125;,</span><br><span class="line">  &#123;ones[[n]],</span><br><span class="line">    1 &lt;= n &lt; 20&#125;,</span><br><span class="line">  &#123;tens[[Floor[n / 10]]] &lt;&gt; If[Mod[n, 10] != 0, ones[[Mod[n, 10]]], ""],</span><br><span class="line">    20 &lt;= n &lt; 100&#125;,</span><br><span class="line">  &#123;ones[[Floor[n / 100]]] &lt;&gt; "hundred" &lt;&gt; If[Mod[n, 100] != 0, "and" &lt;&gt; ToEnglish[Mod[n, 100]], ""],</span><br><span class="line">    100 &lt;= n &lt; 1000&#125;,</span><br><span class="line">  &#123;ToEnglish[Floor[n / 1000]] &lt;&gt; "thousand" &lt;&gt; If[Mod[n, 1000] != 0, ToEnglish[Mod[n, 1000]], ""],</span><br><span class="line">    1000 &lt;= n &lt; 1000000&#125;&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Sum</span>[<span class="keyword">StringLength</span>[ToEnglish[n]], &#123;n, 1000&#125;]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;&lt;br&gt;If the numbers 1 to 5 are written out in words
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-016</title>
    <link href="onlookerliu.github.io/2018/03/11/Project-Euler-016/"/>
    <id>onlookerliu.github.io/2018/03/11/Project-Euler-016/</id>
    <published>2018-03-11T07:50:31.000Z</published>
    <updated>2018-03-19T07:54:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><br>$2^{15} = 32768$ and the sum of its digits is $3 + 2 + 7 + 6 + 8 = 26$.<br></p><p><br>What is the sum of the digits of the number $2^{1000}$?<br></p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1366</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">print(sum(int(digit) <span class="keyword">for</span> digit <span class="keyword">in</span> str(<span class="number">2</span>**<span class="number">1000</span>)))</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">puts (<span class="number">2</span>**<span class="number">1000</span>).to_s.each_char.inject(<span class="number">0</span>) &#123;<span class="params">|s,v|</span> s+v.to_i&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sumDigits</span> ::  <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">sumDigits</span> n = sumDigits' n <span class="number">0</span></span><br><span class="line">    <span class="keyword">where</span> sumDigits' <span class="number">0</span> acc = acc</span><br><span class="line">          sumDigits' n acc = sumDigits' (div n <span class="number">10</span>) (acc + (mod n <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> ::  <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ sumDigits $ <span class="number">2</span>^<span class="number">1000</span></span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p016</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p016().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We implement this solution in a straightforward way with help from BigInteger.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String temp = BigInteger.ONE.shiftLeft(<span class="number">1000</span>).toString();</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length(); i++)</span><br><span class="line">sum += temp.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * We implement this solution in a straightforward way thanks to</span></span><br><span class="line"><span class="comment"> * Mathematica's built-in functions and arbitrary precision integer type.</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line"><span class="keyword">Total</span>[<span class="keyword">IntegerDigits</span>[<span class="number">2</span>^<span class="number">1000</span>]]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;&lt;br&gt;$2^{15} = 32768$ and the sum of its digits is 
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-015</title>
    <link href="onlookerliu.github.io/2018/03/10/Project-Euler-015/"/>
    <id>onlookerliu.github.io/2018/03/10/Project-Euler-015/</id>
    <published>2018-03-10T07:44:16.000Z</published>
    <updated>2018-03-19T08:41:46.561Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><br>Starting in the top left corner of a 2x2 grid, there are 6 routes (without backtracking) to the bottom right corner.<br></p><div style="text-align: center;"><br><img src="http://projecteuler.net/project/images/p015.gif"><br></div><p><br>How many routes are there through a 20x20 grid?<br></p><p>The grid can be expressed as <a href="http://en.wikipedia.org/wiki/Pascal&#39;s_triangle" target="_blank" rel="noopener">Pascal’s Triangle</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1 1</span><br><span class="line">1 (2) 1</span><br><span class="line">1 3 3 1</span><br><span class="line">1 4 (6) 4 1</span><br><span class="line">1 5 10 10 5 1</span><br><span class="line">1 6 15 (20) 15 6 1</span><br></pre></td></tr></table></figure><p>Note that the solution for a 1x1 grid is 2, a 2x2 grid is 6, and a 3x3 grid is 20.</p><p>If we compare these solutions to Pascal’s Triangle, we see that they correspond to<br>the 1st element in the 2nd row, the 2nd element in the 4th row, and the 3rd element<br>in the 6th row, respectively. (Note that Pascal’s Triangle is zero-indexed.)</p><p>The <a href="http://en.wikipedia.org/wiki/Binomial_coefficient" target="_blank" rel="noopener">binomial coefficient</a><br>$\binom {n} {k}$ can be used to determine the $k$th element in the<br>$n$th row of Pascal’s Triangle. Thus, we could express the aforementioned solutions as<br>$\binom {2} {1}$, $\binom {4} {2}$, and $\binom {6} {3}$, respectively.</p><p>Thus, a general solution for grids of size $x$ is </p><p>$$routes = \binom {2x} {x}$$.</p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">137846528820</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> comb</span><br><span class="line">print(comb(<span class="number">2</span> * <span class="number">20</span>,<span class="number">20</span>))</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span> </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(k)</span></span> </span><br><span class="line">    (<span class="keyword">self</span>-k+<span class="number">1</span> .. <span class="keyword">self</span>).inject(<span class="number">1</span>, &amp;<span class="symbol">:*</span>) / (<span class="number">2</span> .. k).inject(<span class="number">1</span>, &amp;<span class="symbol">:*</span>) </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="number">40</span>.choose(<span class="number">20</span>)</span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line"><span class="comment">; compute pascal's triangle</span></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> ** [x n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">.</span></span> (<span class="name"><span class="builtin-name">.</span></span> java.math.BigInteger (<span class="name">valueOf</span> x)) (<span class="name">pow</span> n)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> pascal [n k]</span><br><span class="line">  (<span class="name"><span class="builtin-name">cond</span></span> </span><br><span class="line">    (<span class="name"><span class="builtin-name">=</span></span> k n) <span class="number">1</span></span><br><span class="line">    (<span class="name"><span class="builtin-name">or</span></span> (<span class="name"><span class="builtin-name">&lt;</span></span> n <span class="number">0</span>) (<span class="name"><span class="builtin-name">&lt;</span></span> k <span class="number">0</span>)) <span class="number">0</span></span><br><span class="line">    <span class="symbol">:else</span> </span><br><span class="line">    (<span class="name"><span class="builtin-name">+</span></span></span><br><span class="line">      (<span class="name">pascal</span> (<span class="name"><span class="builtin-name">-</span></span> n <span class="number">1</span>) (<span class="name"><span class="builtin-name">-</span></span> k <span class="number">1</span>))</span><br><span class="line">      (<span class="name">pascal</span> (<span class="name"><span class="builtin-name">-</span></span> n <span class="number">1</span>) k))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> pascal-row [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name">pascal</span> n %) (<span class="name"><span class="builtin-name">range</span></span> (<span class="name"><span class="builtin-name">+</span></span> n <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> pascal-triangle [num-rows]</span><br><span class="line">  (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name">pascal-row</span> %) (<span class="name"><span class="builtin-name">range</span></span> num-rows)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">dorun</span></span> (<span class="name"><span class="builtin-name">map</span></span> println (<span class="name">pascal-triangle</span> <span class="number">10</span>)))</span><br><span class="line">(<span class="name">println</span> (<span class="name">pascal</span> <span class="number">5</span> <span class="number">3</span>))</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">factorial</span> ::  <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">factorial</span> n = product [<span class="number">1.</span>.n]</span><br><span class="line"></span><br><span class="line"><span class="title">choose</span> ::  <span class="type">Integer</span> -&gt; <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">choose</span> n k = div (factorial n) $ factorial k * factorial (n - k)</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> ::  <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ choose <span class="number">40</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></p><hr><p>Java<br>``java<br>import java.math.BigInteger;</p><p>public final class p016 implements EulerSolution {</p><pre><code>public static void main(String[] args) {    System.out.println(new p016().run());}/*  * We implement this solution in a straightforward way with help from BigInteger. */public String run() {    String temp = BigInteger.ONE.shiftLeft(1000).toString();    int sum = 0;    for (int i = 0; i &lt; temp.length(); i++)        sum += temp.charAt(i) - &apos;0&apos;;    return Integer.toString(sum);}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">________</span><br><span class="line">Mathematica</span><br><span class="line">```mathematica</span><br><span class="line">(* </span><br><span class="line"> * We implement this solution in a straightforward way thanks to</span><br><span class="line"> * Mathematica&apos;s built-in functions and arbitrary precision integer type.</span><br><span class="line"> *)</span><br><span class="line">Total[IntegerDigits[2^1000]]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;&lt;br&gt;Starting in the top left corner of a 2x2 grid,
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-014</title>
    <link href="onlookerliu.github.io/2018/03/09/Project-Euler-014/"/>
    <id>onlookerliu.github.io/2018/03/09/Project-Euler-014/</id>
    <published>2018-03-09T07:34:24.000Z</published>
    <updated>2018-03-19T07:40:59.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>The following iterative sequence is defined for the set of positive integers:</p><p>$$n \rightarrow<br>\begin{cases}<br>\tfrac{n}{2} &amp; \text{if } n \text{ is even} \<br>3n+1 &amp; \text{if } n \text{ is odd}<br>\end{cases}$$</p><p>Using the rule above and starting with 13, we generate the following sequence:</p><p>$$13, 40, 20, 10, 5, 16, 8, 4, 2, 1$$</p><p>It can be seen that this sequence (starting at 13 and finishing at 1) contains 10<br>terms. Although it has not been proved yet (Collatz Problem), it is thought that all<br>starting numbers finish at 1.</p><p>Which starting number, under one million, produces the longest chain?</p><p>NOTE: Once the chain starts the terms are allowed to go above one million.</p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">837799</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_collatz</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> n / <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>*n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collatz</span><span class="params">(start)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"start must be greater than or equal to 1"</span>)</span><br><span class="line">    <span class="keyword">elif</span> start == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    res = [start]</span><br><span class="line">    done = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">        res += [next_collatz(res[<span class="number">-1</span>])]</span><br><span class="line">        <span class="keyword">if</span> res[<span class="number">-1</span>] == <span class="number">1</span>: done = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">_collatz_cache = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lencollatz</span><span class="params">(start)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"start must be greater than or equal to 1"</span>)</span><br><span class="line">    <span class="keyword">elif</span> start == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    n = start</span><br><span class="line">    length = <span class="number">1</span></span><br><span class="line">    done = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">        n = next_collatz(n)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            length += _collatz_cache[n]</span><br><span class="line">            done = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span>: done = <span class="keyword">True</span></span><br><span class="line">    _collatz_cache[start] = length</span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line">max_len = <span class="number">0</span></span><br><span class="line">max_i = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000000</span>):</span><br><span class="line">    l = lencollatz(i)</span><br><span class="line">    <span class="keyword">if</span> l &gt; max_len:</span><br><span class="line">        max_len = l</span><br><span class="line">        max_i = i</span><br><span class="line">print(max_i)</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line">max_l = <span class="number">0</span></span><br><span class="line">max_i = <span class="number">0</span></span><br><span class="line"><span class="number">500001</span>.step(<span class="number">1000000</span>, <span class="number">2</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  l = <span class="number">0</span></span><br><span class="line">  j = i</span><br><span class="line">  <span class="keyword">while</span> j != <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> j.even?</span><br><span class="line">      j /= <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      j = <span class="number">3</span> * j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    l += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> l &gt; max_l</span><br><span class="line">    max_l = l</span><br><span class="line">    max_i = i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts max_i</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Word</span><br><span class="line"><span class="keyword">import</span> Data.Array</span><br><span class="line"></span><br><span class="line"><span class="title">memoCollatz</span> :: <span class="type">Array</span> <span class="type">Word</span> <span class="type">Word</span></span><br><span class="line"><span class="title">memoCollatz</span> = listArray (<span class="number">1</span>, size) $ map collatz [<span class="number">1.</span>.size]</span><br><span class="line">    <span class="keyword">where</span> size = <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line"><span class="title">collatz</span> :: <span class="type">Word</span> -&gt; <span class="type">Word</span></span><br><span class="line"><span class="title">collatz</span> <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="title">collatz</span> n | inRange (bounds memoCollatz) next = <span class="number">1</span> + memoCollatz ! next</span><br><span class="line">          | otherwise = <span class="number">1</span> + collatz next</span><br><span class="line">          <span class="keyword">where</span> next = <span class="keyword">case</span> n <span class="keyword">of</span></span><br><span class="line">                           <span class="number">1</span> -&gt; <span class="number">1</span></span><br><span class="line">                           n | even n -&gt; n `div` <span class="number">2</span></span><br><span class="line">                             | otherwise -&gt; <span class="number">3</span> * n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = print $ snd $ maximum $ map (\n -&gt; (collatz n, n)) [<span class="number">1.</span><span class="number">.1000000</span>]</span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> collatz [start]</span><br><span class="line">  (<span class="name"><span class="builtin-name">defn</span></span> next-collatz [n]</span><br><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">even?</span></span> n)</span><br><span class="line">      (/ n <span class="number">2</span>)</span><br><span class="line">      (<span class="name"><span class="builtin-name">+</span></span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> n) <span class="number">1</span>)))</span><br><span class="line">  (<span class="name"><span class="builtin-name">def</span></span> memo-collatz</span><br><span class="line">    (<span class="name"><span class="builtin-name">memoize</span></span> next-collatz))</span><br><span class="line">  (<span class="name"><span class="builtin-name">defn</span></span> not-one? [n]</span><br><span class="line">    (<span class="name"><span class="builtin-name">not</span></span> (<span class="name"><span class="builtin-name">=</span></span> n <span class="number">1</span>)))</span><br><span class="line">  (<span class="name"><span class="builtin-name">concat</span></span> (<span class="name"><span class="builtin-name">take-while</span></span> not-one? (<span class="name"><span class="builtin-name">iterate</span></span> next-collatz start)) [<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> collatz-seqs [limit]</span><br><span class="line">  (<span class="name"><span class="builtin-name">map</span></span> collatz (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> limit)))</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">apply</span></span> max-key count (<span class="name">collatz-seqs</span> <span class="number">100000</span>)))</span><br></pre></td></tr></table></figure></p><hr><p>C<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">next_collatz</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n / <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> * n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">lencollatz</span><span class="params">(<span class="keyword">long</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (start == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">long</span> n = start;</span><br><span class="line">    <span class="keyword">long</span> length = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">        n = next_collatz(n);</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> max_l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> max_i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">long</span> l = lencollatz(i);</span><br><span class="line">        <span class="keyword">if</span> (l &gt; max_l) &#123;</span><br><span class="line">            max_l = l;</span><br><span class="line">            max_i = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>, max_i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p014</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p014().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We compute the Collatz chain length for every integer in the range according to the iteration rule.</span></span><br><span class="line"><span class="comment"> * Also, we cache the Collatz value for small integer arguments to speed up the computation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LIMIT = Library.pow(<span class="number">10</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> maxArg = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxChain = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; LIMIT; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> chainLen = collatzChainLength(BigInteger.valueOf(i));</span><br><span class="line"><span class="keyword">if</span> (chainLen &gt; maxChain) &#123;</span><br><span class="line">maxArg = i;</span><br><span class="line">maxChain = chainLen;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(maxArg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Can be set to any non-negative number, but there are diminishing returns as you go larger</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BigInteger CACHE_SIZE = BigInteger.valueOf(LIMIT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Memoization</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] collatzChainLength = <span class="keyword">new</span> <span class="keyword">int</span>[CACHE_SIZE.intValue()];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the Collatz chain length of the given integer with automatic caching.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">collatzChainLength</span><span class="params">(BigInteger n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n.signum() &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n.compareTo(CACHE_SIZE) &gt;= <span class="number">0</span>)  <span class="comment">// Caching not available</span></span><br><span class="line"><span class="keyword">return</span> collatzChainLengthDirect(n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = n.intValue();  <span class="comment">// Index in the cache</span></span><br><span class="line"><span class="keyword">if</span> (collatzChainLength[index] == <span class="number">0</span>)</span><br><span class="line">collatzChainLength[index] = collatzChainLengthDirect(n);</span><br><span class="line"><span class="keyword">return</span> collatzChainLength[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the Collatz chain length of the given integer, with the</span></span><br><span class="line"><span class="comment">// first step uncached but the remaining steps using automatic caching.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">collatzChainLengthDirect</span><span class="params">(BigInteger n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n.equals(BigInteger.ONE))  <span class="comment">// Base case</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!n.testBit(<span class="number">0</span>))  <span class="comment">// If n is even</span></span><br><span class="line"><span class="keyword">return</span> collatzChainLength(n.shiftRight(<span class="number">1</span>)) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">// Else n is odd</span></span><br><span class="line"><span class="keyword">return</span> collatzChainLength(n.multiply(BigInteger.valueOf(<span class="number">3</span>)).add(BigInteger.ONE)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Collatz[<span class="number">0</span>] := <span class="number">0</span></span><br><span class="line">Collatz[<span class="number">1</span>] := <span class="number">1</span></span><br><span class="line">Collatz[n_] := <span class="keyword">Block</span>[&#123;res = Collatz[If[EvenQ[n], n / 2, n * 3 + 1]] + 1&#125;,</span><br><span class="line">  <span class="keyword">If</span>[n &lt; <span class="number">10</span>^<span class="number">5</span>, Collatz[n] = res, res]]  <span class="comment">(* Selective memoization *)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">$RecursionLimit</span> = <span class="number">1000</span>;</span><br><span class="line">maxArg = <span class="number">-1</span>;</span><br><span class="line">maxVal = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">For</span>[i = <span class="number">0</span>, i &lt;= <span class="number">10</span>^<span class="number">6</span>, i++,</span><br><span class="line">  <span class="keyword">If</span>[Collatz[i] &gt; maxVal,</span><br><span class="line">    maxVal = Collatz[i];</span><br><span class="line">    maxArg = i]]</span><br><span class="line">maxArg</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;The following iterative sequence is defined for th
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-013</title>
    <link href="onlookerliu.github.io/2018/03/08/Project-Euler-013/"/>
    <id>onlookerliu.github.io/2018/03/08/Project-Euler-013/</id>
    <published>2018-03-08T07:29:52.000Z</published>
    <updated>2018-03-19T07:36:21.603Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Work out the first ten digits of the sum of the following<br>fifty digit numbers.</p><pre><codecode></pre><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5537376230</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">digits_string = <span class="string">'''</span></span><br><span class="line"><span class="string">37107287533902102798797998220837590246510135740250</span></span><br><span class="line"><span class="string">46376937677490009712648124896970078050417018260538</span></span><br><span class="line"><span class="string">74324986199524741059474233309513058123726617309629</span></span><br><span class="line"><span class="string">91942213363574161572522430563301811072406154908250</span></span><br><span class="line"><span class="string">23067588207539346171171980310421047513778063246676</span></span><br><span class="line"><span class="string">89261670696623633820136378418383684178734361726757</span></span><br><span class="line"><span class="string">28112879812849979408065481931592621691275889832738</span></span><br><span class="line"><span class="string">44274228917432520321923589422876796487670272189318</span></span><br><span class="line"><span class="string">47451445736001306439091167216856844588711603153276</span></span><br><span class="line"><span class="string">70386486105843025439939619828917593665686757934951</span></span><br><span class="line"><span class="string">62176457141856560629502157223196586755079324193331</span></span><br><span class="line"><span class="string">64906352462741904929101432445813822663347944758178</span></span><br><span class="line"><span class="string">92575867718337217661963751590579239728245598838407</span></span><br><span class="line"><span class="string">58203565325359399008402633568948830189458628227828</span></span><br><span class="line"><span class="string">80181199384826282014278194139940567587151170094390</span></span><br><span class="line"><span class="string">35398664372827112653829987240784473053190104293586</span></span><br><span class="line"><span class="string">86515506006295864861532075273371959191420517255829</span></span><br><span class="line"><span class="string">71693888707715466499115593487603532921714970056938</span></span><br><span class="line"><span class="string">54370070576826684624621495650076471787294438377604</span></span><br><span class="line"><span class="string">53282654108756828443191190634694037855217779295145</span></span><br><span class="line"><span class="string">36123272525000296071075082563815656710885258350721</span></span><br><span class="line"><span class="string">45876576172410976447339110607218265236877223636045</span></span><br><span class="line"><span class="string">17423706905851860660448207621209813287860733969412</span></span><br><span class="line"><span class="string">81142660418086830619328460811191061556940512689692</span></span><br><span class="line"><span class="string">51934325451728388641918047049293215058642563049483</span></span><br><span class="line"><span class="string">62467221648435076201727918039944693004732956340691</span></span><br><span class="line"><span class="string">15732444386908125794514089057706229429197107928209</span></span><br><span class="line"><span class="string">55037687525678773091862540744969844508330393682126</span></span><br><span class="line"><span class="string">18336384825330154686196124348767681297534375946515</span></span><br><span class="line"><span class="string">80386287592878490201521685554828717201219257766954</span></span><br><span class="line"><span class="string">78182833757993103614740356856449095527097864797581</span></span><br><span class="line"><span class="string">16726320100436897842553539920931837441497806860984</span></span><br><span class="line"><span class="string">48403098129077791799088218795327364475675590848030</span></span><br><span class="line"><span class="string">87086987551392711854517078544161852424320693150332</span></span><br><span class="line"><span class="string">59959406895756536782107074926966537676326235447210</span></span><br><span class="line"><span class="string">69793950679652694742597709739166693763042633987085</span></span><br><span class="line"><span class="string">41052684708299085211399427365734116182760315001271</span></span><br><span class="line"><span class="string">65378607361501080857009149939512557028198746004375</span></span><br><span class="line"><span class="string">35829035317434717326932123578154982629742552737307</span></span><br><span class="line"><span class="string">94953759765105305946966067683156574377167401875275</span></span><br><span class="line"><span class="string">88902802571733229619176668713819931811048770190271</span></span><br><span class="line"><span class="string">25267680276078003013678680992525463401061632866526</span></span><br><span class="line"><span class="string">36270218540497705585629946580636237993140746255962</span></span><br><span class="line"><span class="string">24074486908231174977792365466257246923322810917141</span></span><br><span class="line"><span class="string">91430288197103288597806669760892938638285025333403</span></span><br><span class="line"><span class="string">34413065578016127815921815005561868836468420090470</span></span><br><span class="line"><span class="string">23053081172816430487623791969842487255036638784583</span></span><br><span class="line"><span class="string">11487696932154902810424020138335124462181441773470</span></span><br><span class="line"><span class="string">63783299490636259666498587618221225225512486764533</span></span><br><span class="line"><span class="string">67720186971698544312419572409913959008952310058822</span></span><br><span class="line"><span class="string">95548255300263520781532296796249481641953868218774</span></span><br><span class="line"><span class="string">76085327132285723110424803456124867697064507995236</span></span><br><span class="line"><span class="string">37774242535411291684276865538926205024910326572967</span></span><br><span class="line"><span class="string">23701913275725675285653248258265463092207058596522</span></span><br><span class="line"><span class="string">29798860272258331913126375147341994889534765745501</span></span><br><span class="line"><span class="string">18495701454879288984856827726077713721403798879715</span></span><br><span class="line"><span class="string">38298203783031473527721580348144513491373226651381</span></span><br><span class="line"><span class="string">34829543829199918180278916522431027392251122869539</span></span><br><span class="line"><span class="string">40957953066405232632538044100059654939159879593635</span></span><br><span class="line"><span class="string">29746152185502371307642255121183693803580388584903</span></span><br><span class="line"><span class="string">41698116222072977186158236678424689157993532961922</span></span><br><span class="line"><span class="string">62467957194401269043877107275048102390895523597457</span></span><br><span class="line"><span class="string">23189706772547915061505504953922979530901129967519</span></span><br><span class="line"><span class="string">86188088225875314529584099251203829009407770775672</span></span><br><span class="line"><span class="string">11306739708304724483816533873502340845647058077308</span></span><br><span class="line"><span class="string">82959174767140363198008187129011875491310547126581</span></span><br><span class="line"><span class="string">97623331044818386269515456334926366572897563400500</span></span><br><span class="line"><span class="string">42846280183517070527831839425882145521227251250327</span></span><br><span class="line"><span class="string">55121603546981200581762165212827652751691296897789</span></span><br><span class="line"><span class="string">32238195734329339946437501907836945765883352399886</span></span><br><span class="line"><span class="string">75506164965184775180738168837861091527357929701337</span></span><br><span class="line"><span class="string">62177842752192623401942399639168044983993173312731</span></span><br><span class="line"><span class="string">32924185707147349566916674687634660915035914677504</span></span><br><span class="line"><span class="string">99518671430235219628894890102423325116913619626622</span></span><br><span class="line"><span class="string">73267460800591547471830798392868535206946944540724</span></span><br><span class="line"><span class="string">76841822524674417161514036427982273348055556214818</span></span><br><span class="line"><span class="string">97142617910342598647204516893989422179826088076852</span></span><br><span class="line"><span class="string">87783646182799346313767754307809363333018982642090</span></span><br><span class="line"><span class="string">10848802521674670883215120185883543223812876952786</span></span><br><span class="line"><span class="string">71329612474782464538636993009049310363619763878039</span></span><br><span class="line"><span class="string">62184073572399794223406235393808339651327408011116</span></span><br><span class="line"><span class="string">66627891981488087797941876876144230030984490851411</span></span><br><span class="line"><span class="string">60661826293682836764744779239180335110989069790714</span></span><br><span class="line"><span class="string">85786944089552990653640447425576083659976645795096</span></span><br><span class="line"><span class="string">66024396409905389607120198219976047599490197230297</span></span><br><span class="line"><span class="string">64913982680032973156037120041377903785566085089252</span></span><br><span class="line"><span class="string">16730939319872750275468906903707539413042652315011</span></span><br><span class="line"><span class="string">94809377245048795150954100921645863754710598436791</span></span><br><span class="line"><span class="string">78639167021187492431995700641917969777599028300699</span></span><br><span class="line"><span class="string">15368713711936614952811305876380278410754449733078</span></span><br><span class="line"><span class="string">40789923115535562561142322423255033685442488917353</span></span><br><span class="line"><span class="string">44889911501440648020369068063960672322193204149535</span></span><br><span class="line"><span class="string">41503128880339536053299340368006977710650566631954</span></span><br><span class="line"><span class="string">81234880673210146739058568557934581403627822703280</span></span><br><span class="line"><span class="string">82616570773948327592232845941706525094512325230608</span></span><br><span class="line"><span class="string">22918802058777319719839450180888072429661980811197</span></span><br><span class="line"><span class="string">77158542502016545090413245809786882778948721859617</span></span><br><span class="line"><span class="string">72107838435069186155435662884062257473692284509516</span></span><br><span class="line"><span class="string">20849603980134001723930671666823555245252804609722</span></span><br><span class="line"><span class="string">53503534226472524250874054075591789781264330331690</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">print(str(sum(int(line.strip()) <span class="keyword">for</span> line <span class="keyword">in</span> digits_string.strip().splitlines()))[:<span class="number">10</span>])</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">digits_string = <span class="string">&lt;&lt;EOS</span></span><br><span class="line"><span class="string">37107287533902102798797998220837590246510135740250</span></span><br><span class="line"><span class="number">46376937677490009712648124896970078050417018260538</span></span><br><span class="line"><span class="number">74324986199524741059474233309513058123726617309629</span></span><br><span class="line"><span class="number">91942213363574161572522430563301811072406154908250</span></span><br><span class="line"><span class="number">23067588207539346171171980310421047513778063246676</span></span><br><span class="line"><span class="number">89261670696623633820136378418383684178734361726757</span></span><br><span class="line"><span class="number">28112879812849979408065481931592621691275889832738</span></span><br><span class="line"><span class="number">44274228917432520321923589422876796487670272189318</span></span><br><span class="line"><span class="number">47451445736001306439091167216856844588711603153276</span></span><br><span class="line"><span class="number">70386486105843025439939619828917593665686757934951</span></span><br><span class="line"><span class="number">62176457141856560629502157223196586755079324193331</span></span><br><span class="line"><span class="number">64906352462741904929101432445813822663347944758178</span></span><br><span class="line"><span class="number">92575867718337217661963751590579239728245598838407</span></span><br><span class="line"><span class="number">58203565325359399008402633568948830189458628227828</span></span><br><span class="line"><span class="number">80181199384826282014278194139940567587151170094390</span></span><br><span class="line"><span class="number">35398664372827112653829987240784473053190104293586</span></span><br><span class="line"><span class="number">86515506006295864861532075273371959191420517255829</span></span><br><span class="line"><span class="number">71693888707715466499115593487603532921714970056938</span></span><br><span class="line"><span class="number">54370070576826684624621495650076471787294438377604</span></span><br><span class="line"><span class="number">53282654108756828443191190634694037855217779295145</span></span><br><span class="line"><span class="number">36123272525000296071075082563815656710885258350721</span></span><br><span class="line"><span class="number">45876576172410976447339110607218265236877223636045</span></span><br><span class="line"><span class="number">17423706905851860660448207621209813287860733969412</span></span><br><span class="line"><span class="number">81142660418086830619328460811191061556940512689692</span></span><br><span class="line"><span class="number">51934325451728388641918047049293215058642563049483</span></span><br><span class="line"><span class="number">62467221648435076201727918039944693004732956340691</span></span><br><span class="line"><span class="number">15732444386908125794514089057706229429197107928209</span></span><br><span class="line"><span class="number">55037687525678773091862540744969844508330393682126</span></span><br><span class="line"><span class="number">18336384825330154686196124348767681297534375946515</span></span><br><span class="line"><span class="number">80386287592878490201521685554828717201219257766954</span></span><br><span class="line"><span class="number">78182833757993103614740356856449095527097864797581</span></span><br><span class="line"><span class="number">16726320100436897842553539920931837441497806860984</span></span><br><span class="line"><span class="number">48403098129077791799088218795327364475675590848030</span></span><br><span class="line"><span class="number">87086987551392711854517078544161852424320693150332</span></span><br><span class="line"><span class="number">59959406895756536782107074926966537676326235447210</span></span><br><span class="line"><span class="number">69793950679652694742597709739166693763042633987085</span></span><br><span class="line"><span class="number">41052684708299085211399427365734116182760315001271</span></span><br><span class="line"><span class="number">65378607361501080857009149939512557028198746004375</span></span><br><span class="line"><span class="number">35829035317434717326932123578154982629742552737307</span></span><br><span class="line"><span class="number">94953759765105305946966067683156574377167401875275</span></span><br><span class="line"><span class="number">88902802571733229619176668713819931811048770190271</span></span><br><span class="line"><span class="number">25267680276078003013678680992525463401061632866526</span></span><br><span class="line"><span class="number">36270218540497705585629946580636237993140746255962</span></span><br><span class="line"><span class="number">24074486908231174977792365466257246923322810917141</span></span><br><span class="line"><span class="number">91430288197103288597806669760892938638285025333403</span></span><br><span class="line"><span class="number">34413065578016127815921815005561868836468420090470</span></span><br><span class="line"><span class="number">23053081172816430487623791969842487255036638784583</span></span><br><span class="line"><span class="number">11487696932154902810424020138335124462181441773470</span></span><br><span class="line"><span class="number">63783299490636259666498587618221225225512486764533</span></span><br><span class="line"><span class="number">67720186971698544312419572409913959008952310058822</span></span><br><span class="line"><span class="number">95548255300263520781532296796249481641953868218774</span></span><br><span class="line"><span class="number">76085327132285723110424803456124867697064507995236</span></span><br><span class="line"><span class="number">37774242535411291684276865538926205024910326572967</span></span><br><span class="line"><span class="number">23701913275725675285653248258265463092207058596522</span></span><br><span class="line"><span class="number">29798860272258331913126375147341994889534765745501</span></span><br><span class="line"><span class="number">18495701454879288984856827726077713721403798879715</span></span><br><span class="line"><span class="number">38298203783031473527721580348144513491373226651381</span></span><br><span class="line"><span class="number">34829543829199918180278916522431027392251122869539</span></span><br><span class="line"><span class="number">40957953066405232632538044100059654939159879593635</span></span><br><span class="line"><span class="number">29746152185502371307642255121183693803580388584903</span></span><br><span class="line"><span class="number">41698116222072977186158236678424689157993532961922</span></span><br><span class="line"><span class="number">62467957194401269043877107275048102390895523597457</span></span><br><span class="line"><span class="number">23189706772547915061505504953922979530901129967519</span></span><br><span class="line"><span class="number">86188088225875314529584099251203829009407770775672</span></span><br><span class="line"><span class="number">11306739708304724483816533873502340845647058077308</span></span><br><span class="line"><span class="number">82959174767140363198008187129011875491310547126581</span></span><br><span class="line"><span class="number">97623331044818386269515456334926366572897563400500</span></span><br><span class="line"><span class="number">42846280183517070527831839425882145521227251250327</span></span><br><span class="line"><span class="number">55121603546981200581762165212827652751691296897789</span></span><br><span class="line"><span class="number">32238195734329339946437501907836945765883352399886</span></span><br><span class="line"><span class="number">75506164965184775180738168837861091527357929701337</span></span><br><span class="line"><span class="number">62177842752192623401942399639168044983993173312731</span></span><br><span class="line"><span class="number">32924185707147349566916674687634660915035914677504</span></span><br><span class="line"><span class="number">99518671430235219628894890102423325116913619626622</span></span><br><span class="line"><span class="number">73267460800591547471830798392868535206946944540724</span></span><br><span class="line"><span class="number">76841822524674417161514036427982273348055556214818</span></span><br><span class="line"><span class="number">97142617910342598647204516893989422179826088076852</span></span><br><span class="line"><span class="number">87783646182799346313767754307809363333018982642090</span></span><br><span class="line"><span class="number">10848802521674670883215120185883543223812876952786</span></span><br><span class="line"><span class="number">71329612474782464538636993009049310363619763878039</span></span><br><span class="line"><span class="number">62184073572399794223406235393808339651327408011116</span></span><br><span class="line"><span class="number">66627891981488087797941876876144230030984490851411</span></span><br><span class="line"><span class="number">60661826293682836764744779239180335110989069790714</span></span><br><span class="line"><span class="number">85786944089552990653640447425576083659976645795096</span></span><br><span class="line"><span class="number">66024396409905389607120198219976047599490197230297</span></span><br><span class="line"><span class="number">64913982680032973156037120041377903785566085089252</span></span><br><span class="line"><span class="number">16730939319872750275468906903707539413042652315011</span></span><br><span class="line"><span class="number">94809377245048795150954100921645863754710598436791</span></span><br><span class="line"><span class="number">78639167021187492431995700641917969777599028300699</span></span><br><span class="line"><span class="number">15368713711936614952811305876380278410754449733078</span></span><br><span class="line"><span class="number">40789923115535562561142322423255033685442488917353</span></span><br><span class="line"><span class="number">44889911501440648020369068063960672322193204149535</span></span><br><span class="line"><span class="number">41503128880339536053299340368006977710650566631954</span></span><br><span class="line"><span class="number">81234880673210146739058568557934581403627822703280</span></span><br><span class="line"><span class="number">82616570773948327592232845941706525094512325230608</span></span><br><span class="line"><span class="number">22918802058777319719839450180888072429661980811197</span></span><br><span class="line"><span class="number">77158542502016545090413245809786882778948721859617</span></span><br><span class="line"><span class="number">72107838435069186155435662884062257473692284509516</span></span><br><span class="line"><span class="number">20849603980134001723930671666823555245252804609722</span></span><br><span class="line"><span class="number">53503534226472524250874054075591789781264330331690</span></span><br><span class="line">EOS</span><br><span class="line">puts digits_string.each_line.inject(<span class="number">0</span>) &#123;<span class="params">|sum, value|</span> sum+value.to_i&#125;.to_s[<span class="number">0</span>..<span class="number">9</span>]</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">        str &lt;- readFile <span class="string">"/home/zach/code/euler/013/digits.txt"</span></span><br><span class="line">        putStrLn $ take <span class="number">10</span> $ show $ sum $ map read $ lines str</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p013</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p013().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We do a straightforward sum with help from Java's BigInteger type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BigInteger sum = BigInteger.ZERO;</span><br><span class="line"><span class="keyword">for</span> (String num : NUMBERS)</span><br><span class="line">sum = sum.add(<span class="keyword">new</span> BigInteger(num));</span><br><span class="line"><span class="keyword">return</span> sum.toString().substring(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String[] NUMBERS = &#123;</span><br><span class="line"><span class="string">"37107287533902102798797998220837590246510135740250"</span>,</span><br><span class="line"><span class="string">"46376937677490009712648124896970078050417018260538"</span>,</span><br><span class="line"><span class="string">"74324986199524741059474233309513058123726617309629"</span>,</span><br><span class="line"><span class="string">"91942213363574161572522430563301811072406154908250"</span>,</span><br><span class="line"><span class="string">"23067588207539346171171980310421047513778063246676"</span>,</span><br><span class="line"><span class="string">"89261670696623633820136378418383684178734361726757"</span>,</span><br><span class="line"><span class="string">"28112879812849979408065481931592621691275889832738"</span>,</span><br><span class="line"><span class="string">"44274228917432520321923589422876796487670272189318"</span>,</span><br><span class="line"><span class="string">"47451445736001306439091167216856844588711603153276"</span>,</span><br><span class="line"><span class="string">"70386486105843025439939619828917593665686757934951"</span>,</span><br><span class="line"><span class="string">"62176457141856560629502157223196586755079324193331"</span>,</span><br><span class="line"><span class="string">"64906352462741904929101432445813822663347944758178"</span>,</span><br><span class="line"><span class="string">"92575867718337217661963751590579239728245598838407"</span>,</span><br><span class="line"><span class="string">"58203565325359399008402633568948830189458628227828"</span>,</span><br><span class="line"><span class="string">"80181199384826282014278194139940567587151170094390"</span>,</span><br><span class="line"><span class="string">"35398664372827112653829987240784473053190104293586"</span>,</span><br><span class="line"><span class="string">"86515506006295864861532075273371959191420517255829"</span>,</span><br><span class="line"><span class="string">"71693888707715466499115593487603532921714970056938"</span>,</span><br><span class="line"><span class="string">"54370070576826684624621495650076471787294438377604"</span>,</span><br><span class="line"><span class="string">"53282654108756828443191190634694037855217779295145"</span>,</span><br><span class="line"><span class="string">"36123272525000296071075082563815656710885258350721"</span>,</span><br><span class="line"><span class="string">"45876576172410976447339110607218265236877223636045"</span>,</span><br><span class="line"><span class="string">"17423706905851860660448207621209813287860733969412"</span>,</span><br><span class="line"><span class="string">"81142660418086830619328460811191061556940512689692"</span>,</span><br><span class="line"><span class="string">"51934325451728388641918047049293215058642563049483"</span>,</span><br><span class="line"><span class="string">"62467221648435076201727918039944693004732956340691"</span>,</span><br><span class="line"><span class="string">"15732444386908125794514089057706229429197107928209"</span>,</span><br><span class="line"><span class="string">"55037687525678773091862540744969844508330393682126"</span>,</span><br><span class="line"><span class="string">"18336384825330154686196124348767681297534375946515"</span>,</span><br><span class="line"><span class="string">"80386287592878490201521685554828717201219257766954"</span>,</span><br><span class="line"><span class="string">"78182833757993103614740356856449095527097864797581"</span>,</span><br><span class="line"><span class="string">"16726320100436897842553539920931837441497806860984"</span>,</span><br><span class="line"><span class="string">"48403098129077791799088218795327364475675590848030"</span>,</span><br><span class="line"><span class="string">"87086987551392711854517078544161852424320693150332"</span>,</span><br><span class="line"><span class="string">"59959406895756536782107074926966537676326235447210"</span>,</span><br><span class="line"><span class="string">"69793950679652694742597709739166693763042633987085"</span>,</span><br><span class="line"><span class="string">"41052684708299085211399427365734116182760315001271"</span>,</span><br><span class="line"><span class="string">"65378607361501080857009149939512557028198746004375"</span>,</span><br><span class="line"><span class="string">"35829035317434717326932123578154982629742552737307"</span>,</span><br><span class="line"><span class="string">"94953759765105305946966067683156574377167401875275"</span>,</span><br><span class="line"><span class="string">"88902802571733229619176668713819931811048770190271"</span>,</span><br><span class="line"><span class="string">"25267680276078003013678680992525463401061632866526"</span>,</span><br><span class="line"><span class="string">"36270218540497705585629946580636237993140746255962"</span>,</span><br><span class="line"><span class="string">"24074486908231174977792365466257246923322810917141"</span>,</span><br><span class="line"><span class="string">"91430288197103288597806669760892938638285025333403"</span>,</span><br><span class="line"><span class="string">"34413065578016127815921815005561868836468420090470"</span>,</span><br><span class="line"><span class="string">"23053081172816430487623791969842487255036638784583"</span>,</span><br><span class="line"><span class="string">"11487696932154902810424020138335124462181441773470"</span>,</span><br><span class="line"><span class="string">"63783299490636259666498587618221225225512486764533"</span>,</span><br><span class="line"><span class="string">"67720186971698544312419572409913959008952310058822"</span>,</span><br><span class="line"><span class="string">"95548255300263520781532296796249481641953868218774"</span>,</span><br><span class="line"><span class="string">"76085327132285723110424803456124867697064507995236"</span>,</span><br><span class="line"><span class="string">"37774242535411291684276865538926205024910326572967"</span>,</span><br><span class="line"><span class="string">"23701913275725675285653248258265463092207058596522"</span>,</span><br><span class="line"><span class="string">"29798860272258331913126375147341994889534765745501"</span>,</span><br><span class="line"><span class="string">"18495701454879288984856827726077713721403798879715"</span>,</span><br><span class="line"><span class="string">"38298203783031473527721580348144513491373226651381"</span>,</span><br><span class="line"><span class="string">"34829543829199918180278916522431027392251122869539"</span>,</span><br><span class="line"><span class="string">"40957953066405232632538044100059654939159879593635"</span>,</span><br><span class="line"><span class="string">"29746152185502371307642255121183693803580388584903"</span>,</span><br><span class="line"><span class="string">"41698116222072977186158236678424689157993532961922"</span>,</span><br><span class="line"><span class="string">"62467957194401269043877107275048102390895523597457"</span>,</span><br><span class="line"><span class="string">"23189706772547915061505504953922979530901129967519"</span>,</span><br><span class="line"><span class="string">"86188088225875314529584099251203829009407770775672"</span>,</span><br><span class="line"><span class="string">"11306739708304724483816533873502340845647058077308"</span>,</span><br><span class="line"><span class="string">"82959174767140363198008187129011875491310547126581"</span>,</span><br><span class="line"><span class="string">"97623331044818386269515456334926366572897563400500"</span>,</span><br><span class="line"><span class="string">"42846280183517070527831839425882145521227251250327"</span>,</span><br><span class="line"><span class="string">"55121603546981200581762165212827652751691296897789"</span>,</span><br><span class="line"><span class="string">"32238195734329339946437501907836945765883352399886"</span>,</span><br><span class="line"><span class="string">"75506164965184775180738168837861091527357929701337"</span>,</span><br><span class="line"><span class="string">"62177842752192623401942399639168044983993173312731"</span>,</span><br><span class="line"><span class="string">"32924185707147349566916674687634660915035914677504"</span>,</span><br><span class="line"><span class="string">"99518671430235219628894890102423325116913619626622"</span>,</span><br><span class="line"><span class="string">"73267460800591547471830798392868535206946944540724"</span>,</span><br><span class="line"><span class="string">"76841822524674417161514036427982273348055556214818"</span>,</span><br><span class="line"><span class="string">"97142617910342598647204516893989422179826088076852"</span>,</span><br><span class="line"><span class="string">"87783646182799346313767754307809363333018982642090"</span>,</span><br><span class="line"><span class="string">"10848802521674670883215120185883543223812876952786"</span>,</span><br><span class="line"><span class="string">"71329612474782464538636993009049310363619763878039"</span>,</span><br><span class="line"><span class="string">"62184073572399794223406235393808339651327408011116"</span>,</span><br><span class="line"><span class="string">"66627891981488087797941876876144230030984490851411"</span>,</span><br><span class="line"><span class="string">"60661826293682836764744779239180335110989069790714"</span>,</span><br><span class="line"><span class="string">"85786944089552990653640447425576083659976645795096"</span>,</span><br><span class="line"><span class="string">"66024396409905389607120198219976047599490197230297"</span>,</span><br><span class="line"><span class="string">"64913982680032973156037120041377903785566085089252"</span>,</span><br><span class="line"><span class="string">"16730939319872750275468906903707539413042652315011"</span>,</span><br><span class="line"><span class="string">"94809377245048795150954100921645863754710598436791"</span>,</span><br><span class="line"><span class="string">"78639167021187492431995700641917969777599028300699"</span>,</span><br><span class="line"><span class="string">"15368713711936614952811305876380278410754449733078"</span>,</span><br><span class="line"><span class="string">"40789923115535562561142322423255033685442488917353"</span>,</span><br><span class="line"><span class="string">"44889911501440648020369068063960672322193204149535"</span>,</span><br><span class="line"><span class="string">"41503128880339536053299340368006977710650566631954"</span>,</span><br><span class="line"><span class="string">"81234880673210146739058568557934581403627822703280"</span>,</span><br><span class="line"><span class="string">"82616570773948327592232845941706525094512325230608"</span>,</span><br><span class="line"><span class="string">"22918802058777319719839450180888072429661980811197"</span>,</span><br><span class="line"><span class="string">"77158542502016545090413245809786882778948721859617"</span>,</span><br><span class="line"><span class="string">"72107838435069186155435662884062257473692284509516"</span>,</span><br><span class="line"><span class="string">"20849603980134001723930671666823555245252804609722"</span>,</span><br><span class="line"><span class="string">"53503534226472524250874054075591789781264330331690"</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">s =</span><br><span class="line">  <span class="number">37107287533902102798797998220837590246510135740250</span> +</span><br><span class="line">  <span class="number">46376937677490009712648124896970078050417018260538</span> +</span><br><span class="line">  <span class="number">74324986199524741059474233309513058123726617309629</span> +</span><br><span class="line">  <span class="number">91942213363574161572522430563301811072406154908250</span> +</span><br><span class="line">  <span class="number">23067588207539346171171980310421047513778063246676</span> +</span><br><span class="line">  <span class="number">89261670696623633820136378418383684178734361726757</span> +</span><br><span class="line">  <span class="number">28112879812849979408065481931592621691275889832738</span> +</span><br><span class="line">  <span class="number">44274228917432520321923589422876796487670272189318</span> +</span><br><span class="line">  <span class="number">47451445736001306439091167216856844588711603153276</span> +</span><br><span class="line">  <span class="number">70386486105843025439939619828917593665686757934951</span> +</span><br><span class="line">  <span class="number">62176457141856560629502157223196586755079324193331</span> +</span><br><span class="line">  <span class="number">64906352462741904929101432445813822663347944758178</span> +</span><br><span class="line">  <span class="number">92575867718337217661963751590579239728245598838407</span> +</span><br><span class="line">  <span class="number">58203565325359399008402633568948830189458628227828</span> +</span><br><span class="line">  <span class="number">80181199384826282014278194139940567587151170094390</span> +</span><br><span class="line">  <span class="number">35398664372827112653829987240784473053190104293586</span> +</span><br><span class="line">  <span class="number">86515506006295864861532075273371959191420517255829</span> +</span><br><span class="line">  <span class="number">71693888707715466499115593487603532921714970056938</span> +</span><br><span class="line">  <span class="number">54370070576826684624621495650076471787294438377604</span> +</span><br><span class="line">  <span class="number">53282654108756828443191190634694037855217779295145</span> +</span><br><span class="line">  <span class="number">36123272525000296071075082563815656710885258350721</span> +</span><br><span class="line">  <span class="number">45876576172410976447339110607218265236877223636045</span> +</span><br><span class="line">  <span class="number">17423706905851860660448207621209813287860733969412</span> +</span><br><span class="line">  <span class="number">81142660418086830619328460811191061556940512689692</span> +</span><br><span class="line">  <span class="number">51934325451728388641918047049293215058642563049483</span> +</span><br><span class="line">  <span class="number">62467221648435076201727918039944693004732956340691</span> +</span><br><span class="line">  <span class="number">15732444386908125794514089057706229429197107928209</span> +</span><br><span class="line">  <span class="number">55037687525678773091862540744969844508330393682126</span> +</span><br><span class="line">  <span class="number">18336384825330154686196124348767681297534375946515</span> +</span><br><span class="line">  <span class="number">80386287592878490201521685554828717201219257766954</span> +</span><br><span class="line">  <span class="number">78182833757993103614740356856449095527097864797581</span> +</span><br><span class="line">  <span class="number">16726320100436897842553539920931837441497806860984</span> +</span><br><span class="line">  <span class="number">48403098129077791799088218795327364475675590848030</span> +</span><br><span class="line">  <span class="number">87086987551392711854517078544161852424320693150332</span> +</span><br><span class="line">  <span class="number">59959406895756536782107074926966537676326235447210</span> +</span><br><span class="line">  <span class="number">69793950679652694742597709739166693763042633987085</span> +</span><br><span class="line">  <span class="number">41052684708299085211399427365734116182760315001271</span> +</span><br><span class="line">  <span class="number">65378607361501080857009149939512557028198746004375</span> +</span><br><span class="line">  <span class="number">35829035317434717326932123578154982629742552737307</span> +</span><br><span class="line">  <span class="number">94953759765105305946966067683156574377167401875275</span> +</span><br><span class="line">  <span class="number">88902802571733229619176668713819931811048770190271</span> +</span><br><span class="line">  <span class="number">25267680276078003013678680992525463401061632866526</span> +</span><br><span class="line">  <span class="number">36270218540497705585629946580636237993140746255962</span> +</span><br><span class="line">  <span class="number">24074486908231174977792365466257246923322810917141</span> +</span><br><span class="line">  <span class="number">91430288197103288597806669760892938638285025333403</span> +</span><br><span class="line">  <span class="number">34413065578016127815921815005561868836468420090470</span> +</span><br><span class="line">  <span class="number">23053081172816430487623791969842487255036638784583</span> +</span><br><span class="line">  <span class="number">11487696932154902810424020138335124462181441773470</span> +</span><br><span class="line">  <span class="number">63783299490636259666498587618221225225512486764533</span> +</span><br><span class="line">  <span class="number">67720186971698544312419572409913959008952310058822</span> +</span><br><span class="line">  <span class="number">95548255300263520781532296796249481641953868218774</span> +</span><br><span class="line">  <span class="number">76085327132285723110424803456124867697064507995236</span> +</span><br><span class="line">  <span class="number">37774242535411291684276865538926205024910326572967</span> +</span><br><span class="line">  <span class="number">23701913275725675285653248258265463092207058596522</span> +</span><br><span class="line">  <span class="number">29798860272258331913126375147341994889534765745501</span> +</span><br><span class="line">  <span class="number">18495701454879288984856827726077713721403798879715</span> +</span><br><span class="line">  <span class="number">38298203783031473527721580348144513491373226651381</span> +</span><br><span class="line">  <span class="number">34829543829199918180278916522431027392251122869539</span> +</span><br><span class="line">  <span class="number">40957953066405232632538044100059654939159879593635</span> +</span><br><span class="line">  <span class="number">29746152185502371307642255121183693803580388584903</span> +</span><br><span class="line">  <span class="number">41698116222072977186158236678424689157993532961922</span> +</span><br><span class="line">  <span class="number">62467957194401269043877107275048102390895523597457</span> +</span><br><span class="line">  <span class="number">23189706772547915061505504953922979530901129967519</span> +</span><br><span class="line">  <span class="number">86188088225875314529584099251203829009407770775672</span> +</span><br><span class="line">  <span class="number">11306739708304724483816533873502340845647058077308</span> +</span><br><span class="line">  <span class="number">82959174767140363198008187129011875491310547126581</span> +</span><br><span class="line">  <span class="number">97623331044818386269515456334926366572897563400500</span> +</span><br><span class="line">  <span class="number">42846280183517070527831839425882145521227251250327</span> +</span><br><span class="line">  <span class="number">55121603546981200581762165212827652751691296897789</span> +</span><br><span class="line">  <span class="number">32238195734329339946437501907836945765883352399886</span> +</span><br><span class="line">  <span class="number">75506164965184775180738168837861091527357929701337</span> +</span><br><span class="line">  <span class="number">62177842752192623401942399639168044983993173312731</span> +</span><br><span class="line">  <span class="number">32924185707147349566916674687634660915035914677504</span> +</span><br><span class="line">  <span class="number">99518671430235219628894890102423325116913619626622</span> +</span><br><span class="line">  <span class="number">73267460800591547471830798392868535206946944540724</span> +</span><br><span class="line">  <span class="number">76841822524674417161514036427982273348055556214818</span> +</span><br><span class="line">  <span class="number">97142617910342598647204516893989422179826088076852</span> +</span><br><span class="line">  <span class="number">87783646182799346313767754307809363333018982642090</span> +</span><br><span class="line">  <span class="number">10848802521674670883215120185883543223812876952786</span> +</span><br><span class="line">  <span class="number">71329612474782464538636993009049310363619763878039</span> +</span><br><span class="line">  <span class="number">62184073572399794223406235393808339651327408011116</span> +</span><br><span class="line">  <span class="number">66627891981488087797941876876144230030984490851411</span> +</span><br><span class="line">  <span class="number">60661826293682836764744779239180335110989069790714</span> +</span><br><span class="line">  <span class="number">85786944089552990653640447425576083659976645795096</span> +</span><br><span class="line">  <span class="number">66024396409905389607120198219976047599490197230297</span> +</span><br><span class="line">  <span class="number">64913982680032973156037120041377903785566085089252</span> +</span><br><span class="line">  <span class="number">16730939319872750275468906903707539413042652315011</span> +</span><br><span class="line">  <span class="number">94809377245048795150954100921645863754710598436791</span> +</span><br><span class="line">  <span class="number">78639167021187492431995700641917969777599028300699</span> +</span><br><span class="line">  <span class="number">15368713711936614952811305876380278410754449733078</span> +</span><br><span class="line">  <span class="number">40789923115535562561142322423255033685442488917353</span> +</span><br><span class="line">  <span class="number">44889911501440648020369068063960672322193204149535</span> +</span><br><span class="line">  <span class="number">41503128880339536053299340368006977710650566631954</span> +</span><br><span class="line">  <span class="number">81234880673210146739058568557934581403627822703280</span> +</span><br><span class="line">  <span class="number">82616570773948327592232845941706525094512325230608</span> +</span><br><span class="line">  <span class="number">22918802058777319719839450180888072429661980811197</span> +</span><br><span class="line">  <span class="number">77158542502016545090413245809786882778948721859617</span> +</span><br><span class="line">  <span class="number">72107838435069186155435662884062257473692284509516</span> +</span><br><span class="line">  <span class="number">20849603980134001723930671666823555245252804609722</span> +</span><br><span class="line">  <span class="number">53503534226472524250874054075591789781264330331690</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">FromDigits</span>[<span class="keyword">Take</span>[<span class="keyword">IntegerDigits</span>[s], <span class="number">10</span>]]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;Work out the first ten digits of the sum of the fo
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-012</title>
    <link href="onlookerliu.github.io/2018/03/07/Project-Euler-012/"/>
    <id>onlookerliu.github.io/2018/03/07/Project-Euler-012/</id>
    <published>2018-03-07T07:24:10.000Z</published>
    <updated>2018-03-19T07:39:10.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><br>The sequence of triangle numbers is generated by adding<br>the natural numbers. So the 7th triangle number would be<br>$1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$. The first ten terms would be:<br></p><p>$$1, 3, 6, 10, 15, 21, 28, 36, 45, 55, …$$</p><p><br>Let us list the factors of the first seven triangle numbers:<br></p><pre><code>1:  13:  1,36:  1,2,3,610: 1,2,5,1015: 1,3,5,1521: 1,3,7,2128: 1,2,4,7,14,28</code></pre><p><br>We can see that 28 is the first triangle number to have over<br>five divisors. What is the value of the first triangle number<br>to have over five hundred divisors?<br></p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">76576500</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorize</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'fact() argument should be &gt;= 1'</span>)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> []  <span class="comment"># special case</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="comment"># iterate over all even numbers first.</span></span><br><span class="line">    <span class="keyword">while</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        res.append(<span class="number">2</span>)</span><br><span class="line">        n //= <span class="number">2</span></span><br><span class="line">    <span class="comment"># try odd numbers up to sqrt(n)</span></span><br><span class="line">    limit = math.sqrt(n + <span class="number">1</span>)</span><br><span class="line">    i = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= limit:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            res.append(i)</span><br><span class="line">            n //= i</span><br><span class="line">            limit = math.sqrt(n + i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> n != <span class="number">1</span>:</span><br><span class="line">        res.append(n)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">_triangle_cache = &#123;<span class="number">1</span>: <span class="number">1</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">triangle</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> _triangle_cache[n]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">        result = n + triangle(n - <span class="number">1</span>)</span><br><span class="line">        _triangle_cache[n] = result</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_divisors</span><span class="params">(n)</span>:</span></span><br><span class="line">    factors = sorted(factorize(n))</span><br><span class="line">    histogram = defaultdict(int)</span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> factors:</span><br><span class="line">        histogram[factor] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># number of divisors is equal to product of </span></span><br><span class="line">    <span class="comment"># incremented exponents of prime factors</span></span><br><span class="line">    <span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> reduce(mul, [exponent + <span class="number">1</span> <span class="keyword">for</span> exponent <span class="keyword">in</span> list(histogram.values())])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">triangles = (triangle(i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">100000</span>))</span><br><span class="line">divisible_triangles = (i <span class="keyword">for</span> i <span class="keyword">in</span> triangles <span class="keyword">if</span> num_divisors(i) &gt; <span class="number">500</span>)</span><br><span class="line">print(next(divisible_triangles))</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'mathn'</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span> </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">divisors</span></span></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>] <span class="keyword">if</span> <span class="keyword">self</span> == <span class="number">1</span></span><br><span class="line">    primes, powers = <span class="keyword">self</span>.prime_division.transpose </span><br><span class="line">    exponents = powers.map&#123;<span class="params">|i|</span> (<span class="number">0</span>..i).to_a&#125; </span><br><span class="line">    divisors = exponents.shift.product(*exponents).map <span class="keyword">do</span> <span class="params">|powers|</span> </span><br><span class="line">      primes.zip(powers).map&#123;<span class="params">|prime, power|</span> prime ** power&#125;.inject(<span class="symbol">:*</span>) </span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">    divisors.sort.map&#123;<span class="params">|div|</span> [div, <span class="keyword">self</span> / div]&#125; </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">triangles = Enumerator.new <span class="keyword">do</span> <span class="params">|yielder|</span></span><br><span class="line">  i = <span class="number">1</span></span><br><span class="line">  loop <span class="keyword">do</span></span><br><span class="line">    yielder.<span class="keyword">yield</span> i * (i + <span class="number">1</span>) / <span class="number">2</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts triangles.detect &#123; <span class="params">|t|</span> t.divisors.count &gt; <span class="number">500</span> &#125;</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.List (<span class="title">group</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">triangles</span> :: [<span class="type">Int</span>]</span><br><span class="line"><span class="title">triangles</span> = scanl1 (+) [<span class="number">1.</span>.]</span><br><span class="line"></span><br><span class="line"><span class="title">primes</span> :: [<span class="type">Int</span>]</span><br><span class="line"><span class="title">primes</span> = sieve [<span class="number">2.</span>.] <span class="keyword">where</span></span><br><span class="line">    sieve [] = []</span><br><span class="line">    sieve (p:xs) = p : sieve [x | x &lt;- xs, x `mod` p &gt; <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">factorize</span> :: <span class="type">Int</span> -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">factorize</span> n = primeFactors n primes <span class="keyword">where</span></span><br><span class="line">    primeFactors <span class="number">1</span> _ = []</span><br><span class="line">    primeFactors _ [] = []</span><br><span class="line">    primeFactors m (p:ps) | m &lt; p * p = [m]</span><br><span class="line">                          | r == <span class="number">0</span> = p : primeFactors q (p:ps)</span><br><span class="line">                          | otherwise = primeFactors m ps</span><br><span class="line">                          <span class="keyword">where</span> (q, r) = quotRem m p</span><br><span class="line"></span><br><span class="line"><span class="title">primePowers</span> :: <span class="type">Int</span> -&gt; [(<span class="type">Int</span>, <span class="type">Int</span>)]</span><br><span class="line"><span class="title">primePowers</span> n = [(head x, length x) | x &lt;- group $ factorize n]</span><br><span class="line"></span><br><span class="line"><span class="title">numDivisors</span> :: <span class="type">Int</span> -&gt;  <span class="type">Int</span></span><br><span class="line"><span class="title">numDivisors</span> n = product [k + <span class="number">1</span> | (_, k) &lt;- primePowers n]</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ head $ dropWhile (\n -&gt; numDivisors n &lt;= <span class="number">500</span>) triangles</span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure </span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> divisor? [b n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">rem</span></span> n b) <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> triangle-number [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">cond</span></span> </span><br><span class="line">    (<span class="name"><span class="builtin-name">&lt;</span></span> n <span class="number">1</span>) <span class="literal">nil</span></span><br><span class="line">    (<span class="name"><span class="builtin-name">=</span></span> n <span class="number">1</span>) <span class="number">1</span></span><br><span class="line">    <span class="symbol">:else</span> (<span class="name"><span class="builtin-name">+</span></span> n (<span class="name">triangle-number</span> (<span class="name"><span class="builtin-name">dec</span></span> n)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> divisors [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">cons</span></span> n (<span class="name"><span class="builtin-name">filter</span></span> #(<span class="name">divisor?</span> % n) (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> (<span class="name"><span class="builtin-name">inc</span></span> (/ n <span class="number">2</span>))))))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> num-divisors [n])</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">def</span></span> triangle-numbers (<span class="name"><span class="builtin-name">map</span></span> triangle-number (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> <span class="number">1000</span>)))</span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">first</span></span> (<span class="name"><span class="builtin-name">filter</span></span> #(<span class="name"><span class="builtin-name">&gt;</span></span> (<span class="name">num-divisors</span> %) <span class="number">500</span>) triangle-numbers)))</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p012</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p012().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Computers are fast, so we can implement this solution directly without any clever math.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> triangle = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; ; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (Integer.MAX_VALUE - triangle &lt; i)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException(<span class="string">"Overflow"</span>);</span><br><span class="line">triangle += i;  <span class="comment">// This is the ith triangle number, i.e. num = 1 + 2 + ... + i = i * (i + 1) / 2</span></span><br><span class="line"><span class="keyword">if</span> (countDivisors(triangle) &gt; <span class="number">500</span>)</span><br><span class="line"><span class="keyword">return</span> Integer.toString(triangle);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the number of integers in the range [1, n] that divide n.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">countDivisors</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> end = Library.sqrt(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; end; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">count += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (end * end == n)  <span class="comment">// Perfect square</span></span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* We do a straightforward search with some help from built-in functions. *)</span></span><br><span class="line">TriangleNumber[n_] = <span class="keyword">Sum</span>[i, &#123;i, n&#125;];</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">While</span>[<span class="keyword">DivisorSigma</span>[<span class="number">0</span>, TriangleNumber[i]] &lt;= <span class="number">500</span>, i++]</span><br><span class="line">TriangleNumber[i]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;&lt;br&gt;The sequence of triangle numbers is generated 
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 007</title>
    <link href="onlookerliu.github.io/2018/03/06/LeetCode-Notes-007/"/>
    <id>onlookerliu.github.io/2018/03/06/LeetCode-Notes-007/</id>
    <published>2018-03-06T15:17:05.000Z</published>
    <updated>2018-03-06T15:24:04.066Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Best-Time-to-Buy-and-Sell-Stock-II"><a href="#Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="Best Time to Buy and Sell Stock II"></a>Best Time to Buy and Sell Stock II</h3><p>Say you have an array for which the i-th element is the price of a given stock on day i.</p><p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; prices</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">  prices.push(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = prices.length;</span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> begin;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">      begin = prices[i];</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (prices[i] &gt;= prices[i - <span class="number">1</span>])</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    sum += (prices[i - <span class="number">1</span>] - begin);</span><br><span class="line">    begin = prices[i];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; prices</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!prices.length)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> buy = []</span><br><span class="line">    , sell = [];</span><br><span class="line"></span><br><span class="line">  prices.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!index) &#123;</span><br><span class="line">      buy[index] = -item;</span><br><span class="line">      sell[index] = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      buy[index] = <span class="built_in">Math</span>.max(buy[index - <span class="number">1</span>], sell[index - <span class="number">1</span>] - item);</span><br><span class="line">      sell[index] = <span class="built_in">Math</span>.max(sell[index - <span class="number">1</span>], buy[index - <span class="number">1</span>] + item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = prices.length;</span><br><span class="line">  <span class="keyword">return</span> sell[len - <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Best-Time-to-Buy-and-Sell-Stock-III"><a href="#Best-Time-to-Buy-and-Sell-Stock-III" class="headerlink" title="Best Time to Buy and Sell Stock III"></a>Best Time to Buy and Sell Stock III</h3><p>Say you have an array for which the i-th element is the price of a given stock on day i.</p><p>Design an algorithm to find the maximum profit. You may complete at most two transactions.</p><p><strong>Note:</strong></p><p>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; prices</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = prices.length</span><br><span class="line">    , sell = []</span><br><span class="line">    , buy = []</span><br><span class="line">    , item</span><br><span class="line">    , i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!len)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    sell[i] = [],</span><br><span class="line">    buy[i] = [],</span><br><span class="line">    item = prices[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!i) &#123;</span><br><span class="line">      sell[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">      sell[i][<span class="number">1</span>]= <span class="number">0</span>;</span><br><span class="line">      sell[i][<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">      buy[i][<span class="number">0</span>] = -item;</span><br><span class="line">      buy[i][<span class="number">1</span>] = -item;</span><br><span class="line">      buy[i][<span class="number">2</span>] = -item;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sell[i][<span class="number">0</span>] = sell[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">      sell[i][<span class="number">1</span>] = <span class="built_in">Math</span>.max(sell[i - <span class="number">1</span>][<span class="number">1</span>], buy[i - <span class="number">1</span>][<span class="number">1</span>] + item);</span><br><span class="line">      sell[i][<span class="number">2</span>] = <span class="built_in">Math</span>.max(sell[i - <span class="number">1</span>][<span class="number">2</span>], buy[i - <span class="number">1</span>][<span class="number">2</span>] + item);</span><br><span class="line">      buy[i][<span class="number">0</span>] = buy[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">      buy[i][<span class="number">1</span>] = <span class="built_in">Math</span>.max(buy[i - <span class="number">1</span>][<span class="number">1</span>], sell[i - <span class="number">1</span>][<span class="number">0</span>] - item);</span><br><span class="line">      buy[i][<span class="number">2</span>] = <span class="built_in">Math</span>.max(buy[i - <span class="number">1</span>][<span class="number">2</span>], sell[i - <span class="number">1</span>][<span class="number">1</span>] - item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sell[len - <span class="number">1</span>][<span class="number">2</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Best-Time-to-Buy-and-Sell-Stock-with-Cooldown"><a href="#Best-Time-to-Buy-and-Sell-Stock-with-Cooldown" class="headerlink" title="Best Time to Buy and Sell Stock with Cooldown"></a>Best Time to Buy and Sell Stock with Cooldown</h3><p>Say you have an array for which the ith element is the price of a given stock on day i.</p><p>Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:</p><ol><li>You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).</li><li>After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)</li></ol><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">prices = [1, 2, 3, 0, 2]</span><br><span class="line">maxProfit = 3</span><br><span class="line">transactions = [buy, sell, cooldown, buy, sell]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; prices</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = prices.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (len === <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> sell = []</span><br><span class="line">    , buy = []</span><br><span class="line">    , rest = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = prices[i];</span><br><span class="line">    <span class="keyword">if</span> (!i) &#123;</span><br><span class="line">      sell[i] = <span class="number">0</span>;</span><br><span class="line">      buy[i] = -item;</span><br><span class="line">      rest[i] = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sell[i] = <span class="built_in">Math</span>.max(sell[i - <span class="number">1</span>], buy[i - <span class="number">1</span>] + item);</span><br><span class="line">      buy[i] = <span class="built_in">Math</span>.max(buy[i - <span class="number">1</span>], rest[i - <span class="number">1</span>] - item);</span><br><span class="line">      rest[i] = <span class="built_in">Math</span>.max(rest[i - <span class="number">1</span>], sell[i - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(sell[len - <span class="number">1</span>], buy[len - <span class="number">1</span>], rest[len - <span class="number">1</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Best-Time-to-Buy-and-Sell-Stock-II&quot;&gt;&lt;a href=&quot;#Best-Time-to-Buy-and-Sell-Stock-II&quot; class=&quot;headerlink&quot; title=&quot;Best Time to Buy and Sel
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-011</title>
    <link href="onlookerliu.github.io/2018/03/05/Project-Euler-011/"/>
    <id>onlookerliu.github.io/2018/03/05/Project-Euler-011/</id>
    <published>2018-03-05T08:24:00.000Z</published>
    <updated>2018-03-06T08:29:01.876Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><br>In the 20x20 grid below, four numbers along a diagonal line<br>have been marked in red.<br></p><pre><code>08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 0849 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 0081 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 6552 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 9122 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 8024 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 5032 98 81 28 64 23 67 10 <span style="color:#ff0000;">26</span> 38 40 67 59 54 70 66 18 38 64 7067 26 20 68 02 62 12 20 95 <span style="color:#ff0000;">63</span> 94 39 63 08 40 91 66 49 94 2124 55 58 05 66 73 99 26 97 17 <span style="color:#ff0000;">78</span> 78 96 83 14 88 34 89 63 7221 36 23 09 75 00 76 44 20 45 35 <span style="color:#ff0000;">14</span> 00 61 33 97 34 31 33 9578 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 9216 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 5786 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 5819 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 4004 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 6688 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 6904 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 3620 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 1620 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 5401 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48</code></pre><p><br>The product of these numbers is $26 \times 63 \times 78 \times 14 = 1788696$.<br></p><p><br>What is the greatest product of four adjacent numbers in any<br>direction (up, down, left, right, or diagonally) in the 20x20 grid?<br></p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">70600674</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">grid = []</span><br><span class="line">grid_string = <span class="string">'''</span></span><br><span class="line"><span class="string">08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08</span></span><br><span class="line"><span class="string">49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00</span></span><br><span class="line"><span class="string">81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65</span></span><br><span class="line"><span class="string">52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91</span></span><br><span class="line"><span class="string">22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80</span></span><br><span class="line"><span class="string">24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50</span></span><br><span class="line"><span class="string">32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70</span></span><br><span class="line"><span class="string">67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21</span></span><br><span class="line"><span class="string">24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72</span></span><br><span class="line"><span class="string">21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95</span></span><br><span class="line"><span class="string">78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92</span></span><br><span class="line"><span class="string">16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57</span></span><br><span class="line"><span class="string">86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58</span></span><br><span class="line"><span class="string">19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40</span></span><br><span class="line"><span class="string">04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66</span></span><br><span class="line"><span class="string">88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69</span></span><br><span class="line"><span class="string">04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36</span></span><br><span class="line"><span class="string">20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16</span></span><br><span class="line"><span class="string">20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54</span></span><br><span class="line"><span class="string">01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48</span></span><br><span class="line"><span class="string">'''</span>.strip()</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> grid_string.splitlines():</span><br><span class="line">    grid.append([int(number) <span class="keyword">for</span> number <span class="keyword">in</span> line.split()])</span><br><span class="line"></span><br><span class="line">greatest_product = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> y, row <span class="keyword">in</span> enumerate(grid):</span><br><span class="line">    <span class="keyword">for</span> x, col <span class="keyword">in</span> enumerate(row):</span><br><span class="line">        <span class="keyword">for</span> x_dir <span class="keyword">in</span> range(<span class="number">-1</span>, <span class="number">2</span>):</span><br><span class="line">            <span class="keyword">for</span> y_dir <span class="keyword">in</span> range(<span class="number">-1</span>, <span class="number">2</span>):</span><br><span class="line">                <span class="keyword">if</span> x_dir == <span class="number">0</span> <span class="keyword">and</span> y_dir == <span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">                product = <span class="number">1</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">                    x_pos = x + (i * x_dir)</span><br><span class="line">                    y_pos = y + (i * y_dir)</span><br><span class="line">                    <span class="keyword">if</span> (x_pos &lt; <span class="number">0</span> <span class="keyword">or</span> y_pos &lt; <span class="number">0</span>): <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">elif</span> (y_pos &gt;= len(grid) <span class="keyword">or</span> x_pos &gt;= len(row)): <span class="keyword">break</span></span><br><span class="line">                    product *= grid[y_pos][x_pos]</span><br><span class="line">                <span class="keyword">if</span> product &gt; greatest_product:</span><br><span class="line">                    greatest_product = product</span><br><span class="line"></span><br><span class="line">print(greatest_product)</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">grid_string = <span class="string">&lt;&lt;EOS</span></span><br><span class="line"><span class="string">08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08</span></span><br><span class="line"><span class="string">49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00</span></span><br><span class="line"><span class="string">81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65</span></span><br><span class="line"><span class="string">52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91</span></span><br><span class="line"><span class="string">22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80</span></span><br><span class="line"><span class="string">24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50</span></span><br><span class="line"><span class="string">32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70</span></span><br><span class="line"><span class="string">67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21</span></span><br><span class="line"><span class="string">24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72</span></span><br><span class="line"><span class="string">21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95</span></span><br><span class="line"><span class="string">78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92</span></span><br><span class="line"><span class="string">16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57</span></span><br><span class="line"><span class="string">86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58</span></span><br><span class="line"><span class="string">19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40</span></span><br><span class="line"><span class="string">04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66</span></span><br><span class="line"><span class="string">88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69</span></span><br><span class="line"><span class="string">04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36</span></span><br><span class="line"><span class="string">20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16</span></span><br><span class="line"><span class="string">20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54</span></span><br><span class="line"><span class="string">01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48</span></span><br><span class="line"><span class="string">EOS</span></span><br><span class="line"></span><br><span class="line">grid = []</span><br><span class="line">grid_string.each_line <span class="keyword">do</span> <span class="params">|line|</span></span><br><span class="line">  grid.push line.split</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">directions = []</span><br><span class="line">(-<span class="number">1</span>..<span class="number">1</span>).each <span class="keyword">do</span> <span class="params">|x|</span></span><br><span class="line">  (-<span class="number">1</span>..<span class="number">1</span>).each <span class="keyword">do</span> <span class="params">|y|</span></span><br><span class="line">    directions.push([x, y]) <span class="keyword">unless</span> x == <span class="number">0</span> &amp;&amp; y == <span class="number">0</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">max = <span class="number">0</span></span><br><span class="line">grid.each_with_index <span class="keyword">do</span> <span class="params">|row, y|</span></span><br><span class="line">  row.each_with_index <span class="keyword">do</span> <span class="params">|cell, x|</span></span><br><span class="line">    directions.each <span class="keyword">do</span> <span class="params">|x_dir, y_dir|</span></span><br><span class="line">      product = <span class="number">1</span></span><br><span class="line">      <span class="number">4</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">        x_pos = x + i * x_dir</span><br><span class="line">        y_pos = y + i * y_dir</span><br><span class="line">        <span class="keyword">unless</span> (x_pos &lt; <span class="number">0</span> <span class="params">||</span> x_pos &gt;= row.length) <span class="params">||</span> (y_pos &lt; <span class="number">0</span> <span class="params">||</span> y_pos &gt;= grid.length)</span><br><span class="line">          product *= grid[y_pos][x_pos].to_i</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">if</span> product &gt; max</span><br><span class="line">        max = product</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts max</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.List (<span class="title">tails</span>, <span class="title">transpose</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">parse</span> :: <span class="type">String</span> -&gt; [[<span class="type">Int</span>]]</span><br><span class="line"><span class="title">parse</span> = map (map read . words) . lines</span><br><span class="line"></span><br><span class="line"><span class="title">chunks</span> :: <span class="type">Int</span> -&gt; [a] -&gt; [[a]]</span><br><span class="line"><span class="title">chunks</span> n l | length chunk &lt; n = []</span><br><span class="line">           | otherwise = chunk : chunks n (tail l)</span><br><span class="line">           <span class="keyword">where</span> chunk = take n l</span><br><span class="line"></span><br><span class="line"><span class="title">horizontal</span> :: [[<span class="type">Int</span>]] -&gt; [[<span class="type">Int</span>]]</span><br><span class="line"><span class="title">horizontal</span> = concatMap (chunks <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">vertical</span> :: [[<span class="type">Int</span>]] -&gt; [[<span class="type">Int</span>]]</span><br><span class="line"><span class="title">vertical</span> = horizontal . transpose</span><br><span class="line"></span><br><span class="line"><span class="title">diagonal</span> :: [[<span class="type">Int</span>]] -&gt; [[<span class="type">Int</span>]]</span><br><span class="line"><span class="title">diagonal</span> = vertical . zipWith drop [<span class="number">0.</span>.]</span><br><span class="line"></span><br><span class="line"><span class="title">southEast</span> :: [[<span class="type">Int</span>]] -&gt; [[<span class="type">Int</span>]]</span><br><span class="line"><span class="title">southEast</span> = concatMap diagonal . tails</span><br><span class="line"></span><br><span class="line"><span class="title">southWest</span> :: [[<span class="type">Int</span>]] -&gt; [[<span class="type">Int</span>]]</span><br><span class="line"><span class="title">southWest</span> = southEast . map reverse</span><br><span class="line"></span><br><span class="line"><span class="title">largestProduct</span> :: [[<span class="type">Int</span>]] -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">largestProduct</span> = maximum . map product</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">        str &lt;- readFile <span class="string">"/home/zach/code/euler/011/grid.txt"</span></span><br><span class="line">        <span class="keyword">let</span> grid = parse str</span><br><span class="line">        print $ largestProduct $ concatMap ($grid) [horizontal, vertical, southEast, southWest]</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">square = &#123;</span><br><span class="line">  &#123;08,02,22,97,38,15,00,40,00,75,04,05,07,78,52,12,50,77,91,08&#125;,</span><br><span class="line">  &#123;49,49,99,40,17,81,18,57,60,87,17,40,98,43,69,48,04,56,62,00&#125;,</span><br><span class="line">  &#123;81,49,31,73,55,79,14,29,93,71,40,67,53,88,30,03,49,13,36,65&#125;,</span><br><span class="line">  &#123;52,70,95,23,04,60,11,42,69,24,68,56,01,32,56,71,37,02,36,91&#125;,</span><br><span class="line">  &#123;22,31,16,71,51,67,63,89,41,92,36,54,22,40,40,28,66,33,13,80&#125;,</span><br><span class="line">  &#123;24,47,32,60,99,03,45,02,44,75,33,53,78,36,84,20,35,17,12,50&#125;,</span><br><span class="line">  &#123;32,98,81,28,64,23,67,10,26,38,40,67,59,54,70,66,18,38,64,70&#125;,</span><br><span class="line">  &#123;67,26,20,68,02,62,12,20,95,63,94,39,63,08,40,91,66,49,94,21&#125;,</span><br><span class="line">  &#123;24,55,58,05,66,73,99,26,97,17,78,78,96,83,14,88,34,89,63,72&#125;,</span><br><span class="line">  &#123;21,36,23,09,75,00,76,44,20,45,35,14,00,61,33,97,34,31,33,95&#125;,</span><br><span class="line">  &#123;78,17,53,28,22,75,31,67,15,94,03,80,04,62,16,14,09,53,56,92&#125;,</span><br><span class="line">  &#123;16,39,05,42,96,35,31,47,55,58,88,24,00,17,54,24,36,29,85,57&#125;,</span><br><span class="line">  &#123;86,56,00,48,35,71,89,07,05,44,44,37,44,60,21,58,51,54,17,58&#125;,</span><br><span class="line">  &#123;19,80,81,68,05,94,47,69,28,73,92,13,86,52,17,77,04,89,55,40&#125;,</span><br><span class="line">  &#123;04,52,08,83,97,35,99,16,07,97,57,32,16,26,26,79,33,27,98,66&#125;,</span><br><span class="line">  &#123;88,36,68,87,57,62,20,72,03,46,33,67,46,55,12,32,63,93,53,69&#125;,</span><br><span class="line">  &#123;04,42,16,73,38,25,39,11,24,94,72,18,08,46,29,32,40,62,76,36&#125;,</span><br><span class="line">  &#123;20,69,36,41,72,30,23,88,34,62,99,69,82,67,59,85,74,04,36,16&#125;,</span><br><span class="line">  &#123;20,73,35,29,78,31,90,01,74,31,49,71,48,86,81,16,23,57,05,54&#125;,</span><br><span class="line">  &#123;01,70,54,71,83,51,54,69,16,92,33,48,61,43,52,01,89,19,67,48&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">InBounds[x_, y_] := y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= <span class="keyword">Length</span>[square] &amp;&amp; x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= <span class="keyword">Length</span>[square[[y]]]</span><br><span class="line">LineProduct[dx_, dy_, n_] := <span class="keyword">If</span>[InBounds[x + (n - <span class="number">1</span>) * dx, y + (n - <span class="number">1</span>) * dy],</span><br><span class="line">  <span class="keyword">Product</span>[square[[y + i * dy, x + i * dx]], &#123;i, 0, n - 1&#125;], <span class="number">-1</span>]</span><br><span class="line">AllLineProducts[dx_, dy_, n_] := <span class="keyword">Flatten</span>[<span class="keyword">Table</span>[LineProduct[dx, dy, n], &#123;y, 1, Length[square]&#125;, &#123;x, 1, Length[square[[y]]]&#125;]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Max</span>[</span><br><span class="line">  AllLineProducts[<span class="number">1</span>,  <span class="number">0</span>, <span class="number">4</span>],</span><br><span class="line">  AllLineProducts[<span class="number">0</span>,  <span class="number">1</span>, <span class="number">4</span>],</span><br><span class="line">  AllLineProducts[<span class="number">1</span>,  <span class="number">1</span>, <span class="number">4</span>],</span><br><span class="line">  AllLineProducts[<span class="number">1</span>, <span class="number">-1</span>, <span class="number">4</span>]]</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p011</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p011().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We visit each grid cell and compute the product in the 4 directions starting from that cell.</span></span><br><span class="line"><span class="comment"> * Note that the maximum product is 99^4 = 96059601, which fits in a Java int type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONSECUTIVE = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> max = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; SQUARE.length; y++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; SQUARE[y].length; x++) &#123;</span><br><span class="line">max = Math.max(product(x, y, <span class="number">1</span>,  <span class="number">0</span>, CONSECUTIVE), max);</span><br><span class="line">max = Math.max(product(x, y, <span class="number">0</span>,  <span class="number">1</span>, CONSECUTIVE), max);</span><br><span class="line">max = Math.max(product(x, y, <span class="number">1</span>,  <span class="number">1</span>, CONSECUTIVE), max);</span><br><span class="line">max = Math.max(product(x, y, <span class="number">1</span>, -<span class="number">1</span>, CONSECUTIVE), max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">product</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="comment">// First endpoint is assumed to be in bounds. Check if second endpoint is in bounds.</span></span><br><span class="line"><span class="keyword">if</span> (!isInBounds(x + (n - <span class="number">1</span>) * dx, y + (n - <span class="number">1</span>) * dy))</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> prod = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++, x += dx, y += dy)</span><br><span class="line">prod *= SQUARE[y][x];</span><br><span class="line"><span class="keyword">return</span> prod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isInBounds</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> &lt;= y &amp;&amp; y &lt; SQUARE.length &amp;&amp; <span class="number">0</span> &lt;= x &amp;&amp; x &lt; SQUARE[y].length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] SQUARE = &#123;</span><br><span class="line">&#123; <span class="number">8</span>, <span class="number">2</span>,<span class="number">22</span>,<span class="number">97</span>,<span class="number">38</span>,<span class="number">15</span>, <span class="number">0</span>,<span class="number">40</span>, <span class="number">0</span>,<span class="number">75</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">7</span>,<span class="number">78</span>,<span class="number">52</span>,<span class="number">12</span>,<span class="number">50</span>,<span class="number">77</span>,<span class="number">91</span>, <span class="number">8</span>&#125;,</span><br><span class="line">&#123;<span class="number">49</span>,<span class="number">49</span>,<span class="number">99</span>,<span class="number">40</span>,<span class="number">17</span>,<span class="number">81</span>,<span class="number">18</span>,<span class="number">57</span>,<span class="number">60</span>,<span class="number">87</span>,<span class="number">17</span>,<span class="number">40</span>,<span class="number">98</span>,<span class="number">43</span>,<span class="number">69</span>,<span class="number">48</span>, <span class="number">4</span>,<span class="number">56</span>,<span class="number">62</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">81</span>,<span class="number">49</span>,<span class="number">31</span>,<span class="number">73</span>,<span class="number">55</span>,<span class="number">79</span>,<span class="number">14</span>,<span class="number">29</span>,<span class="number">93</span>,<span class="number">71</span>,<span class="number">40</span>,<span class="number">67</span>,<span class="number">53</span>,<span class="number">88</span>,<span class="number">30</span>, <span class="number">3</span>,<span class="number">49</span>,<span class="number">13</span>,<span class="number">36</span>,<span class="number">65</span>&#125;,</span><br><span class="line">&#123;<span class="number">52</span>,<span class="number">70</span>,<span class="number">95</span>,<span class="number">23</span>, <span class="number">4</span>,<span class="number">60</span>,<span class="number">11</span>,<span class="number">42</span>,<span class="number">69</span>,<span class="number">24</span>,<span class="number">68</span>,<span class="number">56</span>, <span class="number">1</span>,<span class="number">32</span>,<span class="number">56</span>,<span class="number">71</span>,<span class="number">37</span>, <span class="number">2</span>,<span class="number">36</span>,<span class="number">91</span>&#125;,</span><br><span class="line">&#123;<span class="number">22</span>,<span class="number">31</span>,<span class="number">16</span>,<span class="number">71</span>,<span class="number">51</span>,<span class="number">67</span>,<span class="number">63</span>,<span class="number">89</span>,<span class="number">41</span>,<span class="number">92</span>,<span class="number">36</span>,<span class="number">54</span>,<span class="number">22</span>,<span class="number">40</span>,<span class="number">40</span>,<span class="number">28</span>,<span class="number">66</span>,<span class="number">33</span>,<span class="number">13</span>,<span class="number">80</span>&#125;,</span><br><span class="line">&#123;<span class="number">24</span>,<span class="number">47</span>,<span class="number">32</span>,<span class="number">60</span>,<span class="number">99</span>, <span class="number">3</span>,<span class="number">45</span>, <span class="number">2</span>,<span class="number">44</span>,<span class="number">75</span>,<span class="number">33</span>,<span class="number">53</span>,<span class="number">78</span>,<span class="number">36</span>,<span class="number">84</span>,<span class="number">20</span>,<span class="number">35</span>,<span class="number">17</span>,<span class="number">12</span>,<span class="number">50</span>&#125;,</span><br><span class="line">&#123;<span class="number">32</span>,<span class="number">98</span>,<span class="number">81</span>,<span class="number">28</span>,<span class="number">64</span>,<span class="number">23</span>,<span class="number">67</span>,<span class="number">10</span>,<span class="number">26</span>,<span class="number">38</span>,<span class="number">40</span>,<span class="number">67</span>,<span class="number">59</span>,<span class="number">54</span>,<span class="number">70</span>,<span class="number">66</span>,<span class="number">18</span>,<span class="number">38</span>,<span class="number">64</span>,<span class="number">70</span>&#125;,</span><br><span class="line">&#123;<span class="number">67</span>,<span class="number">26</span>,<span class="number">20</span>,<span class="number">68</span>, <span class="number">2</span>,<span class="number">62</span>,<span class="number">12</span>,<span class="number">20</span>,<span class="number">95</span>,<span class="number">63</span>,<span class="number">94</span>,<span class="number">39</span>,<span class="number">63</span>, <span class="number">8</span>,<span class="number">40</span>,<span class="number">91</span>,<span class="number">66</span>,<span class="number">49</span>,<span class="number">94</span>,<span class="number">21</span>&#125;,</span><br><span class="line">&#123;<span class="number">24</span>,<span class="number">55</span>,<span class="number">58</span>, <span class="number">5</span>,<span class="number">66</span>,<span class="number">73</span>,<span class="number">99</span>,<span class="number">26</span>,<span class="number">97</span>,<span class="number">17</span>,<span class="number">78</span>,<span class="number">78</span>,<span class="number">96</span>,<span class="number">83</span>,<span class="number">14</span>,<span class="number">88</span>,<span class="number">34</span>,<span class="number">89</span>,<span class="number">63</span>,<span class="number">72</span>&#125;,</span><br><span class="line">&#123;<span class="number">21</span>,<span class="number">36</span>,<span class="number">23</span>, <span class="number">9</span>,<span class="number">75</span>, <span class="number">0</span>,<span class="number">76</span>,<span class="number">44</span>,<span class="number">20</span>,<span class="number">45</span>,<span class="number">35</span>,<span class="number">14</span>, <span class="number">0</span>,<span class="number">61</span>,<span class="number">33</span>,<span class="number">97</span>,<span class="number">34</span>,<span class="number">31</span>,<span class="number">33</span>,<span class="number">95</span>&#125;,</span><br><span class="line">&#123;<span class="number">78</span>,<span class="number">17</span>,<span class="number">53</span>,<span class="number">28</span>,<span class="number">22</span>,<span class="number">75</span>,<span class="number">31</span>,<span class="number">67</span>,<span class="number">15</span>,<span class="number">94</span>, <span class="number">3</span>,<span class="number">80</span>, <span class="number">4</span>,<span class="number">62</span>,<span class="number">16</span>,<span class="number">14</span>, <span class="number">9</span>,<span class="number">53</span>,<span class="number">56</span>,<span class="number">92</span>&#125;,</span><br><span class="line">&#123;<span class="number">16</span>,<span class="number">39</span>, <span class="number">5</span>,<span class="number">42</span>,<span class="number">96</span>,<span class="number">35</span>,<span class="number">31</span>,<span class="number">47</span>,<span class="number">55</span>,<span class="number">58</span>,<span class="number">88</span>,<span class="number">24</span>, <span class="number">0</span>,<span class="number">17</span>,<span class="number">54</span>,<span class="number">24</span>,<span class="number">36</span>,<span class="number">29</span>,<span class="number">85</span>,<span class="number">57</span>&#125;,</span><br><span class="line">&#123;<span class="number">86</span>,<span class="number">56</span>, <span class="number">0</span>,<span class="number">48</span>,<span class="number">35</span>,<span class="number">71</span>,<span class="number">89</span>, <span class="number">7</span>, <span class="number">5</span>,<span class="number">44</span>,<span class="number">44</span>,<span class="number">37</span>,<span class="number">44</span>,<span class="number">60</span>,<span class="number">21</span>,<span class="number">58</span>,<span class="number">51</span>,<span class="number">54</span>,<span class="number">17</span>,<span class="number">58</span>&#125;,</span><br><span class="line">&#123;<span class="number">19</span>,<span class="number">80</span>,<span class="number">81</span>,<span class="number">68</span>, <span class="number">5</span>,<span class="number">94</span>,<span class="number">47</span>,<span class="number">69</span>,<span class="number">28</span>,<span class="number">73</span>,<span class="number">92</span>,<span class="number">13</span>,<span class="number">86</span>,<span class="number">52</span>,<span class="number">17</span>,<span class="number">77</span>, <span class="number">4</span>,<span class="number">89</span>,<span class="number">55</span>,<span class="number">40</span>&#125;,</span><br><span class="line">&#123; <span class="number">4</span>,<span class="number">52</span>, <span class="number">8</span>,<span class="number">83</span>,<span class="number">97</span>,<span class="number">35</span>,<span class="number">99</span>,<span class="number">16</span>, <span class="number">7</span>,<span class="number">97</span>,<span class="number">57</span>,<span class="number">32</span>,<span class="number">16</span>,<span class="number">26</span>,<span class="number">26</span>,<span class="number">79</span>,<span class="number">33</span>,<span class="number">27</span>,<span class="number">98</span>,<span class="number">66</span>&#125;,</span><br><span class="line">&#123;<span class="number">88</span>,<span class="number">36</span>,<span class="number">68</span>,<span class="number">87</span>,<span class="number">57</span>,<span class="number">62</span>,<span class="number">20</span>,<span class="number">72</span>, <span class="number">3</span>,<span class="number">46</span>,<span class="number">33</span>,<span class="number">67</span>,<span class="number">46</span>,<span class="number">55</span>,<span class="number">12</span>,<span class="number">32</span>,<span class="number">63</span>,<span class="number">93</span>,<span class="number">53</span>,<span class="number">69</span>&#125;,</span><br><span class="line">&#123; <span class="number">4</span>,<span class="number">42</span>,<span class="number">16</span>,<span class="number">73</span>,<span class="number">38</span>,<span class="number">25</span>,<span class="number">39</span>,<span class="number">11</span>,<span class="number">24</span>,<span class="number">94</span>,<span class="number">72</span>,<span class="number">18</span>, <span class="number">8</span>,<span class="number">46</span>,<span class="number">29</span>,<span class="number">32</span>,<span class="number">40</span>,<span class="number">62</span>,<span class="number">76</span>,<span class="number">36</span>&#125;,</span><br><span class="line">&#123;<span class="number">20</span>,<span class="number">69</span>,<span class="number">36</span>,<span class="number">41</span>,<span class="number">72</span>,<span class="number">30</span>,<span class="number">23</span>,<span class="number">88</span>,<span class="number">34</span>,<span class="number">62</span>,<span class="number">99</span>,<span class="number">69</span>,<span class="number">82</span>,<span class="number">67</span>,<span class="number">59</span>,<span class="number">85</span>,<span class="number">74</span>, <span class="number">4</span>,<span class="number">36</span>,<span class="number">16</span>&#125;,</span><br><span class="line">&#123;<span class="number">20</span>,<span class="number">73</span>,<span class="number">35</span>,<span class="number">29</span>,<span class="number">78</span>,<span class="number">31</span>,<span class="number">90</span>, <span class="number">1</span>,<span class="number">74</span>,<span class="number">31</span>,<span class="number">49</span>,<span class="number">71</span>,<span class="number">48</span>,<span class="number">86</span>,<span class="number">81</span>,<span class="number">16</span>,<span class="number">23</span>,<span class="number">57</span>, <span class="number">5</span>,<span class="number">54</span>&#125;,</span><br><span class="line">&#123; <span class="number">1</span>,<span class="number">70</span>,<span class="number">54</span>,<span class="number">71</span>,<span class="number">83</span>,<span class="number">51</span>,<span class="number">54</span>,<span class="number">69</span>,<span class="number">16</span>,<span class="number">92</span>,<span class="number">33</span>,<span class="number">48</span>,<span class="number">61</span>,<span class="number">43</span>,<span class="number">52</span>, <span class="number">1</span>,<span class="number">89</span>,<span class="number">19</span>,<span class="number">67</span>,<span class="number">48</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;&lt;br&gt;In the 20x20 grid below, four numbers along a 
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 006</title>
    <link href="onlookerliu.github.io/2018/03/04/LeetCode-Notes-006/"/>
    <id>onlookerliu.github.io/2018/03/04/LeetCode-Notes-006/</id>
    <published>2018-03-04T04:21:45.000Z</published>
    <updated>2018-03-06T04:35:43.450Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Basic-Calculator-II"><a href="#Basic-Calculator-II" class="headerlink" title="Basic Calculator II"></a>Basic Calculator II</h3><p>Implement a basic calculator to evaluate a simple expression string.</p><p>The expression string contains only non-negative integers, +, -, *, / operators and empty spaces . The integer division should truncate toward zero.</p><p>You may assume that the given expression is always valid.</p><p>Some examples:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;3+2*2&quot; = 7</span><br><span class="line">&quot; 3/2 &quot; = 1</span><br><span class="line">&quot; 3+5 / 2 &quot; = 5</span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong> Do not use the eval built-in library function.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> calculate = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  s = s.replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> numStack = [];</span><br><span class="line">  <span class="keyword">var</span> sym = <span class="string">'+'</span>;  <span class="comment">// 前一个符号，默认可为 '+'</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = s.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = s[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (~<span class="string">'+-*/'</span>.indexOf(item) || i === len - <span class="number">1</span>) &#123;</span><br><span class="line">      (i === len - <span class="number">1</span>) &amp;&amp; (num = num * <span class="number">10</span> + (+item));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (sym === <span class="string">'-'</span>)</span><br><span class="line">        numStack.push(-num);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (sym === <span class="string">'+'</span>)</span><br><span class="line">        numStack.push(+num);</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (sym === <span class="string">'*'</span>)</span><br><span class="line">        numStack.push(numStack.pop() * num);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        numStack.push(~~(numStack.pop() / num));</span><br><span class="line"></span><br><span class="line">      num = <span class="number">0</span>;</span><br><span class="line">      sym = item;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      num = num * <span class="number">10</span> + (+item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ans = <span class="number">0</span>;</span><br><span class="line">  numStack.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    ans += item;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Battleships-in-a-Board"><a href="#Battleships-in-a-Board" class="headerlink" title="Battleships in a Board"></a>Battleships in a Board</h3><p>Given an 2D board, count how many battleships are in it. The battleships are represented with <code>&#39;X&#39;</code>s, empty slots are represented with <code>&#39;.&#39;</code>s. You may assume the following rules:</p><ol><li>You receive a valid board, made of only battleships or empty slots.</li><li>Battleships can only be placed horizontally or vertically. In other words, they can only be made of the shape <code>1xN</code> (1 row, N columns) or <code>Nx1</code> (N rows, 1 column), where N can be of any size.</li><li>At least one horizontal or vertical cell separates between two battleships - there are no adjacent battleships.</li></ol><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">X..X</span><br><span class="line">...X</span><br><span class="line">...X</span><br></pre></td></tr></table></figure></p><p>In the above board there are 2 battleships.</p><p><strong>Invalid Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...X</span><br><span class="line">XXXX</span><br><span class="line">...X</span><br></pre></td></tr></table></figure></p><p>This is an invalid board that you will not receive - as battleships will always have a cell separating between them.</p><p><strong>Follow up:</strong></p><p>Could you do it in one-pass, using only <strong>O(1) extra memory</strong> and without modifying the value of the board</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;character[][]&#125; board</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countBattleships = <span class="function"><span class="keyword">function</span>(<span class="params">board</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dir = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">-1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">-1</span>, <span class="number">0</span>]];</span><br><span class="line">  <span class="keyword">const</span> m = board.length;</span><br><span class="line">  <span class="keyword">const</span> n = board[<span class="number">0</span>].length;</span><br><span class="line">  <span class="keyword">const</span> hash = [];</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    hash[i] = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (board[i][j] === <span class="string">'.'</span> || hash[i][j])</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      hash[i][j] = <span class="literal">true</span>;</span><br><span class="line">      ans++;</span><br><span class="line">      dfs(i, j);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">let</span> ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= m || ny &lt; <span class="number">0</span> || ny &gt;= n || board[nx][ny] === <span class="string">'.'</span> || hash[nx][ny])</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      hash[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">      dfs(nx, ny);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Beautiful-Arrangement"><a href="#Beautiful-Arrangement" class="headerlink" title="Beautiful Arrangement"></a>Beautiful Arrangement</h3><p>Suppose you have N integers from 1 to N. We define a beautiful arrangement as an array that is constructed by these N numbers successfully if one of the following is true for the i-th position (1 &lt;= i &lt;= N) in this array:</p><ol><li>The number at the i-th position is divisible by i.</li><li>i is divisible by the number at the i-th position.</li></ol><p>Now given N, how many beautiful arrangements can you construct?</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: </span><br><span class="line"></span><br><span class="line">The first beautiful arrangement is [1, 2]:</span><br><span class="line"></span><br><span class="line">Number at the 1st position (i=1) is 1, and 1 is divisible by i (i=1).</span><br><span class="line"></span><br><span class="line">Number at the 2nd position (i=2) is 2, and 2 is divisible by i (i=2).</span><br><span class="line"></span><br><span class="line">The second beautiful arrangement is [2, 1]:</span><br><span class="line"></span><br><span class="line">Number at the 1st position (i=1) is 2, and 2 is divisible by i (i=1).</span><br><span class="line"></span><br><span class="line">Number at the 2nd position (i=2) is 1, and i (i=2) is divisible by 1.</span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong></p><ol><li>N is a positive integer and will not exceed 15.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; N</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countArrangement = <span class="function"><span class="keyword">function</span>(<span class="params">N</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [ans, hash] = [<span class="number">0</span>, &#123;&#125;];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dfs = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index === N + <span class="number">1</span>) &#123;</span><br><span class="line">      ans++;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!hash[i] &amp;&amp; (index % i === <span class="number">0</span> || i % index === <span class="number">0</span>)) &#123;</span><br><span class="line">        hash[i] = <span class="literal">true</span>;</span><br><span class="line">        dfs(index + <span class="number">1</span>);</span><br><span class="line">        hash[i] = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  dfs(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Best-Time-to-Buy-and-Sell-Stock"><a href="#Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="Best Time to Buy and Sell Stock"></a>Best Time to Buy and Sell Stock</h3><p>Say you have an array for which the ith element is the price of a given stock on day i.</p><p>If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [7, 1, 5, 3, 6, 4]</span><br><span class="line">Output: 5</span><br><span class="line"></span><br><span class="line">max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: [7, 6, 4, 3, 1]</span><br><span class="line">Output: 0</span><br><span class="line"></span><br><span class="line">In this case, no transaction is done, i.e. max profit = 0.</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; prices</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxProfit = <span class="function"><span class="keyword">function</span>(<span class="params">prices</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = prices.length;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> minn = <span class="literal">Infinity</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    minn = <span class="built_in">Math</span>.min(minn, prices[i]);</span><br><span class="line">    ans = <span class="built_in">Math</span>.max(ans, prices[i] - minn);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Basic-Calculator-II&quot;&gt;&lt;a href=&quot;#Basic-Calculator-II&quot; class=&quot;headerlink&quot; title=&quot;Basic Calculator II&quot;&gt;&lt;/a&gt;Basic Calculator II&lt;/h3&gt;&lt;p&gt;Im
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 005</title>
    <link href="onlookerliu.github.io/2018/03/03/LeetCode-Notes-005/"/>
    <id>onlookerliu.github.io/2018/03/03/LeetCode-Notes-005/</id>
    <published>2018-03-03T04:05:41.000Z</published>
    <updated>2018-03-06T04:19:37.394Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Balanced-Binary-Tree"><a href="#Balanced-Binary-Tree" class="headerlink" title="Balanced Binary Tree"></a>Balanced Binary Tree</h3><p>Given a binary tree, determine if it is height-balanced.</p><p>For this problem, a height-balanced binary tree is defined as:</p><blockquote><p>a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p></blockquote><p><strong>Example 1:</strong></p><p>Given the following tree <code>[3,9,20,null,null,15,7]</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>Return true.</p><p><strong>Example 2:</strong></p><p>Given the following tree <code>[1,2,2,3,3,null,null,4,4]</code>:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      1</span><br><span class="line">     / \</span><br><span class="line">    2   2</span><br><span class="line">   / \</span><br><span class="line">  3   3</span><br><span class="line"> / \</span><br><span class="line">4   4</span><br></pre></td></tr></table></figure></p><p>Return false.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> a = root.left ? dfs(root.left) : <span class="number">0</span></span><br><span class="line">    , b = root.right ? dfs(root.right) : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(a - b) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    ans = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(a, b) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isBalanced = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  ans = <span class="literal">true</span>;</span><br><span class="line">  dfs(root);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Base-7"><a href="#Base-7" class="headerlink" title="Base 7"></a>Base 7</h3><p>Given an integer, return its base 7 string representation.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 100</span><br><span class="line">Output: &quot;202&quot;</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: -7</span><br><span class="line">Output: &quot;-10&quot;</span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong> The input will be in range of [-1e7, 1e7].</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convertToBase7 = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num === <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'0'</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> prefix = num &lt; <span class="number">0</span> ? <span class="string">'-'</span> : <span class="string">''</span></span><br><span class="line">    , res = []</span><br><span class="line">    , base = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">  num = <span class="built_in">Math</span>.abs(num);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (num) &#123;</span><br><span class="line">    res.push(num % base);</span><br><span class="line">    num = ~~(num / base);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> prefix + res.reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Basic-Calculator"><a href="#Basic-Calculator" class="headerlink" title="Basic Calculator"></a>Basic Calculator</h3><p>Implement a basic calculator to evaluate a simple expression string.</p><p>The expression string may contain open <code>(</code> and closing parentheses <code>)</code>, the plus + or minus sign -, non-negative integers and empty spaces .</p><p>You may assume that the given expression is always valid.</p><p>Some examples:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;1 + 1&quot; = 2</span><br><span class="line">&quot; 2-1 + 2 &quot; = 3</span><br><span class="line">&quot;(1+(4+5+2)-3)+(6+8)&quot; = 23</span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong> Do not use the eval built-in library function.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> calculate = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  s = s.replace(<span class="regexp">/\s/g</span>, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">var</span> numStack = [];</span><br><span class="line">  <span class="keyword">var</span> symStack = [];</span><br><span class="line">  <span class="keyword">var</span> len = s.length;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = s[i];</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'-+('</span>.indexOf(item) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      symStack.push(item);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (i &amp;&amp; <span class="string">'0123456789'</span>.indexOf(s[i - <span class="number">1</span>]) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        numStack.push(num);</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item === <span class="string">')'</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &amp;&amp; <span class="string">'0123456789'</span>.indexOf(s[i - <span class="number">1</span>]) !== <span class="number">-1</span>) &#123;</span><br><span class="line">        numStack.push(num);</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> _numStack = [];</span><br><span class="line">      <span class="keyword">var</span> _symStack = [];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> sym = symStack.pop();</span><br><span class="line">        <span class="keyword">if</span> (sym === <span class="string">'('</span>) &#123;</span><br><span class="line">          _numStack.unshift(numStack.pop());</span><br><span class="line">          numStack.push(help(_numStack, _symStack));</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        _numStack.unshift(numStack.pop());</span><br><span class="line">        _symStack.unshift(sym);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      num = num * <span class="number">10</span> + (+item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (s[len - <span class="number">1</span>] !== <span class="string">')'</span>)</span><br><span class="line">    numStack.push(num);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> help(numStack, symStack);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param  &#123;array&#125; numStack</span></span><br><span class="line"><span class="comment"> * @param  &#123;array&#125; symStack</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">help</span>(<span class="params">numStack, symStack</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (numStack.length !== <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sym = symStack.shift();</span><br><span class="line">    <span class="keyword">var</span> a = numStack.shift();</span><br><span class="line">    <span class="keyword">var</span> b = numStack.shift();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sym === <span class="string">'+'</span>)</span><br><span class="line">      numStack.unshift(a + b);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      numStack.unshift(a - b);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> numStack[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> calculate = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;  <span class="comment">// single number</span></span><br><span class="line">  <span class="keyword">var</span> sign = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> numStack = [];</span><br><span class="line">  <span class="keyword">var</span> symStack = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = s.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = s[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'0123456789'</span>.indexOf(item) !== <span class="number">-1</span>) &#123;</span><br><span class="line">      num = num * <span class="number">10</span> + (+item);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ans += sign * num;</span><br><span class="line">      num = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (item === <span class="string">'+'</span>)</span><br><span class="line">        sign = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (item === <span class="string">'-'</span>)</span><br><span class="line">        sign = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (item === <span class="string">'('</span>) &#123;</span><br><span class="line">        numStack.push(ans);</span><br><span class="line">        symStack.push(sign);</span><br><span class="line">        ans = <span class="number">0</span>;</span><br><span class="line">        sign = <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item === <span class="string">')'</span>) &#123;</span><br><span class="line">        ans = symStack.pop() * ans + numStack.pop();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ans += sign * num;</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Balanced-Binary-Tree&quot;&gt;&lt;a href=&quot;#Balanced-Binary-Tree&quot; class=&quot;headerlink&quot; title=&quot;Balanced Binary Tree&quot;&gt;&lt;/a&gt;Balanced Binary Tree&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 004</title>
    <link href="onlookerliu.github.io/2018/03/02/LeetCode-Notes-004/"/>
    <id>onlookerliu.github.io/2018/03/02/LeetCode-Notes-004/</id>
    <published>2018-03-02T15:00:38.000Z</published>
    <updated>2018-03-05T15:14:22.210Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Arithmetic-Slices"><a href="#Arithmetic-Slices" class="headerlink" title="Arithmetic Slices"></a>Arithmetic Slices</h3><p>A sequence of number is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.</p><p>For example, these are arithmetic sequence:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1, 3, 5, 7, 9</span><br><span class="line">7, 7, 7, 7</span><br><span class="line">3, -1, -5, -9</span><br></pre></td></tr></table></figure></p><p>The following sequence is not arithmetic.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1, 1, 2, 5, 7</span><br></pre></td></tr></table></figure></p><p>A zero-indexed array A consisting of N numbers is given. A slice of that array is any pair of integers (P, Q) such that 0 &lt;= P &lt; Q &lt; N.</p><p>A slice (P, Q) of array A is called arithmetic if the sequence:<br>A[P], A[p + 1], …, A[Q - 1], A[Q] is arithmetic. In particular, this means that P + 1 &lt; Q.</p><p>The function should return the number of arithmetic slices in the array A.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A = [1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line">return: 3, for 3 arithmetic slices in A: [1, 2, 3], [2, 3, 4] and [1, 2, 3, 4] itself.</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; A</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numberOfArithmeticSlices = <span class="function"><span class="keyword">function</span>(<span class="params">A</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = A.length;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> diff;</span><br><span class="line">    <span class="keyword">let</span> num = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (j === i + <span class="number">1</span>)</span><br><span class="line">        diff = A[j] - A[i];</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (A[j] - A[j - <span class="number">1</span>] === diff)</span><br><span class="line">        num++;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans += num - <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Arranging-Coins"><a href="#Arranging-Coins" class="headerlink" title="Arranging Coins"></a>Arranging Coins</h3><p>You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.</p><p>Given n, find the total number of full staircase rows that can be formed.</p><p>n is a non-negative integer and fits within the range of a 32-bit signed integer.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">n = 5</span><br><span class="line"></span><br><span class="line">The coins can form the following rows:</span><br><span class="line">¤</span><br><span class="line">¤ ¤</span><br><span class="line">¤ ¤</span><br><span class="line"></span><br><span class="line">Because the 3rd row is incomplete, we return 2.</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">n = 8</span><br><span class="line"></span><br><span class="line">The coins can form the following rows:</span><br><span class="line">¤</span><br><span class="line">¤ ¤</span><br><span class="line">¤ ¤ ¤</span><br><span class="line">¤ ¤</span><br><span class="line"></span><br><span class="line">Because the 4th row is incomplete, we return 3.</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> arrangeCoins = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="built_in">Math</span>.sqrt(<span class="number">1</span> + <span class="number">8</span> * n) - <span class="number">1</span>;</span><br><span class="line">  ans /= <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ~~ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Assign-Cookies"><a href="#Assign-Cookies" class="headerlink" title="Assign Cookies"></a>Assign Cookies</h3><p>Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie. Each child $i$ has a greed factor $g_i$, which is the minimum size of a cookie that the child will be content with; and each cookie $j$ has a size $s_j$. If $s_j &gt;= g_i$, we can assign the cookie $j$ to the child $i$, and the child $i$ will be content. Your goal is to maximize the number of your content children and output the maximum number.</p><p><strong>Note:</strong></p><p>You may assume the greed factor is always positive. </p><p>You cannot assign more than one cookie to one child.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,3], [1,1]</span><br><span class="line"></span><br><span class="line">Output: 1</span><br><span class="line"></span><br><span class="line">Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. </span><br><span class="line">And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.</span><br><span class="line">You need to output 1.</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2], [1,2,3]</span><br><span class="line"></span><br><span class="line">Output: 2</span><br><span class="line"></span><br><span class="line">Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. </span><br><span class="line">You have 3 cookies and their sizes are big enough to gratify all of the children, </span><br><span class="line">You need to output 2.</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; g</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findContentChildren = <span class="function"><span class="keyword">function</span>(<span class="params">g, s</span>) </span>&#123;</span><br><span class="line">  g.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a - b;&#125;);</span><br><span class="line">  s.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a - b;&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> sIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> sLen = s.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// greedy</span></span><br><span class="line">  loop:</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = g.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = g[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = sIndex; j &lt; sLen; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s[j] &gt;= item) &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        sIndex = j + <span class="number">1</span>; <span class="comment">// the index next loop should be from</span></span><br><span class="line">        <span class="keyword">if</span> (sIndex === sLen) <span class="keyword">break</span> loop;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Arithmetic-Slices&quot;&gt;&lt;a href=&quot;#Arithmetic-Slices&quot; class=&quot;headerlink&quot; title=&quot;Arithmetic Slices&quot;&gt;&lt;/a&gt;Arithmetic Slices&lt;/h3&gt;&lt;p&gt;A sequence
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 003</title>
    <link href="onlookerliu.github.io/2018/03/01/LeetCode-Notes-003/"/>
    <id>onlookerliu.github.io/2018/03/01/LeetCode-Notes-003/</id>
    <published>2018-03-01T13:35:35.000Z</published>
    <updated>2018-03-05T13:47:29.008Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Add-two-numbers"><a href="#Add-two-numbers" class="headerlink" title="Add two numbers"></a>Add two numbers</h3><p>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 0 -&gt; 8</span><br><span class="line">Explanation: 342 + 465 = 807.</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; l1</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; l2</span></span><br><span class="line"><span class="comment"> * @return &#123;ListNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> add = <span class="number">0</span></span><br><span class="line">    , ans</span><br><span class="line">    , head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(l1 || l2) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = l1 ? l1.val : <span class="number">0</span></span><br><span class="line">      , b = l2 ? l2.val : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> sum = a + b + add;</span><br><span class="line">    add = ~~(sum / <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ans)</span><br><span class="line">      ans = head = node;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      head.next = node;</span><br><span class="line">      head = node; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (l1)</span><br><span class="line">      l1 = l1.next;</span><br><span class="line">    <span class="keyword">if</span> (l2)</span><br><span class="line">      l2 = l2.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (add) &#123;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> ListNode(add);</span><br><span class="line">    head.next = node;</span><br><span class="line">    head = node;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Add-two-numbers-II"><a href="#Add-two-numbers-II" class="headerlink" title="Add two numbers II"></a>Add two numbers II</h3><p>You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p>Follow up:<br>What if you cannot modify the input lists? In other words, reversing the lists is not allowed.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: (7 -&gt; 2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">Output: 7 -&gt; 8 -&gt; 0 -&gt; 7</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; l1</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; l2</span></span><br><span class="line"><span class="comment"> * @return &#123;ListNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = []</span><br><span class="line">    , b = []</span><br><span class="line">    , newL1 = l1</span><br><span class="line">    , newL2 = l2;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (newL1) &#123;</span><br><span class="line">    a.push(newL1.val);</span><br><span class="line">    newL1 = newL1.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (newL2) &#123;</span><br><span class="line">    b.push(newL2.val);</span><br><span class="line">    newL2 = newL2.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  a.reverse();</span><br><span class="line">  b.reverse();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">let</span> add = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (a.length || b.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> c = a.length ? a.shift() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> d = b.length ? b.shift() : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = c + d + add;</span><br><span class="line"></span><br><span class="line">    ans.push(sum % <span class="number">10</span>);</span><br><span class="line">    add = ~~(sum / <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add &amp;&amp; (ans.push(add));</span><br><span class="line"></span><br><span class="line">  ans.reverse();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ret = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = ans.length; i &lt; len; i++)</span><br><span class="line">    ret[i] = <span class="keyword">new</span> ListNode(ans[i]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = ans.length; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">    ret[i].next = ret[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Additive-number"><a href="#Additive-number" class="headerlink" title="Additive number"></a>Additive number</h3><p>Additive number is a string whose digits can form additive sequence.</p><p>A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.</p><p>For example:</p><p>“112358” is an additive number because the digits can form an additive sequence: <code>1, 1, 2, 3, 5, 8.</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8</span><br></pre></td></tr></table></figure><p><code>&quot;199100199&quot;</code> is also an additive number, the additive sequence is: <code>1, 99, 100, 199.</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 + 99 = 100, 99 + 100 = 199</span><br></pre></td></tr></table></figure><p><strong>Note:</strong> Numbers in the additive sequence cannot have leading zeros, so sequence 1, 2, 03 or 1, 02, 3 is invalid.</p><p>Given a string containing only digits <code>&#39;0&#39;-&#39;9&#39;</code>, write a function to determine if it’s an additive number.</p><p><strong>Follow up:</strong></p><p>How would you handle overflow for very large input integers?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// use Depth-First-Search Algorithm</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">a, b, c, index, num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (ans)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (index === num.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a === <span class="number">-1</span> || b === <span class="number">-1</span> || c === <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> ((+a) + (+b) === (+c))</span><br><span class="line">      ans = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (a === <span class="number">-1</span>) &#123;</span><br><span class="line">    dfs(num[index], b, c, index + <span class="number">1</span>, num);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (b === <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a !== <span class="string">'0'</span>)</span><br><span class="line">      dfs(a + num[index], b, c, index + <span class="number">1</span>, num);</span><br><span class="line"></span><br><span class="line">    dfs(a, num[index], c, index + <span class="number">1</span>, num);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (c === <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (b !== <span class="string">'0'</span>)</span><br><span class="line">      dfs(a, b + num[index], c, index + <span class="number">1</span>, num);</span><br><span class="line"></span><br><span class="line">    dfs(a, b, num[index], index + <span class="number">1</span>, num);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (c !== <span class="string">'0'</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> ((+a) + (+b) === (+c)) &#123;</span><br><span class="line">      dfs(b, c, <span class="number">-1</span>, index, num);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> ((+a) + (+b) &lt; (+c))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      dfs(a, b, c + num[index], index + <span class="number">1</span>, num);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (a === <span class="string">'0'</span> &amp;&amp; b === <span class="string">'0'</span>)</span><br><span class="line">      dfs(b, c, <span class="number">-1</span>, index, num);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> isAdditiveNumber = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  ans = <span class="literal">false</span>;</span><br><span class="line">  dfs(<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">0</span>, num);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Add-two-numbers&quot;&gt;&lt;a href=&quot;#Add-two-numbers&quot; class=&quot;headerlink&quot; title=&quot;Add two numbers&quot;&gt;&lt;/a&gt;Add two numbers&lt;/h3&gt;&lt;p&gt;You are given two 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-010</title>
    <link href="onlookerliu.github.io/2018/03/01/Project-Euler-010/"/>
    <id>onlookerliu.github.io/2018/03/01/Project-Euler-010/</id>
    <published>2018-03-01T03:56:36.000Z</published>
    <updated>2018-03-05T05:39:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><br>The sum of the primes below 10 is $2 + 3 + 5 + 7 = 17$.<br></p><p><br>Find the sum of all the primes below two million.<br></p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">142913828922</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> takewhile</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eratosthenes</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''Yields the sequence of prime numbers via the Sieve of Eratosthenes.'''</span></span><br><span class="line">    D = &#123;&#125;  <span class="comment"># map composite integers to primes witnessing their compositeness</span></span><br><span class="line">    q = <span class="number">2</span>   <span class="comment"># first integer to test for primality</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> q <span class="keyword">not</span> <span class="keyword">in</span> D:</span><br><span class="line">            <span class="keyword">yield</span> q        <span class="comment"># not marked composite, must be prime</span></span><br><span class="line">            D[q*q] = [q]   <span class="comment"># first multiple of q not already marked</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> D[q]: <span class="comment"># move each witness to its next multiple</span></span><br><span class="line">                D.setdefault(p+q,[]).append(p)</span><br><span class="line">            <span class="keyword">del</span> D[q]       <span class="comment"># no longer need D[q], free memory</span></span><br><span class="line">        q += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print(sum(takewhile(<span class="keyword">lambda</span> x: x &lt; <span class="number">2000000</span>, eratosthenes())))</span><br></pre></td></tr></table></figure></p><hr><p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sieve = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> q = <span class="number">2</span>; q &lt; <span class="number">2000000</span>; q++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (sieve[q]) &#123;</span><br><span class="line">    sieve[q].forEach(<span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> list = sieve[p + q] || []</span><br><span class="line">      list.push(p)</span><br><span class="line">      sieve[p + q] = list</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">delete</span> sieve[q]</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    s += q</span><br><span class="line">    sieve[q * q] = [q]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(s)</span><br></pre></td></tr></table></figure></p><hr><p>Go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrimeSieve</span><span class="params">(n <span class="keyword">int64</span>)</span> []<span class="title">int64</span></span> &#123;</span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">int64</span>, <span class="number">0</span>, n/<span class="keyword">int64</span>(math.Log(<span class="keyword">float64</span>(n))))</span><br><span class="line">sieve := <span class="built_in">make</span>([]<span class="keyword">bool</span>, n+<span class="number">1</span>)</span><br><span class="line">sn := <span class="keyword">int64</span>(math.Sqrt(<span class="keyword">float64</span>(n)))</span><br><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">2</span>; i &lt;= sn; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> !sieve[i] &#123;</span><br><span class="line"><span class="keyword">for</span> j = i * i; j &lt;= n; j += i &#123;</span><br><span class="line">sieve[j] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">2</span>; i &lt;= n; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> !sieve[i] &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">primes := PrimeSieve(<span class="number">2000000</span>)</span><br><span class="line"><span class="keyword">var</span> sum <span class="keyword">int64</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, p := <span class="keyword">range</span> primes &#123;</span><br><span class="line">sum += p</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'mathn'</span></span><br><span class="line">puts Prime.take_while&#123; <span class="params">|n|</span> n &lt; <span class="number">2000000</span> &#125;.reduce(<span class="symbol">:+</span>)</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">primes</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">primes</span> = <span class="number">2</span> : sieve primes [<span class="number">3</span>,<span class="number">5.</span>.] <span class="keyword">where</span></span><br><span class="line">    sieve (p:ps) xs = h ++ sieve ps [x | x &lt;- t, rem x p /= <span class="number">0</span>]</span><br><span class="line">                      <span class="keyword">where</span> (h, t) = span (&lt; p*p) xs</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ sum $ takeWhile (&lt; <span class="number">2000000</span>) primes</span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> primes [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">defn</span></span> improve [p nums]</span><br><span class="line">    (<span class="name"><span class="builtin-name">filter</span></span> #(<span class="name"><span class="builtin-name">or</span></span> </span><br><span class="line">               (<span class="name"><span class="builtin-name">not</span></span> (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">rem</span></span> % p) <span class="number">0</span>))</span><br><span class="line">               (<span class="name"><span class="builtin-name">=</span></span> % p))</span><br><span class="line">            nums))</span><br><span class="line">  (<span class="name"><span class="builtin-name">defn</span></span> prime-iter [p nums i]</span><br><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&gt;</span></span> (<span class="name"><span class="builtin-name">*</span></span> p p) n)</span><br><span class="line">      nums</span><br><span class="line">      (<span class="name">prime-iter</span> (<span class="name"><span class="builtin-name">nth</span></span> nums (<span class="name"><span class="builtin-name">+</span></span> i <span class="number">1</span>)) (<span class="name">improve</span> (<span class="name"><span class="builtin-name">nth</span></span> nums (<span class="name"><span class="builtin-name">+</span></span> i <span class="number">1</span>)) nums) (<span class="name"><span class="builtin-name">+</span></span> i <span class="number">1</span>))))</span><br><span class="line">  (<span class="name">prime-iter</span> <span class="number">2</span> (<span class="name"><span class="builtin-name">range</span></span> <span class="number">2</span> (<span class="name"><span class="builtin-name">+</span></span> n <span class="number">1</span>)) <span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">reduce</span></span> + (<span class="name">primes</span> <span class="number">2000000</span>)))</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* Use Mathematica's built-in functions for easy problem-solving. *)</span></span><br><span class="line"><span class="keyword">Total</span>[<span class="keyword">Select</span>[<span class="keyword">Range</span>[<span class="number">1999999</span>], <span class="keyword">PrimeQ</span>]]</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p010</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p010().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Call the sieve of Eratosthenes and sum the primes found.</span></span><br><span class="line"><span class="comment"> * A conservative upper bound for the sum is 2000000^2, which fits in a Java long type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LIMIT = <span class="number">2000000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> p : Library.listPrimes(LIMIT - <span class="number">1</span>))</span><br><span class="line">sum += p;</span><br><span class="line"><span class="keyword">return</span> Long.toString(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;br&gt;The sum of the primes below 10 is $2 + 3 + 5 +
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-009</title>
    <link href="onlookerliu.github.io/2018/02/27/Project-Euler-009/"/>
    <id>onlookerliu.github.io/2018/02/27/Project-Euler-009/</id>
    <published>2018-02-27T03:36:39.000Z</published>
    <updated>2018-03-05T03:43:44.782Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>A Pythagorean triplet is a set of three natural numbers, $a \lt b \lt c$,<br>for which</p><p>$$a^2 + b^2 = c^2$$</p><p>For example, $3^2 + 4^2 = 9 + 16 = 25 = 5^2$.</p><p>There exists exactly one Pythagorean triplet for which $a + b + c = 1000$.<br>Find the product $a \times b \times c$.</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">31875000</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">()</span>:</span></span><br><span class="line">PERIMETER = <span class="number">1000</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">1</span>, PERIMETER + <span class="number">1</span>):</span><br><span class="line"><span class="keyword">for</span> b <span class="keyword">in</span> range(a + <span class="number">1</span>, PERIMETER + <span class="number">1</span>):</span><br><span class="line">c = PERIMETER - a - b</span><br><span class="line"><span class="keyword">if</span> a * a + b * b == c * c:</span><br><span class="line"><span class="comment"># It is now implied that b &lt; c, because we have a &gt; 0</span></span><br><span class="line"><span class="keyword">return</span> str(a * b * c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">print(compute())</span><br></pre></td></tr></table></figure></p><hr><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a = <span class="number">1</span>; a &lt; <span class="number">1000</span>; a++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> b = a, lb = <span class="number">1000</span> - a; b &lt; lb; b++) &#123;</span><br><span class="line">    <span class="keyword">const</span> c = <span class="number">1000</span> - (a + b)</span><br><span class="line">    <span class="keyword">if</span> (a * a + b * b === c * c) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">console</span>.log(a * b * c)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a, b, c, lb <span class="keyword">int</span></span><br><span class="line">max := <span class="number">1000</span></span><br><span class="line"><span class="keyword">for</span> a = <span class="number">1</span>; a &lt; max; a++ &#123;</span><br><span class="line">lb = max - a</span><br><span class="line"><span class="keyword">for</span> b = a; b &lt; lb; b++ &#123;</span><br><span class="line">c = max - (a + b)</span><br><span class="line"><span class="keyword">if</span> a*a+b*b == c*c &#123;</span><br><span class="line">fmt.Println(a * b * c)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">500</span>)</span><br><span class="line">  <span class="keyword">for</span> b <span class="keyword">in</span> (a..<span class="number">500</span>)</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> (b..<span class="number">500</span>)</span><br><span class="line">      <span class="keyword">if</span> a**<span class="number">2</span> + b**<span class="number">2</span> == c**<span class="number">2</span> <span class="keyword">and</span> a+b+c == <span class="number">1000</span></span><br><span class="line">        puts a*b*c</span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> ::  <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ head [a*b*c | a &lt;- [<span class="number">1.</span><span class="number">.500</span>], b &lt;- [a.<span class="number">.500</span>], c &lt;- [b.<span class="number">.500</span>],</span><br><span class="line">                             a+b+c == <span class="number">1000</span>, a*a + b*b == c*c]</span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> square [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">*</span></span> n n))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> triple? [a b c]</span><br><span class="line">  (<span class="name"><span class="builtin-name">and</span></span></span><br><span class="line">    (<span class="name"><span class="builtin-name">and</span></span> (<span class="name"><span class="builtin-name">&gt;</span></span> a <span class="number">0</span>) (<span class="name"><span class="builtin-name">&gt;</span></span> b <span class="number">0</span>) (<span class="name"><span class="builtin-name">&gt;</span></span> c <span class="number">0</span>))</span><br><span class="line">    (<span class="name"><span class="builtin-name">and</span></span> (<span class="name"><span class="builtin-name">&lt;</span></span> a b) (<span class="name"><span class="builtin-name">&lt;</span></span> b c))</span><br><span class="line">    (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">+</span></span> (<span class="name">square</span> a) (<span class="name">square</span> b)) (<span class="name">square</span> c))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> candidates [limit]</span><br><span class="line">  (<span class="name"><span class="builtin-name">for</span></span> [a (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> (<span class="name"><span class="builtin-name">inc</span></span> limit)) </span><br><span class="line">        b (<span class="name"><span class="builtin-name">range</span></span> a (<span class="name"><span class="builtin-name">inc</span></span> limit)) </span><br><span class="line">        c (<span class="name"><span class="builtin-name">range</span></span> b (<span class="name"><span class="builtin-name">inc</span></span> limit))</span><br><span class="line">        <span class="symbol">:when</span> (<span class="name"><span class="builtin-name">and</span></span> </span><br><span class="line">                (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">+</span></span> a b c) <span class="number">1000</span>)</span><br><span class="line">                (<span class="name">triple?</span> a b c))] </span><br><span class="line">    (<span class="name"><span class="builtin-name">list</span></span> a b c)))</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">reduce</span></span> * (<span class="name"><span class="builtin-name">first</span></span> (<span class="name">candidates</span> <span class="number">500</span>))))</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">For</span>[a = <span class="number">1</span>, a &lt;= <span class="number">1000</span>, a++,</span><br><span class="line">  <span class="keyword">For</span>[b = a + <span class="number">1</span>, b &lt;= <span class="number">1000</span>, b++,</span><br><span class="line">    <span class="keyword">Block</span>[&#123;c = 1000 - a - b&#125;,</span><br><span class="line">      <span class="keyword">If</span>[a &lt; b &lt; c &amp;&amp; a^<span class="number">2</span> + b^<span class="number">2</span> == c^<span class="number">2</span>,</span><br><span class="line">        <span class="keyword">Print</span>[a, <span class="string">" "</span>, b, <span class="string">" "</span>, c, <span class="string">" "</span>, a * b * c]]]]]</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p009</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p009().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Computers are fast, so we can implement a brute-force search to directly solve the problem.</span></span><br><span class="line"><span class="comment"> * Note that a^2 + b^2 is bounded above by 2*(1000^2), which fits in a Java int type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PERIMETER = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt; PERIMETER; a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = a + <span class="number">1</span>; b &lt; PERIMETER; b++) &#123;</span><br><span class="line"><span class="keyword">int</span> c = PERIMETER - a - b;</span><br><span class="line"><span class="keyword">if</span> (a * a + b * b == c * c) &#123;</span><br><span class="line"><span class="comment">// It is now implied that b &lt; c, because we have a &gt; 0</span></span><br><span class="line"><span class="keyword">return</span> Integer.toString(a * b * c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AssertionError(<span class="string">"Not found"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;A Pythagorean triplet is a set of three natural nu
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Simple Perceptron using Processing</title>
    <link href="onlookerliu.github.io/2018/02/26/Simple-Perceptron-using-Processing/"/>
    <id>onlookerliu.github.io/2018/02/26/Simple-Perceptron-using-Processing/</id>
    <published>2018-02-25T16:22:03.000Z</published>
    <updated>2018-02-28T16:53:54.160Z</updated>
    
    <content type="html"><![CDATA[<p>This code is mainly based on <a href="https://processing.org" target="_blank" rel="noopener">Processing</a>, a flexible software sketchbook for visualizing things and arts.</p><p>First, we derive a class named Perceptron with two useful method <code>guess</code> and <code>train</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sign</span><span class="params">(<span class="keyword">float</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Perceptron</span> </span>&#123;</span><br><span class="line">  <span class="keyword">float</span>[] weights = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">float</span> lr = <span class="number">0.2</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// constructor</span></span><br><span class="line">  Perceptron() &#123;</span><br><span class="line">    <span class="comment">// initialize the weight randomly</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; weights.length; i++) &#123;</span><br><span class="line">      weights[i] = random(-<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">guess</span><span class="params">(<span class="keyword">float</span>[] inputs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; weights.length; i++) &#123;</span><br><span class="line">      sum += inputs[i] * weights[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> output = sign(sum);</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">train</span><span class="params">(<span class="keyword">float</span>[] inputs, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> guess = guess(inputs);</span><br><span class="line">    <span class="keyword">int</span> error = target - guess;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; weights.length; i++) &#123;</span><br><span class="line">      weights[i] += error * inputs[i] * lr;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>To specify the training procession using a simple perceptron, we activate a sketchbook named Training.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">float</span> x;</span><br><span class="line">  <span class="keyword">float</span> y;</span><br><span class="line">  <span class="keyword">int</span> label;</span><br><span class="line">  </span><br><span class="line">  Point() &#123;</span><br><span class="line">    x = random(width);</span><br><span class="line">    y = random(height);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">      label = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      label = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stroke(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (label == <span class="number">1</span>) &#123;</span><br><span class="line">      fill(<span class="number">255</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fill(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ellipse(x, y, <span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Now, come to our basic purpose. Draw random samples and make trainings. Here is the main sketchbook file <code>SimplePerceptron</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Perceptron brain;</span><br><span class="line"></span><br><span class="line">Point[] points = <span class="keyword">new</span> Point[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> trainingIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  size(<span class="number">800</span>, <span class="number">800</span>);</span><br><span class="line">  brain = <span class="keyword">new</span> Perceptron();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; points.length; i++) &#123;</span><br><span class="line">    points[i] = <span class="keyword">new</span> Point();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">float</span>[] inputs = &#123;-<span class="number">1</span>, <span class="number">0.5</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> guess = brain.guess(inputs);</span><br><span class="line">  println(guess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  background(<span class="number">255</span>);</span><br><span class="line">  stroke(<span class="number">0</span>);</span><br><span class="line">  line(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">  <span class="keyword">for</span> (Point pt : points) &#123;</span><br><span class="line">    pt.show();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (Point pt : points) &#123;</span><br><span class="line">    <span class="keyword">float</span>[] inputs = &#123;pt.x, pt.y&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> target = pt.label;</span><br><span class="line">    <span class="keyword">int</span> guess = brain.guess(inputs);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (guess == target) &#123;</span><br><span class="line">      fill(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fill(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    noStroke();</span><br><span class="line">    ellipse(pt.x, pt.y, <span class="number">16</span>, <span class="number">16</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Point training = points[trainingIndex];</span><br><span class="line">  <span class="keyword">float</span>[] inputs = &#123;training.x, training.y&#125;;</span><br><span class="line">  <span class="keyword">int</span> target = training.label;</span><br><span class="line">  brain.train(inputs, target);</span><br><span class="line">  trainingIndex++;</span><br><span class="line">  <span class="keyword">if</span> (trainingIndex == points.length) &#123;</span><br><span class="line">    trainingIndex = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Simply click the run button, Processing will help start an interative interface (similar to the canvas) and render the result below.</p><div align="center"><br><img src="http://oxyywddt8.bkt.clouddn.com/processing/Perceptron.gif" width="60%"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This code is mainly based on &lt;a href=&quot;https://processing.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Processing&lt;/a&gt;, a flexible software sketchbo
      
    
    </summary>
    
    
      <category term="machine learning" scheme="onlookerliu.github.io/tags/machine-learning/"/>
    
      <category term="processing" scheme="onlookerliu.github.io/tags/processing/"/>
    
      <category term="java" scheme="onlookerliu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Linear Regression in JS</title>
    <link href="onlookerliu.github.io/2018/02/23/Linear-Regression-in-JS/"/>
    <id>onlookerliu.github.io/2018/02/23/Linear-Regression-in-JS/</id>
    <published>2018-02-23T14:51:57.000Z</published>
    <updated>2018-02-28T16:52:10.408Z</updated>
    
    <content type="html"><![CDATA[<p>This code is mainly based on the <a href="https://p5js.org/" target="_blank" rel="noopener">p5js</a> library, which provide us an accessible sketchbook to interactive with HTML objects.</p><p>In p5, we only need to make our own changes to the file named sketch.js.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    createCanvas(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">linearRegression</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xsum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> ysum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        xsum += data[i].x;</span><br><span class="line">        ysum += data[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> xmean = xsum / data.length;</span><br><span class="line">    <span class="keyword">var</span> ymean = ysum / data.length;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> den = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = data[i].x;</span><br><span class="line">        <span class="keyword">var</span> y = data[i].y;</span><br><span class="line">        num += (x - xmean) * (y - ymean);</span><br><span class="line">        den += (x - xmean) * (x - xmean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m = num / den;</span><br><span class="line">    b = ymean - m * xmean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> y1 = m * x1 + b;</span><br><span class="line">    <span class="keyword">var</span> x2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> y2 = m * x2 + b;</span><br><span class="line"></span><br><span class="line">    x1 = map(x1, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, width);</span><br><span class="line">    y1 = map(y1, <span class="number">0</span>, <span class="number">1</span>, height, <span class="number">0</span>);</span><br><span class="line">    x2 = map(x2, <span class="number">0</span>, <span class="number">0</span>, width);</span><br><span class="line">    y2 = map(y2, <span class="number">0</span>, <span class="number">1</span>, height, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    stroke(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">    line(x1, y1, x2, y2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mousePressed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = map(mouseX, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> y = map(mouseY, <span class="number">0</span>, height, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> point = createVector(x, y);</span><br><span class="line">    data.push(point);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    background(<span class="number">51</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = map(data[i].x, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, width);</span><br><span class="line">        <span class="keyword">var</span> y = map(data[i].y, <span class="number">0</span>, <span class="number">1</span>, height, <span class="number">0</span>);</span><br><span class="line">        fill(<span class="number">255</span>);</span><br><span class="line">        stroke(<span class="number">255</span>);</span><br><span class="line">        ellipse(x, y, <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        linearRegression();</span><br><span class="line">        drawLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Click on the index.html file, and we can make our regression on any browser support javascript. Here is the design sketch.</p><div align="center"><br><img src="http://oxyywddt8.bkt.clouddn.com/p5js/OLS.gif" width="60%"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This code is mainly based on the &lt;a href=&quot;https://p5js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;p5js&lt;/a&gt; library, which provide us an accessi
      
    
    </summary>
    
    
      <category term="statistics" scheme="onlookerliu.github.io/tags/statistics/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
      <category term="p5js" scheme="onlookerliu.github.io/tags/p5js/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-008</title>
    <link href="onlookerliu.github.io/2018/02/14/Project-Euler-008/"/>
    <id>onlookerliu.github.io/2018/02/14/Project-Euler-008/</id>
    <published>2018-02-14T14:16:28.000Z</published>
    <updated>2018-03-05T03:37:59.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.</p><pre><code>7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450</code></pre><p>Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23514624000</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line">numbers = <span class="string">'''</span></span><br><span class="line"><span class="string">73167176531330624919225119674426574742355349194934</span></span><br><span class="line"><span class="string">96983520312774506326239578318016984801869478851843</span></span><br><span class="line"><span class="string">85861560789112949495459501737958331952853208805511</span></span><br><span class="line"><span class="string">12540698747158523863050715693290963295227443043557</span></span><br><span class="line"><span class="string">66896648950445244523161731856403098711121722383113</span></span><br><span class="line"><span class="string">62229893423380308135336276614282806444486645238749</span></span><br><span class="line"><span class="string">30358907296290491560440772390713810515859307960866</span></span><br><span class="line"><span class="string">70172427121883998797908792274921901699720888093776</span></span><br><span class="line"><span class="string">65727333001053367881220235421809751254540594752243</span></span><br><span class="line"><span class="string">52584907711670556013604839586446706324415722155397</span></span><br><span class="line"><span class="string">53697817977846174064955149290862569321978468622482</span></span><br><span class="line"><span class="string">83972241375657056057490261407972968652414535100474</span></span><br><span class="line"><span class="string">82166370484403199890008895243450658541227588666881</span></span><br><span class="line"><span class="string">16427171479924442928230863465674813919123162824586</span></span><br><span class="line"><span class="string">17866458359124566529476545682848912883142607690042</span></span><br><span class="line"><span class="string">24219022671055626321111109370544217506941658960408</span></span><br><span class="line"><span class="string">07198403850962455444362981230987879927244284909188</span></span><br><span class="line"><span class="string">84580156166097919133875499200524063689912560717606</span></span><br><span class="line"><span class="string">05886116467109405077541002256983155200055935729725</span></span><br><span class="line"><span class="string">71636269561882670428252483600823257530420752963450</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">numstring = numbers.strip().replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">greatest_product = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(numstring)):</span><br><span class="line">    product = <span class="number">1</span></span><br><span class="line">    substring = numstring[i:i+<span class="number">13</span>]</span><br><span class="line">    <span class="keyword">for</span> digit <span class="keyword">in</span> substring:</span><br><span class="line">        product *= int(digit)</span><br><span class="line">    <span class="keyword">if</span> product &gt; greatest_product:</span><br><span class="line">        greatest_product = product</span><br><span class="line"></span><br><span class="line">print(greatest_product)</span><br></pre></td></tr></table></figure></p><hr><p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> runs = <span class="string">`</span></span><br><span class="line"><span class="string">73167176531330624919225119674426574742355349194934</span></span><br><span class="line"><span class="string">96983520312774506326239578318016984801869478851843</span></span><br><span class="line"><span class="string">85861560789112949495459501737958331952853208805511</span></span><br><span class="line"><span class="string">12540698747158523863050715693290963295227443043557</span></span><br><span class="line"><span class="string">66896648950445244523161731856403098711121722383113</span></span><br><span class="line"><span class="string">62229893423380308135336276614282806444486645238749</span></span><br><span class="line"><span class="string">30358907296290491560440772390713810515859307960866</span></span><br><span class="line"><span class="string">70172427121883998797908792274921901699720888093776</span></span><br><span class="line"><span class="string">65727333001053367881220235421809751254540594752243</span></span><br><span class="line"><span class="string">52584907711670556013604839586446706324415722155397</span></span><br><span class="line"><span class="string">53697817977846174064955149290862569321978468622482</span></span><br><span class="line"><span class="string">83972241375657056057490261407972968652414535100474</span></span><br><span class="line"><span class="string">82166370484403199890008895243450658541227588666881</span></span><br><span class="line"><span class="string">16427171479924442928230863465674813919123162824586</span></span><br><span class="line"><span class="string">17866458359124566529476545682848912883142607690042</span></span><br><span class="line"><span class="string">24219022671055626321111109370544217506941658960408</span></span><br><span class="line"><span class="string">07198403850962455444362981230987879927244284909188</span></span><br><span class="line"><span class="string">84580156166097919133875499200524063689912560717606</span></span><br><span class="line"><span class="string">05886116467109405077541002256983155200055935729725</span></span><br><span class="line"><span class="string">71636269561882670428252483600823257530420752963450</span></span><br><span class="line"><span class="string">`</span>.trim().split(<span class="string">"\n"</span>).join(<span class="string">""</span>).split(<span class="regexp">/[01]+/</span>)</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">13</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">runs.forEach(<span class="function">(<span class="params">run</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (run.length &lt; x) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = run.length; i &lt;= l - x; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> digits = run.substring(i, i + x).split(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">const</span> product = digits.reduce(<span class="function">(<span class="params">prod, c</span>) =&gt;</span> prod * <span class="built_in">parseInt</span>(c), <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (product &gt; max) max = product</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(max)</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">numbers = <span class="string">&lt;&lt;EOS</span></span><br><span class="line"><span class="string">73167176531330624919225119674426574742355349194934</span></span><br><span class="line"><span class="number">96983520312774506326239578318016984801869478851843</span></span><br><span class="line"><span class="number">85861560789112949495459501737958331952853208805511</span></span><br><span class="line"><span class="number">12540698747158523863050715693290963295227443043557</span></span><br><span class="line"><span class="number">66896648950445244523161731856403098711121722383113</span></span><br><span class="line"><span class="number">62229893423380308135336276614282806444486645238749</span></span><br><span class="line"><span class="number">30358907296290491560440772390713810515859307960866</span></span><br><span class="line"><span class="number">70172427121883998797908792274921901699720888093776</span></span><br><span class="line"><span class="number">65727333001053367881220235421809751254540594752243</span></span><br><span class="line"><span class="number">52584907711670556013604839586446706324415722155397</span></span><br><span class="line"><span class="number">53697817977846174064955149290862569321978468622482</span></span><br><span class="line"><span class="number">83972241375657056057490261407972968652414535100474</span></span><br><span class="line"><span class="number">82166370484403199890008895243450658541227588666881</span></span><br><span class="line"><span class="number">16427171479924442928230863465674813919123162824586</span></span><br><span class="line"><span class="number">17866458359124566529476545682848912883142607690042</span></span><br><span class="line"><span class="number">24219022671055626321111109370544217506941658960408</span></span><br><span class="line"><span class="number">071</span>98403850962455444362981230987879927244284909188</span><br><span class="line"><span class="number">84580156166097919133875499200524063689912560717606</span></span><br><span class="line"><span class="number">05</span>886116467109405077541002256983155200055935729725</span><br><span class="line"><span class="number">71636269561882670428252483600823257530420752963450</span></span><br><span class="line">EOS</span><br><span class="line">numbers = numbers.split.join(<span class="string">''</span>)</span><br><span class="line">max = <span class="number">0</span></span><br><span class="line">numbers.split(<span class="string">''</span>).each_with_index <span class="keyword">do</span> <span class="params">|char, i|</span></span><br><span class="line">  product = numbers[i...i+<span class="number">13</span>].each_char.inject(<span class="number">1</span>) &#123;<span class="params">|acc, digit|</span> acc * digit.to_i&#125;</span><br><span class="line">  <span class="keyword">if</span> product &gt; max</span><br><span class="line">    max = product</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts max</span><br></pre></td></tr></table></figure></p><hr><p>Go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">digits := <span class="string">`</span></span><br><span class="line"><span class="string">73167176531330624919225119674426574742355349194934</span></span><br><span class="line"><span class="string">96983520312774506326239578318016984801869478851843</span></span><br><span class="line"><span class="string">85861560789112949495459501737958331952853208805511</span></span><br><span class="line"><span class="string">12540698747158523863050715693290963295227443043557</span></span><br><span class="line"><span class="string">66896648950445244523161731856403098711121722383113</span></span><br><span class="line"><span class="string">62229893423380308135336276614282806444486645238749</span></span><br><span class="line"><span class="string">30358907296290491560440772390713810515859307960866</span></span><br><span class="line"><span class="string">70172427121883998797908792274921901699720888093776</span></span><br><span class="line"><span class="string">65727333001053367881220235421809751254540594752243</span></span><br><span class="line"><span class="string">52584907711670556013604839586446706324415722155397</span></span><br><span class="line"><span class="string">53697817977846174064955149290862569321978468622482</span></span><br><span class="line"><span class="string">83972241375657056057490261407972968652414535100474</span></span><br><span class="line"><span class="string">82166370484403199890008895243450658541227588666881</span></span><br><span class="line"><span class="string">16427171479924442928230863465674813919123162824586</span></span><br><span class="line"><span class="string">17866458359124566529476545682848912883142607690042</span></span><br><span class="line"><span class="string">24219022671055626321111109370544217506941658960408</span></span><br><span class="line"><span class="string">07198403850962455444362981230987879927244284909188</span></span><br><span class="line"><span class="string">84580156166097919133875499200524063689912560717606</span></span><br><span class="line"><span class="string">05886116467109405077541002256983155200055935729725</span></span><br><span class="line"><span class="string">71636269561882670428252483600823257530420752963450</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">digits = strings.Replace(digits, <span class="string">"\n"</span>, <span class="string">""</span>, <span class="number">-1</span>)</span><br><span class="line">digits = strings.Replace(digits, <span class="string">"\t"</span>, <span class="string">""</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">max := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, l := <span class="number">0</span>, <span class="built_in">len</span>(digits); i &lt; l<span class="number">-13</span>; i++ &#123;</span><br><span class="line">slice := digits[i : i+<span class="number">13</span>]</span><br><span class="line">product := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> slice &#123;</span><br><span class="line">product *= <span class="keyword">int</span>(c - <span class="string">'0'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> product &gt; max &#123;</span><br><span class="line">max = product</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(max)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">parse</span> :: <span class="type">String</span> -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">parse</span> = map (read . return) . concat . lines</span><br><span class="line"></span><br><span class="line"><span class="title">chunks</span> :: <span class="type">Int</span> -&gt; [a] -&gt; [[a]]</span><br><span class="line"><span class="title">chunks</span> n l | length chunk &lt; n = []</span><br><span class="line">           | otherwise = chunk : chunks n (tail l)</span><br><span class="line">           <span class="keyword">where</span> chunk = take n l</span><br><span class="line"></span><br><span class="line"><span class="title">largestProduct</span> :: [[<span class="type">Int</span>]] -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">largestProduct</span> = maximum . map product</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">        str &lt;- readFile <span class="string">"/home/zach/code/euler/008/numbers.txt"</span></span><br><span class="line">        print $ largestProduct $ chunks <span class="number">13</span> $ parse str</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* We implement a straightforward algorithm that examines every substring of length 13. *)</span></span><br><span class="line">adjacent = <span class="number">13</span>;</span><br><span class="line">bignumber = <span class="keyword">IntegerDigits</span>[<span class="number">7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450</span>];</span><br><span class="line">MyProduct[x_] := <span class="keyword">Apply</span>[<span class="keyword">Times</span>, x]</span><br><span class="line"><span class="keyword">Max</span>[<span class="keyword">Table</span>[MyProduct[<span class="keyword">Take</span>[bignumber, &#123;i, i + adjacent - 1&#125;]], &#123;i, 1, Length[bignumber] - adjacent + 1&#125;]]</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p008</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p008().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We implement a straightforward algorithm that examines every substring of length 13.</span></span><br><span class="line"><span class="comment"> * Note that the maximum product is 9^13 = 2541865828329, which fits in a Java long type (but not int).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> maxProd = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + ADJACENT &lt;= NUMBER.length(); i++) &#123;</span><br><span class="line"><span class="keyword">long</span> prod = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ADJACENT; j++)</span><br><span class="line">prod *= NUMBER.charAt(i + j) - <span class="string">'0'</span>;</span><br><span class="line">maxProd = Math.max(prod, maxProd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Long.toString(maxProd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ADJACENT = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NUMBER = <span class="string">"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;The four adjacent digits in the 1000-digit number 
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
</feed>
