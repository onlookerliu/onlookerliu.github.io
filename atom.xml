<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code@浮生记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="onlookerliu.github.io/"/>
  <updated>2018-02-28T16:53:54.160Z</updated>
  <id>onlookerliu.github.io/</id>
  
  <author>
    <name>Kai Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Simple Perceptron using Processing</title>
    <link href="onlookerliu.github.io/2018/02/26/Simple-Perceptron-using-Processing/"/>
    <id>onlookerliu.github.io/2018/02/26/Simple-Perceptron-using-Processing/</id>
    <published>2018-02-25T16:22:03.000Z</published>
    <updated>2018-02-28T16:53:54.160Z</updated>
    
    <content type="html"><![CDATA[<p>This code is mainly based on <a href="https://processing.org" target="_blank" rel="noopener">Processing</a>, a flexible software sketchbook for visualizing things and arts.</p><p>First, we derive a class named Perceptron with two useful method <code>guess</code> and <code>train</code>.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sign</span><span class="params">(<span class="keyword">float</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Perceptron</span> </span>&#123;</span><br><span class="line">  <span class="keyword">float</span>[] weights = <span class="keyword">new</span> <span class="keyword">float</span>[<span class="number">2</span>];</span><br><span class="line">  <span class="keyword">float</span> lr = <span class="number">0.2</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// constructor</span></span><br><span class="line">  Perceptron() &#123;</span><br><span class="line">    <span class="comment">// initialize the weight randomly</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; weights.length; i++) &#123;</span><br><span class="line">      weights[i] = random(-<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">guess</span><span class="params">(<span class="keyword">float</span>[] inputs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">float</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; weights.length; i++) &#123;</span><br><span class="line">      sum += inputs[i] * weights[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> output = sign(sum);</span><br><span class="line">    <span class="keyword">return</span> output;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">train</span><span class="params">(<span class="keyword">float</span>[] inputs, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> guess = guess(inputs);</span><br><span class="line">    <span class="keyword">int</span> error = target - guess;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; weights.length; i++) &#123;</span><br><span class="line">      weights[i] += error * inputs[i] * lr;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>To specify the training procession using a simple perceptron, we activate a sketchbook named Training.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">  <span class="keyword">float</span> x;</span><br><span class="line">  <span class="keyword">float</span> y;</span><br><span class="line">  <span class="keyword">int</span> label;</span><br><span class="line">  </span><br><span class="line">  Point() &#123;</span><br><span class="line">    x = random(width);</span><br><span class="line">    y = random(height);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">      label = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      label = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stroke(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (label == <span class="number">1</span>) &#123;</span><br><span class="line">      fill(<span class="number">255</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fill(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ellipse(x, y, <span class="number">32</span>, <span class="number">32</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Now, come to our basic purpose. Draw random samples and make trainings. Here is the main sketchbook file <code>SimplePerceptron</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Perceptron brain;</span><br><span class="line"></span><br><span class="line">Point[] points = <span class="keyword">new</span> Point[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> trainingIndex = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  size(<span class="number">800</span>, <span class="number">800</span>);</span><br><span class="line">  brain = <span class="keyword">new</span> Perceptron();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; points.length; i++) &#123;</span><br><span class="line">    points[i] = <span class="keyword">new</span> Point();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">float</span>[] inputs = &#123;-<span class="number">1</span>, <span class="number">0.5</span>&#125;;</span><br><span class="line">  <span class="keyword">int</span> guess = brain.guess(inputs);</span><br><span class="line">  println(guess);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  background(<span class="number">255</span>);</span><br><span class="line">  stroke(<span class="number">0</span>);</span><br><span class="line">  line(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">  <span class="keyword">for</span> (Point pt : points) &#123;</span><br><span class="line">    pt.show();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (Point pt : points) &#123;</span><br><span class="line">    <span class="keyword">float</span>[] inputs = &#123;pt.x, pt.y&#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> target = pt.label;</span><br><span class="line">    <span class="keyword">int</span> guess = brain.guess(inputs);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (guess == target) &#123;</span><br><span class="line">      fill(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fill(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    noStroke();</span><br><span class="line">    ellipse(pt.x, pt.y, <span class="number">16</span>, <span class="number">16</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  Point training = points[trainingIndex];</span><br><span class="line">  <span class="keyword">float</span>[] inputs = &#123;training.x, training.y&#125;;</span><br><span class="line">  <span class="keyword">int</span> target = training.label;</span><br><span class="line">  brain.train(inputs, target);</span><br><span class="line">  trainingIndex++;</span><br><span class="line">  <span class="keyword">if</span> (trainingIndex == points.length) &#123;</span><br><span class="line">    trainingIndex = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Simply click the run button, Processing will help start an interative interface (similar to the canvas) and render the result below.</p><div align="center"><br><img src="http://oxyywddt8.bkt.clouddn.com/processing/Perceptron.gif" width="60%"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This code is mainly based on &lt;a href=&quot;https://processing.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Processing&lt;/a&gt;, a flexible software sketchbo
      
    
    </summary>
    
    
      <category term="machine learning" scheme="onlookerliu.github.io/tags/machine-learning/"/>
    
      <category term="processing" scheme="onlookerliu.github.io/tags/processing/"/>
    
      <category term="java" scheme="onlookerliu.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Linear Regression in JS</title>
    <link href="onlookerliu.github.io/2018/02/23/Linear-Regression-in-JS/"/>
    <id>onlookerliu.github.io/2018/02/23/Linear-Regression-in-JS/</id>
    <published>2018-02-23T14:51:57.000Z</published>
    <updated>2018-02-28T16:52:10.408Z</updated>
    
    <content type="html"><![CDATA[<p>This code is mainly based on the <a href="https://p5js.org/" target="_blank" rel="noopener">p5js</a> library, which provide us an accessible sketchbook to interactive with HTML objects.</p><p>In p5, we only need to make our own changes to the file named sketch.js.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    createCanvas(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">linearRegression</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xsum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> ysum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        xsum += data[i].x;</span><br><span class="line">        ysum += data[i].y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> xmean = xsum / data.length;</span><br><span class="line">    <span class="keyword">var</span> ymean = ysum / data.length;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> den = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = data[i].x;</span><br><span class="line">        <span class="keyword">var</span> y = data[i].y;</span><br><span class="line">        num += (x - xmean) * (y - ymean);</span><br><span class="line">        den += (x - xmean) * (x - xmean);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    m = num / den;</span><br><span class="line">    b = ymean - m * xmean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x1 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> y1 = m * x1 + b;</span><br><span class="line">    <span class="keyword">var</span> x2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> y2 = m * x2 + b;</span><br><span class="line"></span><br><span class="line">    x1 = map(x1, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, width);</span><br><span class="line">    y1 = map(y1, <span class="number">0</span>, <span class="number">1</span>, height, <span class="number">0</span>);</span><br><span class="line">    x2 = map(x2, <span class="number">0</span>, <span class="number">0</span>, width);</span><br><span class="line">    y2 = map(y2, <span class="number">0</span>, <span class="number">1</span>, height, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    stroke(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">    line(x1, y1, x2, y2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mousePressed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = map(mouseX, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> y = map(mouseY, <span class="number">0</span>, height, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">var</span> point = createVector(x, y);</span><br><span class="line">    data.push(point);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    background(<span class="number">51</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = map(data[i].x, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, width);</span><br><span class="line">        <span class="keyword">var</span> y = map(data[i].y, <span class="number">0</span>, <span class="number">1</span>, height, <span class="number">0</span>);</span><br><span class="line">        fill(<span class="number">255</span>);</span><br><span class="line">        stroke(<span class="number">255</span>);</span><br><span class="line">        ellipse(x, y, <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        linearRegression();</span><br><span class="line">        drawLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Click on the index.html file, and we can make our regression on any browser support javascript. Here is the design sketch.</p><div align="center"><br><img src="http://oxyywddt8.bkt.clouddn.com/p5js/OLS.gif" width="60%"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;This code is mainly based on the &lt;a href=&quot;https://p5js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;p5js&lt;/a&gt; library, which provide us an accessi
      
    
    </summary>
    
    
      <category term="statistics" scheme="onlookerliu.github.io/tags/statistics/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
      <category term="p5js" scheme="onlookerliu.github.io/tags/p5js/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-008</title>
    <link href="onlookerliu.github.io/2018/02/14/Project-Euler-008/"/>
    <id>onlookerliu.github.io/2018/02/14/Project-Euler-008/</id>
    <published>2018-02-14T14:16:28.000Z</published>
    <updated>2018-02-28T14:21:20.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.</p><pre><code>7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450</code></pre><p>Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23514624000</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line">numbers = <span class="string">'''</span></span><br><span class="line"><span class="string">73167176531330624919225119674426574742355349194934</span></span><br><span class="line"><span class="string">96983520312774506326239578318016984801869478851843</span></span><br><span class="line"><span class="string">85861560789112949495459501737958331952853208805511</span></span><br><span class="line"><span class="string">12540698747158523863050715693290963295227443043557</span></span><br><span class="line"><span class="string">66896648950445244523161731856403098711121722383113</span></span><br><span class="line"><span class="string">62229893423380308135336276614282806444486645238749</span></span><br><span class="line"><span class="string">30358907296290491560440772390713810515859307960866</span></span><br><span class="line"><span class="string">70172427121883998797908792274921901699720888093776</span></span><br><span class="line"><span class="string">65727333001053367881220235421809751254540594752243</span></span><br><span class="line"><span class="string">52584907711670556013604839586446706324415722155397</span></span><br><span class="line"><span class="string">53697817977846174064955149290862569321978468622482</span></span><br><span class="line"><span class="string">83972241375657056057490261407972968652414535100474</span></span><br><span class="line"><span class="string">82166370484403199890008895243450658541227588666881</span></span><br><span class="line"><span class="string">16427171479924442928230863465674813919123162824586</span></span><br><span class="line"><span class="string">17866458359124566529476545682848912883142607690042</span></span><br><span class="line"><span class="string">24219022671055626321111109370544217506941658960408</span></span><br><span class="line"><span class="string">07198403850962455444362981230987879927244284909188</span></span><br><span class="line"><span class="string">84580156166097919133875499200524063689912560717606</span></span><br><span class="line"><span class="string">05886116467109405077541002256983155200055935729725</span></span><br><span class="line"><span class="string">71636269561882670428252483600823257530420752963450</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">numstring = numbers.strip().replace(<span class="string">'\n'</span>, <span class="string">''</span>)</span><br><span class="line">greatest_product = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(numstring)):</span><br><span class="line">    product = <span class="number">1</span></span><br><span class="line">    substring = numstring[i:i+<span class="number">13</span>]</span><br><span class="line">    <span class="keyword">for</span> digit <span class="keyword">in</span> substring:</span><br><span class="line">        product *= int(digit)</span><br><span class="line">    <span class="keyword">if</span> product &gt; greatest_product:</span><br><span class="line">        greatest_product = product</span><br><span class="line"></span><br><span class="line">print(greatest_product)</span><br></pre></td></tr></table></figure></p><hr><p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> runs = <span class="string">`</span></span><br><span class="line"><span class="string">73167176531330624919225119674426574742355349194934</span></span><br><span class="line"><span class="string">96983520312774506326239578318016984801869478851843</span></span><br><span class="line"><span class="string">85861560789112949495459501737958331952853208805511</span></span><br><span class="line"><span class="string">12540698747158523863050715693290963295227443043557</span></span><br><span class="line"><span class="string">66896648950445244523161731856403098711121722383113</span></span><br><span class="line"><span class="string">62229893423380308135336276614282806444486645238749</span></span><br><span class="line"><span class="string">30358907296290491560440772390713810515859307960866</span></span><br><span class="line"><span class="string">70172427121883998797908792274921901699720888093776</span></span><br><span class="line"><span class="string">65727333001053367881220235421809751254540594752243</span></span><br><span class="line"><span class="string">52584907711670556013604839586446706324415722155397</span></span><br><span class="line"><span class="string">53697817977846174064955149290862569321978468622482</span></span><br><span class="line"><span class="string">83972241375657056057490261407972968652414535100474</span></span><br><span class="line"><span class="string">82166370484403199890008895243450658541227588666881</span></span><br><span class="line"><span class="string">16427171479924442928230863465674813919123162824586</span></span><br><span class="line"><span class="string">17866458359124566529476545682848912883142607690042</span></span><br><span class="line"><span class="string">24219022671055626321111109370544217506941658960408</span></span><br><span class="line"><span class="string">07198403850962455444362981230987879927244284909188</span></span><br><span class="line"><span class="string">84580156166097919133875499200524063689912560717606</span></span><br><span class="line"><span class="string">05886116467109405077541002256983155200055935729725</span></span><br><span class="line"><span class="string">71636269561882670428252483600823257530420752963450</span></span><br><span class="line"><span class="string">`</span>.trim().split(<span class="string">"\n"</span>).join(<span class="string">""</span>).split(<span class="regexp">/[01]+/</span>)</span><br><span class="line"><span class="keyword">const</span> x = <span class="number">13</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">runs.forEach(<span class="function">(<span class="params">run</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (run.length &lt; x) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = run.length; i &lt;= l - x; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> digits = run.substring(i, i + x).split(<span class="string">""</span>)</span><br><span class="line">    <span class="keyword">const</span> product = digits.reduce(<span class="function">(<span class="params">prod, c</span>) =&gt;</span> prod * <span class="built_in">parseInt</span>(c), <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> (product &gt; max) max = product</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(max)</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">numbers = <span class="string">&lt;&lt;EOS</span></span><br><span class="line"><span class="string">73167176531330624919225119674426574742355349194934</span></span><br><span class="line"><span class="number">96983520312774506326239578318016984801869478851843</span></span><br><span class="line"><span class="number">85861560789112949495459501737958331952853208805511</span></span><br><span class="line"><span class="number">12540698747158523863050715693290963295227443043557</span></span><br><span class="line"><span class="number">66896648950445244523161731856403098711121722383113</span></span><br><span class="line"><span class="number">62229893423380308135336276614282806444486645238749</span></span><br><span class="line"><span class="number">30358907296290491560440772390713810515859307960866</span></span><br><span class="line"><span class="number">70172427121883998797908792274921901699720888093776</span></span><br><span class="line"><span class="number">65727333001053367881220235421809751254540594752243</span></span><br><span class="line"><span class="number">52584907711670556013604839586446706324415722155397</span></span><br><span class="line"><span class="number">53697817977846174064955149290862569321978468622482</span></span><br><span class="line"><span class="number">83972241375657056057490261407972968652414535100474</span></span><br><span class="line"><span class="number">82166370484403199890008895243450658541227588666881</span></span><br><span class="line"><span class="number">16427171479924442928230863465674813919123162824586</span></span><br><span class="line"><span class="number">17866458359124566529476545682848912883142607690042</span></span><br><span class="line"><span class="number">24219022671055626321111109370544217506941658960408</span></span><br><span class="line"><span class="number">071</span>98403850962455444362981230987879927244284909188</span><br><span class="line"><span class="number">84580156166097919133875499200524063689912560717606</span></span><br><span class="line"><span class="number">05</span>886116467109405077541002256983155200055935729725</span><br><span class="line"><span class="number">71636269561882670428252483600823257530420752963450</span></span><br><span class="line">EOS</span><br><span class="line">numbers = numbers.split.join(<span class="string">''</span>)</span><br><span class="line">max = <span class="number">0</span></span><br><span class="line">numbers.split(<span class="string">''</span>).each_with_index <span class="keyword">do</span> <span class="params">|char, i|</span></span><br><span class="line">  product = numbers[i...i+<span class="number">13</span>].each_char.inject(<span class="number">1</span>) &#123;<span class="params">|acc, digit|</span> acc * digit.to_i&#125;</span><br><span class="line">  <span class="keyword">if</span> product &gt; max</span><br><span class="line">    max = product</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts max</span><br></pre></td></tr></table></figure></p><hr><p>Go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"strings"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">digits := <span class="string">`</span></span><br><span class="line"><span class="string">73167176531330624919225119674426574742355349194934</span></span><br><span class="line"><span class="string">96983520312774506326239578318016984801869478851843</span></span><br><span class="line"><span class="string">85861560789112949495459501737958331952853208805511</span></span><br><span class="line"><span class="string">12540698747158523863050715693290963295227443043557</span></span><br><span class="line"><span class="string">66896648950445244523161731856403098711121722383113</span></span><br><span class="line"><span class="string">62229893423380308135336276614282806444486645238749</span></span><br><span class="line"><span class="string">30358907296290491560440772390713810515859307960866</span></span><br><span class="line"><span class="string">70172427121883998797908792274921901699720888093776</span></span><br><span class="line"><span class="string">65727333001053367881220235421809751254540594752243</span></span><br><span class="line"><span class="string">52584907711670556013604839586446706324415722155397</span></span><br><span class="line"><span class="string">53697817977846174064955149290862569321978468622482</span></span><br><span class="line"><span class="string">83972241375657056057490261407972968652414535100474</span></span><br><span class="line"><span class="string">82166370484403199890008895243450658541227588666881</span></span><br><span class="line"><span class="string">16427171479924442928230863465674813919123162824586</span></span><br><span class="line"><span class="string">17866458359124566529476545682848912883142607690042</span></span><br><span class="line"><span class="string">24219022671055626321111109370544217506941658960408</span></span><br><span class="line"><span class="string">07198403850962455444362981230987879927244284909188</span></span><br><span class="line"><span class="string">84580156166097919133875499200524063689912560717606</span></span><br><span class="line"><span class="string">05886116467109405077541002256983155200055935729725</span></span><br><span class="line"><span class="string">71636269561882670428252483600823257530420752963450</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line">digits = strings.Replace(digits, <span class="string">"\n"</span>, <span class="string">""</span>, <span class="number">-1</span>)</span><br><span class="line">digits = strings.Replace(digits, <span class="string">"\t"</span>, <span class="string">""</span>, <span class="number">-1</span>)</span><br><span class="line"></span><br><span class="line">max := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i, l := <span class="number">0</span>, <span class="built_in">len</span>(digits); i &lt; l<span class="number">-13</span>; i++ &#123;</span><br><span class="line">slice := digits[i : i+<span class="number">13</span>]</span><br><span class="line">product := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> slice &#123;</span><br><span class="line">product *= <span class="keyword">int</span>(c - <span class="string">'0'</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> product &gt; max &#123;</span><br><span class="line">max = product</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(max)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">parse</span> :: <span class="type">String</span> -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">parse</span> = map (read . return) . concat . lines</span><br><span class="line"></span><br><span class="line"><span class="title">chunks</span> :: <span class="type">Int</span> -&gt; [a] -&gt; [[a]]</span><br><span class="line"><span class="title">chunks</span> n l | length chunk &lt; n = []</span><br><span class="line">           | otherwise = chunk : chunks n (tail l)</span><br><span class="line">           <span class="keyword">where</span> chunk = take n l</span><br><span class="line"></span><br><span class="line"><span class="title">largestProduct</span> :: [[<span class="type">Int</span>]] -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">largestProduct</span> = maximum . map product</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">        str &lt;- readFile <span class="string">"/home/zach/code/euler/008/numbers.txt"</span></span><br><span class="line">        print $ largestProduct $ chunks <span class="number">13</span> $ parse str</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* We implement a straightforward algorithm that examines every substring of length 13. *)</span></span><br><span class="line">adjacent = <span class="number">13</span>;</span><br><span class="line">bignumber = <span class="keyword">IntegerDigits</span>[<span class="number">7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450</span>];</span><br><span class="line">MyProduct[x_] := <span class="keyword">Apply</span>[<span class="keyword">Times</span>, x]</span><br><span class="line"><span class="keyword">Max</span>[<span class="keyword">Table</span>[MyProduct[<span class="keyword">Take</span>[bignumber, &#123;i, i + adjacent - 1&#125;]], &#123;i, 1, Length[bignumber] - adjacent + 1&#125;]]</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p008</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p008().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We implement a straightforward algorithm that examines every substring of length 13.</span></span><br><span class="line"><span class="comment"> * Note that the maximum product is 9^13 = 2541865828329, which fits in a Java long type (but not int).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> maxProd = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + ADJACENT &lt;= NUMBER.length(); i++) &#123;</span><br><span class="line"><span class="keyword">long</span> prod = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; ADJACENT; j++)</span><br><span class="line">prod *= NUMBER.charAt(i + j) - <span class="string">'0'</span>;</span><br><span class="line">maxProd = Math.max(prod, maxProd);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Long.toString(maxProd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ADJACENT = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NUMBER = <span class="string">"7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;The four adjacent digits in the 1000-digit number 
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-007</title>
    <link href="onlookerliu.github.io/2018/02/14/Project-Euler-007/"/>
    <id>onlookerliu.github.io/2018/02/14/Project-Euler-007/</id>
    <published>2018-02-14T14:08:11.000Z</published>
    <updated>2018-02-28T14:22:37.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13,<br>we can see that the 6th prime is 13.</p><p>What is the 10001st prime number?</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">104743</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eratosthenes</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''Yields the sequence of prime numbers via the Sieve of Eratosthenes.'''</span></span><br><span class="line">    D = &#123;&#125;  <span class="comment"># map composite integers to primes witnessing their compositeness</span></span><br><span class="line">    q = <span class="number">2</span>   <span class="comment"># first integer to test for primality</span></span><br><span class="line">    <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> q <span class="keyword">not</span> <span class="keyword">in</span> D:</span><br><span class="line">            <span class="keyword">yield</span> q        <span class="comment"># not marked composite, must be prime</span></span><br><span class="line">            D[q*q] = [q]   <span class="comment"># first multiple of q not already marked</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> D[q]: <span class="comment"># move each witness to its next multiple</span></span><br><span class="line">                D.setdefault(p+q,[]).append(p)</span><br><span class="line">            <span class="keyword">del</span> D[q]       <span class="comment"># no longer need D[q], free memory</span></span><br><span class="line">        q += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nth_prime</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i, prime <span class="keyword">in</span> enumerate(eratosthenes()):</span><br><span class="line">        <span class="keyword">if</span> i == n - <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> prime</span><br><span class="line"></span><br><span class="line">print(nth_prime(<span class="number">10001</span>))</span><br></pre></td></tr></table></figure></p><hr><p>JavaScript<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const sieve = &#123;&#125;</span><br><span class="line">let n = 0</span><br><span class="line">for (var q = 2; n &lt; 10001; q++) &#123;</span><br><span class="line">  if (sieve[q]) &#123;</span><br><span class="line">    sieve[q].forEach((p) =&gt; &#123;</span><br><span class="line">      const list = sieve[p + q] || []</span><br><span class="line">      list.push(p)</span><br><span class="line">      sieve[p + q] = list</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    sieve[q * q] = [q]</span><br><span class="line">    n++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">console.log(q - 1)</span><br></pre></td></tr></table></figure></p><hr><p>Go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">iSqrt</span><span class="params">(n <span class="keyword">int64</span>)</span> <span class="title">int64</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> r1, r <span class="keyword">int64</span> = n, n + <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> r1 &lt; r &#123;</span><br><span class="line">r, r1 = r1, (r1+n/r1)&gt;&gt;<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> r</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">PrimeSieve</span><span class="params">(n <span class="keyword">int64</span>)</span> []<span class="title">int64</span></span> &#123;</span><br><span class="line">result := <span class="built_in">make</span>([]<span class="keyword">int64</span>, <span class="number">0</span>, n)</span><br><span class="line">sieve := <span class="built_in">make</span>([]<span class="keyword">bool</span>, n+<span class="number">1</span>)</span><br><span class="line">sn := iSqrt(n)</span><br><span class="line"><span class="keyword">var</span> i, j <span class="keyword">int64</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">2</span>; i &lt;= sn; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> !sieve[i] &#123;</span><br><span class="line"><span class="keyword">for</span> j = i * i; j &lt;= n; j += i &#123;</span><br><span class="line">sieve[j] = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> i = <span class="number">2</span>; i &lt;= n; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> !sieve[i] &#123;</span><br><span class="line">result = <span class="built_in">append</span>(result, i)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">primes := PrimeSieve(<span class="number">1000000</span>)</span><br><span class="line">fmt.Println(primes[<span class="number">10000</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'mathn'</span></span><br><span class="line">puts Prime.take(<span class="number">10001</span>).last</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">primes</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">primes</span> = <span class="number">2</span> : sieve primes [<span class="number">3</span>,<span class="number">5.</span>.] <span class="keyword">where</span></span><br><span class="line">    sieve (p:ps) xs = h ++ sieve ps [x | x &lt;- t, rem x p /= <span class="number">0</span>]</span><br><span class="line">                      <span class="keyword">where</span> (h, t) = span (&lt; p*p) xs</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ primes !! <span class="number">10000</span></span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> primes [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">defn</span></span> improve [p nums]</span><br><span class="line">    (<span class="name"><span class="builtin-name">filter</span></span> #(<span class="name"><span class="builtin-name">or</span></span> </span><br><span class="line">               (<span class="name"><span class="builtin-name">not</span></span> (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">rem</span></span> % p) <span class="number">0</span>))</span><br><span class="line">               (<span class="name"><span class="builtin-name">=</span></span> % p))</span><br><span class="line">            nums))</span><br><span class="line">  (<span class="name"><span class="builtin-name">defn</span></span> prime-iter [p nums i]</span><br><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">&gt;</span></span> (<span class="name"><span class="builtin-name">*</span></span> p p) n)</span><br><span class="line">      nums</span><br><span class="line">      (<span class="name">prime-iter</span> (<span class="name"><span class="builtin-name">nth</span></span> nums (<span class="name"><span class="builtin-name">+</span></span> i <span class="number">1</span>)) (<span class="name">improve</span> (<span class="name"><span class="builtin-name">nth</span></span> nums (<span class="name"><span class="builtin-name">+</span></span> i <span class="number">1</span>)) nums) (<span class="name"><span class="builtin-name">+</span></span> i <span class="number">1</span>))))</span><br><span class="line">  (<span class="name">prime-iter</span> <span class="number">2</span> (<span class="name"><span class="builtin-name">range</span></span> <span class="number">2</span> (<span class="name"><span class="builtin-name">+</span></span> n <span class="number">1</span>)) <span class="number">-1</span>))</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">nth</span></span> (<span class="name">primes</span> <span class="number">1000000</span>) <span class="number">10000</span>))</span><br></pre></td></tr></table></figure></p><hr><p>Rust<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">eratosthenes</span></span>(limit: <span class="built_in">usize</span>) -&gt; <span class="built_in">Vec</span>&lt;<span class="built_in">usize</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> sieve = <span class="built_in">vec!</span>[<span class="literal">true</span>; limit];</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> p = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="comment">// Eliminate multiples of p.</span></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut</span> i = <span class="number">2</span> * p - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> i &lt; limit &#123;</span><br><span class="line">            sieve[i] = <span class="literal">false</span>;</span><br><span class="line">            i += p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Find the next prime.</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="literal">Some</span>(n) = (p..limit).find(|&amp;n| sieve[n]) &#123;</span><br><span class="line">            p = n + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sieve</span><br><span class="line">        .iter()</span><br><span class="line">        .enumerate()</span><br><span class="line">        .filter(|&amp;(_, &amp;is_prime)| is_prime)</span><br><span class="line">        .skip(<span class="number">1</span>)</span><br><span class="line">        .map(|(i, _)| i + <span class="number">1</span>)</span><br><span class="line">        .collect()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> primes = eratosthenes(<span class="number">1000000</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, primes[<span class="number">10000</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* Use Mathematica's built-in functions for easy problem-solving. *)</span></span><br><span class="line"><span class="keyword">Prime</span>[<span class="number">10001</span>]</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p007</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p007().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Computers are fast, so we can implement this solution by testing each number</span></span><br><span class="line"><span class="comment"> * individually for primeness, instead of using the more efficient sieve of Eratosthenes.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>, count = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (Library.isPrime(i)) &#123;</span><br><span class="line">count++;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">10001</span>)</span><br><span class="line"><span class="keyword">return</span> Integer.toString(i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;By listing the first six prime numbers: 2, 3, 5, 7
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-006</title>
    <link href="onlookerliu.github.io/2018/02/13/Project-Euler-006/"/>
    <id>onlookerliu.github.io/2018/02/13/Project-Euler-006/</id>
    <published>2018-02-13T13:59:55.000Z</published>
    <updated>2018-02-28T14:07:16.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><br>The sum of the squares of the first ten natural numbers is,<br></p><p>$$1^2 + 2^2 + … + 10^2 = 385$$</p><p><br>The square of the sum of the first ten natural numbers is,<br></p><p>$$(1 + 2 + … + 10)^2 = 55^2 = 3025$$</p><p><br>Hence the difference between the sum of the squares of the first ten natural<br>numbers and the square of the sum is $3025 - 385 = 2640$.<br></p><p><br>Find the difference between the sum of the squares of the first one hundred<br>natural numbers and the square of the sum.<br></p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">25164150</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">print(sum(range(<span class="number">1</span>, <span class="number">101</span>))**<span class="number">2</span> - sum(x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>)))</span><br></pre></td></tr></table></figure></p><hr><p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>, sumSquares = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">  sum += i</span><br><span class="line">  sumSquares += i * i</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum * sum - sumSquares)</span><br></pre></td></tr></table></figure></p><hr><p>Go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sumSquares, squareSum := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++ &#123;</span><br><span class="line">sumSquares += i * i</span><br><span class="line">squareSum += i</span><br><span class="line">&#125;</span><br><span class="line">squareSum *= squareSum</span><br><span class="line">fmt.Println(squareSum - sumSquares)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">puts ((<span class="number">1</span>..<span class="number">100</span>).inject(<span class="number">0</span>) &#123;<span class="params">|s,v|</span> s += v&#125;)**<span class="number">2</span> - ((<span class="number">1</span>..<span class="number">100</span>).collect &#123;<span class="params">|x|</span> x**<span class="number">2</span>&#125;.inject(<span class="number">0</span>) &#123; <span class="params">|s,v|</span> s += v&#125;)</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> ::  <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ (s*s) - sqS <span class="keyword">where</span></span><br><span class="line">    s = sum [<span class="number">1.</span><span class="number">.100</span>]</span><br><span class="line">    sqS = sum [i * i | i &lt;- [<span class="number">1.</span><span class="number">.100</span>]]</span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> square [x]</span><br><span class="line">  (<span class="name"><span class="builtin-name">*</span></span> x x))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> sum-squares [limit]</span><br><span class="line">  (<span class="name"><span class="builtin-name">apply</span></span> + (<span class="name"><span class="builtin-name">map</span></span> square (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> (<span class="name"><span class="builtin-name">+</span></span> limit <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> square-sum [limit]</span><br><span class="line">  (<span class="name">square</span> (<span class="name"><span class="builtin-name">apply</span></span> + (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> (<span class="name"><span class="builtin-name">+</span></span> limit <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">-</span></span> (<span class="name">square-sum</span> <span class="number">100</span>) (<span class="name">sum-squares</span> <span class="number">100</span>)))</span><br></pre></td></tr></table></figure></p><hr><p>Rust<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> sum_squares = (<span class="number">1</span>..<span class="number">101</span>).map(|x| x*x).sum::&lt;<span class="built_in">u64</span>&gt;();</span><br><span class="line">    <span class="keyword">let</span> square_sum = (<span class="number">1</span>..<span class="number">101</span>).sum::&lt;<span class="built_in">u64</span>&gt;().pow(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, square_sum - sum_squares);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathemtica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * Computers are fast, so we can implement this solution directly without any clever math.</span></span><br><span class="line"><span class="comment"> * However for the mathematically inclined, there are closed-form formulas:</span></span><br><span class="line"><span class="comment"> *   sum  = n(n + 1) / 2.</span></span><br><span class="line"><span class="comment"> *   sum2 = n(n + 1)(2n + 1) / 6.</span></span><br><span class="line"><span class="comment"> * Hence sum^2 - sum2 = (n^4 / 4) + (n^3 / 6) - (n^2 / 4) - (n / 6).</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line">n = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">Sum</span>[k, &#123;k, n&#125;]^<span class="number">2</span> - <span class="keyword">Sum</span>[k^<span class="number">2</span>, &#123;k, n&#125;]</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p006</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p006().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Computers are fast, so we can implement this solution directly without any clever math.</span></span><br><span class="line"><span class="comment"> * Note that sum^2 is bounded above by (100*100)^2 and sum2 is</span></span><br><span class="line"><span class="comment"> * bounded above by 100*(100^2), both of which fit in a Java int type.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * However for the mathematically inclined, there are closed-form formulas:</span></span><br><span class="line"><span class="comment"> *   sum  = N(N + 1) / 2.</span></span><br><span class="line"><span class="comment"> *   sum2 = N(N + 1)(2N + 1) / 6.</span></span><br><span class="line"><span class="comment"> * Hence sum^2 - sum2 = (N^4 / 4) + (N^3 / 6) - (N^2 / 4) - (N / 6).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> sum2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">sum += i;</span><br><span class="line">sum2 += i * i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(sum * sum - sum2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;&lt;br&gt;The sum of the squares of the first ten natura
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-005</title>
    <link href="onlookerliu.github.io/2018/02/12/Project-Euler-005/"/>
    <id>onlookerliu.github.io/2018/02/12/Project-Euler-005/</id>
    <published>2018-02-12T13:46:16.000Z</published>
    <updated>2018-02-28T13:57:31.601Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>2520 is the smallest number that can be divided by each<br>of the numbers from 1 to 10 without any remainder.</p><p>What is the smallest positive number that is evenly divisible<br>by all of the numbers from 1 to 20?</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">232792560</span><br></pre></td></tr></table></figure><hr><p>The critical insight of this problem is this:</p><p>$$divisibleto(x) = n \times divisibleto(x-1)$$</p><p>This means that when searching for the smallest number divisible to 20,<br>we can increment by the smallest number divisible to 19 each time (since the<br>smallest number divisible to 19 is inherently a factor of the smallest number<br>divisible to 20).</p><p>This insight is used in the python solution on line 14:</p><pre><code>step = divisible_to(x-1)</code></pre><p>This is a recursive solution to the problem, and yields incredible performance. It can calculate<br>the smallest number divisible to 500 in a fraction of a second.</p><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_divisible_to</span><span class="params">(number, x)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> reversed(list(range(<span class="number">1</span>, x+<span class="number">1</span>))):</span><br><span class="line">        <span class="keyword">if</span> number % i != <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisible_to</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">elif</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        step = divisible_to(x<span class="number">-1</span>)</span><br><span class="line">        number = <span class="number">0</span></span><br><span class="line">        found = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> found:</span><br><span class="line">            number += step</span><br><span class="line">            found = is_divisible_to(number, x)</span><br><span class="line">        <span class="keyword">return</span> number</span><br><span class="line"></span><br><span class="line">print(divisible_to(<span class="number">20</span>))</span><br></pre></td></tr></table></figure></p><hr><p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDivisibleTo</span>(<span class="params">x, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (; n &gt; <span class="number">0</span>; n -= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x % n !== <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">divisibleTo</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> step = divisibleTo(n - <span class="number">1</span>), i = step; !isDivisibleTo(i, n); i += step);</span><br><span class="line">  <span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(divisibleTo(<span class="number">20</span>))</span><br></pre></td></tr></table></figure></p><hr><p>Go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GCD</span><span class="params">(a, b <span class="keyword">int</span>)</span> <span class="title">int</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> b != <span class="number">0</span> &#123;</span><br><span class="line">a, b = b, a%b</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">lcm := <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">2</span>; i &lt;= <span class="number">20</span>; i++ &#123;</span><br><span class="line">lcm *= i / GCD(i, lcm)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(lcm)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Numeric</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">divisible_to?</span><span class="params">(x)</span></span></span><br><span class="line">    <span class="keyword">self</span> &gt; <span class="number">0</span> <span class="keyword">and</span> x.downto(<span class="number">1</span>).all? &#123; <span class="params">|i|</span> <span class="keyword">self</span> % i == <span class="number">0</span> &#125;</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisible_to</span><span class="params">(x)</span></span></span><br><span class="line">  <span class="keyword">if</span> x &lt; <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">elsif</span> x == <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    step = divisible_to(x-<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">until</span> n.divisible_to? x</span><br><span class="line">      n += step</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">return</span> n</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts divisible_to(<span class="number">20</span>)</span><br></pre></td></tr></table></figure></p><hr><p>Rust<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">gcd</span></span>(<span class="keyword">mut</span> a: <span class="built_in">u64</span>, <span class="keyword">mut</span> b: <span class="built_in">u64</span>) -&gt; <span class="built_in">u64</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> t = a;</span><br><span class="line">        a = b;</span><br><span class="line">        b = t % b;</span><br><span class="line">    &#125;</span><br><span class="line">    a</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> lcm = (<span class="number">2</span>..<span class="number">21</span>).fold(<span class="number">1</span>, |acc, i| &#123;</span><br><span class="line">        acc * i / gcd(i, acc)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, lcm);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">isDivisibleTo</span> ::  <span class="type">Integer</span> -&gt; <span class="type">Integer</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">isDivisibleTo</span> x n = all (\i -&gt; n `mod` i == <span class="number">0</span>) (reverse [<span class="number">1.</span>.x])</span><br><span class="line"></span><br><span class="line"><span class="title">divisibleTo</span> ::  <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">divisibleTo</span> <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="title">divisibleTo</span> x = <span class="keyword">let</span> step = divisibleTo (x<span class="number">-1</span>)</span><br><span class="line">                <span class="keyword">in</span>  head $ filter (isDivisibleTo x) [step,<span class="number">2</span>*step..]</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> ::  <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ divisibleTo <span class="number">20</span></span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> divisible-to-x? [n x]</span><br><span class="line">  (<span class="name">every?</span> #(<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">rem</span></span> n %) <span class="number">0</span>) (<span class="name"><span class="builtin-name">reverse</span></span> (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> (<span class="name"><span class="builtin-name">+</span></span> x <span class="number">1</span>)))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> divisible-to [x]</span><br><span class="line">  (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">=</span></span> x <span class="number">1</span>)</span><br><span class="line">    x</span><br><span class="line">    (<span class="name"><span class="builtin-name">first</span></span> (<span class="name"><span class="builtin-name">filter</span></span> #(<span class="name">divisible-to-x?</span> % x) (<span class="name"><span class="builtin-name">iterate</span></span> inc (<span class="name">divisible-to</span> (<span class="name"><span class="builtin-name">-</span></span> x <span class="number">1</span>)))))))</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span> (<span class="name">divisible-to</span> <span class="number">20</span>))</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * The smallest number n that is evenly divisible by every number in a set &#123;k1, k2, ..., k_m&#125;</span></span><br><span class="line"><span class="comment"> * is also known as the lowest common multiple (LCM) of the set of numbers.</span></span><br><span class="line"><span class="comment"> * The LCM of two natural numbers x and y is given by LCM(x, y) = x * y / GCD(x, y).</span></span><br><span class="line"><span class="comment"> * When LCM is applied to a collection of numbers, it is commutative, associative, and idempotent.</span></span><br><span class="line"><span class="comment"> * Hence LCM(k1, k2, ..., k_m) = LCM(...(LCM(LCM(k1, k2), k3)...), k_m).</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line"><span class="keyword">Apply</span>[<span class="keyword">LCM</span>, <span class="keyword">Range</span>[<span class="number">20</span>]]</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p005</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p005().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * The smallest number n that is evenly divisible by every number in a set &#123;k1, k2, ..., k_m&#125;</span></span><br><span class="line"><span class="comment"> * is also known as the lowest common multiple (LCM) of the set of numbers.</span></span><br><span class="line"><span class="comment"> * The LCM of two natural numbers x and y is given by LCM(x, y) = x * y / GCD(x, y).</span></span><br><span class="line"><span class="comment"> * When LCM is applied to a collection of numbers, it is commutative, associative, and idempotent.</span></span><br><span class="line"><span class="comment"> * Hence LCM(k1, k2, ..., k_m) = LCM(...(LCM(LCM(k1, k2), k3)...), k_m).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BigInteger allLcm = BigInteger.ONE;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">20</span>; i++)</span><br><span class="line">allLcm = lcm(BigInteger.valueOf(i), allLcm);</span><br><span class="line"><span class="keyword">return</span> allLcm.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> BigInteger <span class="title">lcm</span><span class="params">(BigInteger x, BigInteger y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.divide(x.gcd(y)).multiply(y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;2520 is the smallest number that can be divided by
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-004</title>
    <link href="onlookerliu.github.io/2018/02/11/Project-Euler-004/"/>
    <id>onlookerliu.github.io/2018/02/11/Project-Euler-004/</id>
    <published>2018-02-11T14:37:57.000Z</published>
    <updated>2018-02-28T13:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>A palindromic number reads the same both ways. The largest palindrome<br>made from the product of two 2-digit numbers is $9009 = 91 \times 99$.</p><p>Find the largest palindrome made from the product of two 3-digit numbers.</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">906609</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">print(max(a * b <span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">100</span>, <span class="number">1000</span>) <span class="keyword">for</span> b <span class="keyword">in</span> range(a, <span class="number">1000</span>) <span class="keyword">if</span> str(a * b) == str(a * b)[::<span class="number">-1</span>]))</span><br></pre></td></tr></table></figure></p><hr><p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isPalindrome = <span class="function">(<span class="params">s</span>) =&gt;</span> s === s.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>)</span><br><span class="line"><span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">100</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">const</span> s = (i * j)</span><br><span class="line">    <span class="keyword">if</span> (s &gt; max &amp;&amp; isPalindrome(s.toString())) &#123;</span><br><span class="line">      max = s</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(max)</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span></span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">palindromic?</span></span></span><br><span class="line">    digits = <span class="keyword">self</span>.to_s.split(<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> digits == digits.reverse</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">max = <span class="number">0</span></span><br><span class="line">(<span class="number">100</span>..<span class="number">999</span>).each <span class="keyword">do</span> <span class="params">|a|</span></span><br><span class="line">  (a..<span class="number">999</span>).each <span class="keyword">do</span> <span class="params">|b|</span></span><br><span class="line">    product = a * b</span><br><span class="line">    <span class="keyword">if</span> product &gt; max <span class="keyword">and</span> product.palindromic?</span><br><span class="line">      max = product</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts max</span><br></pre></td></tr></table></figure></p><hr><p>Go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsPalindrome</span><span class="params">(number <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">n := number</span><br><span class="line">reversed, digit := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">digit = n % <span class="number">10</span></span><br><span class="line">reversed = reversed*<span class="number">10</span> + digit</span><br><span class="line">n /= <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> number == reversed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">product, max := <span class="number">0</span>, <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> a := <span class="number">100</span>; a &lt; <span class="number">1000</span>; a++ &#123;</span><br><span class="line"><span class="keyword">for</span> b := a; b &lt; <span class="number">1000</span>; b++ &#123;</span><br><span class="line">product = a * b</span><br><span class="line"><span class="keyword">if</span> product &gt; max &amp;&amp; IsPalindrome(product) &#123;</span><br><span class="line">max = product</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(max)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">isPalindrome</span> ::  <span class="type">Integer</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">isPalindrome</span> n = show n == reverse (show n)</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> ::  <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ maximum [prod | a &lt;- [<span class="number">100.</span><span class="number">.999</span>], b &lt;- [a.<span class="number">.999</span>], <span class="keyword">let</span> prod = a * b, isPalindrome prod]</span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> palindrome? [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">seq</span></span> (<span class="name"><span class="builtin-name">str</span></span> n)) (<span class="name"><span class="builtin-name">reverse</span></span> (<span class="name"><span class="builtin-name">str</span></span> n))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> palindromes [limit]</span><br><span class="line">  (<span class="name"><span class="builtin-name">filter</span></span> palindrome? (<span class="name"><span class="builtin-name">for</span></span> [a (<span class="name"><span class="builtin-name">range</span></span> <span class="number">100</span> <span class="number">1000</span>) b (<span class="name"><span class="builtin-name">range</span></span> a <span class="number">1000</span>)] (<span class="name"><span class="builtin-name">*</span></span> a b))))</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">reduce</span></span> max (<span class="name">palindromes</span> <span class="number">1000</span>)))</span><br></pre></td></tr></table></figure></p><hr><p>Rust<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">is_palindrome</span></span>(number: <span class="built_in">u64</span>) -&gt; <span class="built_in">bool</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> n = number;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> reversed = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> digit = n % <span class="number">10</span>;</span><br><span class="line">        reversed = reversed * <span class="number">10</span> + digit;</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    number == reversed</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> largest = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="number">100</span>..<span class="number">1000</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> <span class="number">100</span>..<span class="number">1000</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> product = a * b;</span><br><span class="line">            <span class="keyword">if</span> product &gt; largest &amp;&amp; is_palindrome(product) &#123;</span><br><span class="line">                largest = product;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, largest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p004</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p004().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Computers are fast, so we can implement this solution directly without any clever math.</span></span><br><span class="line"><span class="comment"> * Note that the maximum product is 999 * 999, which fits in a Java int type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> maxPalin = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">100</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">100</span>; j &lt; <span class="number">1000</span>; j++) &#123;</span><br><span class="line"><span class="keyword">int</span> prod = i * j;</span><br><span class="line"><span class="keyword">if</span> (Library.isPalindrome(prod) &amp;&amp; prod &gt; maxPalin)</span><br><span class="line">maxPalin = prod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(maxPalin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PalindromeQ[x_] := <span class="keyword">IntegerDigits</span>[x] == <span class="keyword">Reverse</span>[<span class="keyword">IntegerDigits</span>[x]]</span><br><span class="line"><span class="keyword">Max</span>[<span class="keyword">Select</span>[<span class="keyword">Flatten</span>[<span class="keyword">Table</span>[i * j, &#123;i, 100, 999&#125;, &#123;j, 100, 999&#125;]], PalindromeQ]]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;A palindromic number reads the same both ways. The
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-003</title>
    <link href="onlookerliu.github.io/2018/02/10/Project-Euler-003/"/>
    <id>onlookerliu.github.io/2018/02/10/Project-Euler-003/</id>
    <published>2018-02-10T12:59:58.000Z</published>
    <updated>2018-02-28T13:07:01.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>The prime factors of 13195 are 5, 7, 13 and 29.</p><p>What is the largest prime factor of the number 600851475143 ?</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6857</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorize</span><span class="params">(n)</span>:</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="comment"># iterate over all even numbers first.</span></span><br><span class="line">    <span class="keyword">while</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        res.append(<span class="number">2</span>)</span><br><span class="line">        n //= <span class="number">2</span></span><br><span class="line">    <span class="comment"># try odd numbers up to sqrt(n)</span></span><br><span class="line">    limit = math.sqrt(n+<span class="number">1</span>)</span><br><span class="line">    i = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= limit:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            res.append(i)</span><br><span class="line">            n //= i</span><br><span class="line">            limit = math.sqrt(n+i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> n != <span class="number">1</span>:</span><br><span class="line">        res.append(n)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">print(max(factorize(<span class="number">600851475143</span>)))</span><br></pre></td></tr></table></figure></p><hr><p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> n = <span class="number">600851475143</span></span><br><span class="line"><span class="keyword">let</span> limit = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.sqrt(n))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">3</span>; i &lt;= limit; i += <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (n % i === <span class="number">0</span>) &#123;</span><br><span class="line">    n = <span class="built_in">Math</span>.floor(n / i)</span><br><span class="line">    limit = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.sqrt(n))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(n)</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorize</span><span class="params">(orig)</span></span></span><br><span class="line">  factors = &#123;&#125;</span><br><span class="line">  factors.default = <span class="number">0</span>     <span class="comment"># return 0 instead nil if key not found in hash</span></span><br><span class="line">  n = orig</span><br><span class="line">  i = <span class="number">2</span></span><br><span class="line">  sqi = <span class="number">4</span>                 <span class="comment"># square of i</span></span><br><span class="line">  <span class="keyword">while</span> sqi &lt;= n <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">while</span> n.modulo(i) == <span class="number">0</span> <span class="keyword">do</span></span><br><span class="line">      n /= i</span><br><span class="line">      factors[i] += <span class="number">1</span></span><br><span class="line">      <span class="comment"># puts "Found factor #&#123;i&#125;"</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="comment"># we take advantage of the fact that (i +1)**2 = i**2 + 2*i +1</span></span><br><span class="line">    sqi += <span class="number">2</span> * i + <span class="number">1</span></span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (n != <span class="number">1</span>) &amp;&amp; (n != orig)</span><br><span class="line">    factors[n] += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  factors</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts factorize(<span class="number">600851475143</span>).keys.max</span><br></pre></td></tr></table></figure></p><hr><p>Go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math"</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"math/big"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">eratosthenes</span><span class="params">(max <span class="keyword">int</span>)</span> []<span class="title">int</span></span> &#123;</span><br><span class="line">nums := <span class="built_in">make</span>([]<span class="keyword">int</span>, max)</span><br><span class="line"></span><br><span class="line">p := <span class="number">2</span> <span class="comment">// first prime, 2</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">i := p - <span class="number">1</span></span><br><span class="line"><span class="comment">// mark multiples not prime</span></span><br><span class="line"><span class="keyword">for</span> i += p; i &lt; max; i += p &#123;</span><br><span class="line">nums[i] = <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// find first unmarked number greater than p</span></span><br><span class="line"><span class="keyword">for</span> i = p; i &lt; max; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] != <span class="number">-1</span> &#123;</span><br><span class="line">p = i + <span class="number">1</span></span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// no unmarked numbers greater than p found; finished</span></span><br><span class="line"><span class="keyword">if</span> i == max &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// filter out all marked numbers</span></span><br><span class="line">primes := <span class="built_in">make</span>([]<span class="keyword">int</span>, max)</span><br><span class="line">j := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> nums &#123;</span><br><span class="line"><span class="keyword">if</span> nums[i] == <span class="number">0</span> &#123;</span><br><span class="line">primes[j] = i + <span class="number">1</span></span><br><span class="line">j++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> primes[:j]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n := <span class="built_in">new</span>(big.Int)</span><br><span class="line">n.SetString(<span class="string">"600851475143"</span>, <span class="number">10</span>)</span><br><span class="line">m := <span class="built_in">new</span>(big.Int)</span><br><span class="line">max := <span class="keyword">int</span>(math.Sqrt(<span class="number">600851475143</span>))</span><br><span class="line">primes := eratosthenes(max)</span><br><span class="line"><span class="comment">// find the largest prime factor of n</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="built_in">len</span>(primes) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;</span><br><span class="line">p := big.NewInt(<span class="keyword">int64</span>(primes[i]))</span><br><span class="line">m.Mod(n, p)</span><br><span class="line"><span class="keyword">if</span> m.Int64() == <span class="number">0</span> &#123;</span><br><span class="line">fmt.Println(p)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">primes</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">primes</span> = sieve [<span class="number">2.</span>.] <span class="keyword">where</span></span><br><span class="line">    sieve (p:xs) = p : sieve [x | x &lt;- xs, x `mod` p &gt; <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">factorize</span> :: <span class="type">Integer</span> -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">factorize</span> n = primeFactors n primes <span class="keyword">where</span></span><br><span class="line">    primeFactors <span class="number">1</span> _ = []</span><br><span class="line">    primeFactors m (p:ps) | m &lt; p * p = [m]</span><br><span class="line">                          | r == <span class="number">0</span> = p : primeFactors q (p:ps)</span><br><span class="line">                          | otherwise = primeFactors m ps</span><br><span class="line">                          <span class="keyword">where</span> (q, r) = quotRem m p</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ maximum $ factorize <span class="number">600851475143</span></span><br></pre></td></tr></table></figure></p><hr><p>Rust<br><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> n: <span class="built_in">u64</span> = <span class="number">600851475143</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> limit = n / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> i = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">while</span> i &lt; limit &#123;</span><br><span class="line">        <span class="keyword">while</span> n % i == <span class="number">0</span> &#123;</span><br><span class="line">            n = n / i;</span><br><span class="line">            limit = n / <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">"&#123;&#125;"</span>, n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p003</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p003().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * By the fundamental theorem of arithmetic, every integer n &gt; 1 has a unique factorization as a product of prime numbers.</span></span><br><span class="line"><span class="comment"> * In other words, the theorem says that n = p_0 * p_1 * ... * p_&#123;m-1&#125;, where each p_i &gt; 1 is prime but not necessarily unique.</span></span><br><span class="line"><span class="comment"> * Now if we take the number n and repeatedly divide out its smallest factor (which must also be prime), then the last</span></span><br><span class="line"><span class="comment"> * factor that we divide out must be the largest prime factor of n. For reference, 600851475143 = 71 * 839 * 1471 * 6857.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> n = <span class="number">600851475143L</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="keyword">long</span> p = smallestFactor(n);</span><br><span class="line"><span class="keyword">if</span> (p &lt; n)</span><br><span class="line">n /= p;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> Long.toString(n);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the smallest factor of n, which is in the range [2, n]. The result is always prime.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">smallestFactor</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt;= <span class="number">1</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">2</span>, end = Library.sqrt(n); i &lt;= end; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> n;  <span class="comment">// n itself is prime</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">First</span>[<span class="keyword">Last</span>[<span class="keyword">FactorInteger</span>[<span class="number">600851475143</span>]]]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h2&gt;&lt;p&gt;The prime factors of 13195 are 5, 7, 13 and 29
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-002</title>
    <link href="onlookerliu.github.io/2018/02/09/Project-Euler-002/"/>
    <id>onlookerliu.github.io/2018/02/09/Project-Euler-002/</id>
    <published>2018-02-09T12:42:19.000Z</published>
    <updated>2018-02-28T12:58:15.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p><p>$$<br>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …<br>$$</p><p>Find the sum of all the even-valued terms in the sequence which do not exceed four million.</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4613732</span><br></pre></td></tr></table></figure><hr><p>python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">()</span>:</span></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">x = <span class="number">1</span>  <span class="comment"># Represents the current Fibonacci number being processed</span></span><br><span class="line">y = <span class="number">2</span>  <span class="comment"># Represents the next Fibonacci number in the sequence</span></span><br><span class="line"><span class="keyword">while</span> x &lt;= <span class="number">4000000</span>:</span><br><span class="line"><span class="keyword">if</span> x % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">ans += x</span><br><span class="line">x, y = y, x + y</span><br><span class="line"><span class="keyword">return</span> str(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">print(compute())</span><br></pre></td></tr></table></figure></p><hr><p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> f = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">while</span> (f[<span class="number">0</span>] &lt; <span class="number">4e6</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (f[<span class="number">0</span>] % <span class="number">2</span> === <span class="number">0</span>) s+= f[<span class="number">0</span>]</span><br><span class="line">    f = [f[<span class="number">1</span>], f[<span class="number">0</span>]+f[<span class="number">1</span>]]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(s)</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">sum a, b = <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="keyword">while</span> b &lt; <span class="number">4000000</span></span><br><span class="line">  sum += b <span class="keyword">if</span> b.even?</span><br><span class="line">  a, b = b, a+b</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts sum</span><br></pre></td></tr></table></figure></p><hr><p>Go<br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a, b := <span class="number">1</span>, <span class="number">2</span>; b &lt;= <span class="number">4e6</span>; a, b = b, a+b &#123;</span><br><span class="line">        <span class="keyword">if</span> b%<span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">            sum += b</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fibs</span> :: [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">fibs</span> = <span class="number">0</span>:<span class="number">1</span>:zipWith (+) fibs (tail fibs)</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span>()</span><br><span class="line"><span class="title">main</span> = print $sum $ filter even $ takeWhile (&lt;<span class="number">4000000</span>) fibs</span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">def</span></span> fibs (<span class="name">lazy-cat</span> [<span class="number">0</span> <span class="number">1</span>] (<span class="name"><span class="builtin-name">map</span></span> + (<span class="name"><span class="builtin-name">rest</span></span> fibs) fibs)))</span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">reduce</span></span> + (<span class="name"><span class="builtin-name">filter</span></span> even? (<span class="name"><span class="builtin-name">take-while</span></span> #(<span class="name"><span class="builtin-name">&lt;</span></span> % <span class="number">4000000</span>) fibs))))</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">For</span>[i = <span class="number">0</span>, (f = <span class="keyword">Fibonacci</span>[i]) &lt;= <span class="number">4000000</span>, i++,</span><br><span class="line">  <span class="keyword">If</span>[<span class="keyword">EvenQ</span>[f],</span><br><span class="line">    s += f]]</span><br><span class="line">s</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p002</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p002().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Computers are fast, so we can implement this solution directly without any clever math.</span></span><br><span class="line"><span class="comment"> * Because the Fibonacci sequence grows exponentially by a factor of 1.618, the sum is</span></span><br><span class="line"><span class="comment"> * bounded above by a small multiple of 4 million. Thus the answer fits in a Java int type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;  <span class="comment">// Represents the current Fibonacci number being processed</span></span><br><span class="line"><span class="keyword">int</span> y = <span class="number">2</span>;  <span class="comment">// Represents the next Fibonacci number in the sequence</span></span><br><span class="line"><span class="keyword">while</span> (x &lt;= <span class="number">4000000</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (x % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">sum += x;</span><br><span class="line"><span class="keyword">int</span> z = x + y;</span><br><span class="line">x = y;</span><br><span class="line">y = z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h2&gt;&lt;p&gt;Each new term in the Fibonacci sequence is generat
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project Euler 001</title>
    <link href="onlookerliu.github.io/2018/02/08/Project-Euler-001/"/>
    <id>onlookerliu.github.io/2018/02/08/Project-Euler-001/</id>
    <published>2018-02-08T11:41:03.000Z</published>
    <updated>2018-02-28T12:54:53.043Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we<br>get 3, 5, 6 and 9. The sum of these multiples is 23.</p><p>Find the sum of all the multiples of 3 or 5 below 1000.</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">233168</span><br></pre></td></tr></table></figure><hr><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> || i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This forces every solution class to implement a common interface,</span></span><br><span class="line"><span class="comment">// which is helpful for unit testing like in the EulerTest implementation.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p001</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p001().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Computers are fast, so we can implement this solution directly without any clever math.</span></span><br><span class="line"><span class="comment"> * A conservative upper bound for the sum is 1000 * 1000, which fits in a Java int type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> || i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Mathematica</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Total</span>[<span class="keyword">Select</span>[<span class="keyword">Range</span>[<span class="number">999</span>], <span class="keyword">Function</span>[x, <span class="keyword">Mod</span>[x, <span class="number">3</span>] == <span class="number">0</span> || <span class="keyword">Mod</span>[x, <span class="number">5</span>] == <span class="number">0</span>]]]</span><br></pre></td></tr></table></figure><hr><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">print(sum(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>) <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) <span class="keyword">or</span> (i % <span class="number">5</span> == <span class="number">0</span>)))</span><br></pre></td></tr></table></figure><hr><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">3</span> === <span class="number">0</span> || i % <span class="number">5</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    s += i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(s)</span><br></pre></td></tr></table></figure><hr><p>Ruby</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="number">1000</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> i % <span class="number">5</span> == <span class="number">0</span></span><br><span class="line">    sum += i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts sum</span><br></pre></td></tr></table></figure><hr><p>Go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">3</span> == <span class="number">0</span> || i%<span class="number">5</span> == <span class="number">0</span> &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Haskell</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> ::  <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ sum [n | n &lt;- [<span class="number">1.</span><span class="number">.999</span>], or [(n `mod` <span class="number">3</span> == <span class="number">0</span>), (n `mod` <span class="number">5</span> == <span class="number">0</span>)]]</span><br></pre></td></tr></table></figure><hr><p>Clojure</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> multiple? [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">or</span></span> (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">rem</span></span> n <span class="number">3</span>) <span class="number">0</span>) (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">rem</span></span> n <span class="number">5</span>) <span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">reduce</span></span> + (<span class="name"><span class="builtin-name">filter</span></span> multiple? (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1000</span>))))</span><br></pre></td></tr></table></figure><hr><p>Scheme</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">display</span></span></span><br><span class="line">  (<span class="name">reduce</span> + <span class="number">0</span></span><br><span class="line">          (<span class="name">filter</span></span><br><span class="line">            (<span class="name"><span class="builtin-name">lambda</span></span> (n)</span><br><span class="line">              (<span class="name"><span class="builtin-name">or</span></span> (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">remainder</span></span> n <span class="number">3</span>) <span class="number">0</span>) (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">remainder</span></span> n <span class="number">5</span>) <span class="number">0</span>)))</span><br><span class="line">            (<span class="name">iota</span> <span class="number">1000</span>))))</span><br><span class="line">(<span class="name"><span class="builtin-name">newline</span></span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h2&gt;&lt;p&gt;If we list all the natural numbers below 10 th
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 002</title>
    <link href="onlookerliu.github.io/2017/12/30/LeetCode-Notes-002/"/>
    <id>onlookerliu.github.io/2017/12/30/LeetCode-Notes-002/</id>
    <published>2017-12-29T17:39:34.000Z</published>
    <updated>2018-02-28T11:50:15.840Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Add-Binary"><a href="#Add-Binary" class="headerlink" title="Add Binary"></a>Add Binary</h3><p>Given two binary strings, return their sum (also a binary string).</p><p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; a</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; b</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addBinary = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  a = a.split(<span class="string">''</span>).reverse();</span><br><span class="line">  b = b.split(<span class="string">''</span>).reverse();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> c = [];</span><br><span class="line">  <span class="keyword">var</span> add = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">Math</span>.max(a.length, b.length);i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = (a[i] === <span class="literal">undefined</span> ? <span class="number">0</span> : <span class="built_in">Number</span>(a[i])) + (b[i] === <span class="literal">undefined</span> ? <span class="number">0</span>: <span class="built_in">Number</span>(b[i])) + add;</span><br><span class="line">    c[i] = sum &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= <span class="number">2</span>) </span><br><span class="line">      add = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      add = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (add)</span><br><span class="line">    c[len] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> c.reverse().join(<span class="string">''</span>).toString();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Add-Digit"><a href="#Add-Digit" class="headerlink" title="Add Digit"></a>Add Digit</h3><p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p><p><strong>For example:</strong></p><p>Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.</p><p><strong>Follow up:</strong><br>Could you do it without any loop/recursion in O(1) runtime?</p><p><strong>Credits:</strong><br>Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addDigits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(num.toString().length !== <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (num) &#123;</span><br><span class="line">      sum += num % <span class="number">10</span>;</span><br><span class="line">      num = ~~(num / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    num = sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Add-Strings"><a href="#Add-Strings" class="headerlink" title="Add Strings"></a>Add Strings</h3><p>Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.</p><p>Note:</p><ol><li>The length of both num1 and num2 is &lt; 5100.</li><li>Both num1 and num2 contains only digits 0-9.</li><li>Both num1 and num2 does not contain any leading zero.</li><li>You must not use any built-in BigInteger library or convert the inputs to integer directly.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; num1</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; num2</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addStrings = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [i, j] = [num1.length, num2.length];</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">let</span> add = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  i -= <span class="number">1</span>, j -= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( ; i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = i &gt;= <span class="number">0</span> ? +num1[i] : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> b = j &gt;= <span class="number">0</span> ? +num2[j] : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = a + b + add;</span><br><span class="line">    ans = sum % <span class="number">10</span> + ans;</span><br><span class="line">    add = ~~(sum / <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add &amp;&amp; (ans = add + ans);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Add-Binary&quot;&gt;&lt;a href=&quot;#Add-Binary&quot; class=&quot;headerlink&quot; title=&quot;Add Binary&quot;&gt;&lt;/a&gt;Add Binary&lt;/h3&gt;&lt;p&gt;Given two binary strings, return their
      
    
    </summary>
    
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>A simple Metropolis-Hastings MCMC in R</title>
    <link href="onlookerliu.github.io/2017/12/29/A-simple-Metropolis-Hastings-MCMC-in-R/"/>
    <id>onlookerliu.github.io/2017/12/29/A-simple-Metropolis-Hastings-MCMC-in-R/</id>
    <published>2017-12-28T17:47:23.000Z</published>
    <updated>2018-02-28T15:55:23.796Z</updated>
    
    <content type="html"><![CDATA[<p>While there are certainly good software packages out there to do the job for you, notably BUGS or JAGS, it is instructive to program a simple MCMC yourself. In this post, I give an educational example of the Bayesian equivalent of a linear regression, sampled by an MCMC with Metropolis-Hastings steps, based on an earlier version which I did to together with Tamara Münkemüller. Since first publishing this post, I have made a few small modifications to improve clarity. A similar post on Metropolis-Hastings MCMC algorithms by Darren Wilkinson is also worth looking at. More on analyzing the results of this algorithm can be found in a recent post.</p><h2 id="Creating-test-data"><a href="#Creating-test-data" class="headerlink" title="Creating test data"></a>Creating test data</h2><p>As a first step, we create some test data that will be used to fit our model. Let’s assume a linear relationship between the predictor and the response variable, so we take a linear model and add some noise.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">trueA &lt;- <span class="number">5</span></span><br><span class="line">trueB &lt;- <span class="number">0</span></span><br><span class="line">trueSd &lt;- <span class="number">10</span></span><br><span class="line">sampleSize &lt;- <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create independent x-values</span></span><br><span class="line">x &lt;- (-(sampleSize-<span class="number">1</span>)/<span class="number">2</span>):((sampleSize-<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line"><span class="comment"># create dependent values according to ax + b + N(0,sd)</span></span><br><span class="line">y &lt;-  trueA * x + trueB + rnorm(n=sampleSize,mean=<span class="number">0</span>,sd=trueSd)</span><br><span class="line"></span><br><span class="line">plot(x,y, main=<span class="string">"Test Data"</span>)</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://oye4atjxc.bkt.clouddn.com/machineLearning/MCMC/output_2_0.png" width="60%"><br></div><p>I balanced x values around zero to “de-correlate” slope and intercept. The result should look something like the figure to the above.</p><h2 id="Defining-the-statistical-model"><a href="#Defining-the-statistical-model" class="headerlink" title="Defining the statistical model"></a>Defining the statistical model</h2><p>The next step is to specify the statistical model. We already know that the data was created with a linear relationship $y = a*x + b$ between $x$ and $y$ and a normal error model $N(0,sd)$ with standard deviation $sd$, so let’s use the same model for the fit and see if we can retrieve our original parameter values.</p><h2 id="Derive-the-likelihood-function-from-the-model"><a href="#Derive-the-likelihood-function-from-the-model" class="headerlink" title="Derive the likelihood function from the model"></a>Derive the likelihood function from the model</h2><p>For estimating parameters in a Bayesian analysis, we need to derive the likelihood function for the model that we want to fit. The likelihood is the probability (density) with which we would expect the observed data to occur conditional on the parameters of the model that we look at. So, given that our linear model $y = b + a<em>x + N(0,sd)$ takes the parameters $(a, b, sd)$ as an input, we have to return the probability of obtaining the test data above under this model (this sounds more complicated as it is, as you see in the code, we simply calculate the difference between predictions $y = b + a</em>x$ and the observed $y$, and then we have to look up the probability densities (using <code>dnorm</code>) for such deviations to occur.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">likelihood &lt;- <span class="keyword">function</span>(param)&#123;</span><br><span class="line">    a = param[<span class="number">1</span>]</span><br><span class="line">    b = param[<span class="number">2</span>]</span><br><span class="line">    sd = param[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    pred = a*x + b</span><br><span class="line">    singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = <span class="literal">T</span>)</span><br><span class="line">    sumll = sum(singlelikelihoods)</span><br><span class="line">    <span class="keyword">return</span>(sumll)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example: plot the likelihood profile of the slope a</span></span><br><span class="line">slopevalues &lt;- <span class="keyword">function</span>(x)&#123;<span class="keyword">return</span>(likelihood(c(x, trueB, trueSd)))&#125;</span><br><span class="line">slopelikelihoods &lt;- lapply(seq(<span class="number">3</span>, <span class="number">7</span>, by=<span class="number">.05</span>), slopevalues )</span><br><span class="line">plot (seq(<span class="number">3</span>, <span class="number">7</span>, by=<span class="number">.05</span>), slopelikelihoods , type=<span class="string">"l"</span>, xlab = <span class="string">"values of slope parameter a"</span>, ylab = <span class="string">"Log likelihood"</span>)</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://oye4atjxc.bkt.clouddn.com/machineLearning/MCMC/output_5_0.png" width="60%"><br></div><p>As an illustration, the last lines of the code plot the Likelihood for a range of parameter values of the slope parameter a. The result should look something like the plot to the above.</p><h2 id="Why-we-work-with-logarithms"><a href="#Why-we-work-with-logarithms" class="headerlink" title="Why we work with logarithms"></a>Why we work with logarithms</h2><p>You might have noticed that I return the logarithm of the probabilities in the likelihood function, which is also the reason why I sum the probabilities of all our datapoints (the logarithm of a product equals the sum of the logarithms). Why do we do this?</p><p>You don’t have to, but it’s strongly advisable because likelihoods, where a lot of small probabilities are multiplied, can get ridiculously small pretty fast (something like $10^-34$). At some stage, computer programs are getting into numerical rounding or underflow problems then. So, bottom-line: when you program something with likelihoods, always use logarithms!!!</p><h2 id="Defining-the-prior"><a href="#Defining-the-prior" class="headerlink" title="Defining the prior"></a>Defining the prior</h2><p>As a second step, as always in Bayesian statistics, we have to specify a <a href="https://en.wikipedia.org/wiki/Prior_probability" target="_blank" rel="noopener">prior distribution</a> for each parameter. To make it easy, I used uniform distributions and normal distributions for all three parameters. Some additional information for the “professionals”, skip this when you don’t understand what I’m talking about: while this choice can be considered pretty <a href="https://en.wikipedia.org/wiki/Prior_probability#Uninformative_priors" target="_blank" rel="noopener">“uninformative”</a> for the slope and intercept parameters, it is not really uninformative for the standard deviations. An uninformative prior for the latter would usually be scale with $1/sigma$ (if you want to understand the reason, see <a href="https://en.wikipedia.org/wiki/Jeffreys_prior#Gaussian_distribution_with_standard_deviation_parameter" target="_blank" rel="noopener">here</a>. This stuff is important when you seriously dive into Bayesian statistics, but I didn’t want to make the code more confusing here.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prior distribution</span></span><br><span class="line">prior &lt;- <span class="keyword">function</span>(param)&#123;</span><br><span class="line">    a = param[<span class="number">1</span>]</span><br><span class="line">    b = param[<span class="number">2</span>]</span><br><span class="line">    sd = param[<span class="number">3</span>]</span><br><span class="line">    aprior = dunif(a, min=<span class="number">0</span>, max=<span class="number">10</span>, log = <span class="literal">T</span>)</span><br><span class="line">    bprior = dnorm(b, sd = <span class="number">5</span>, log = <span class="literal">T</span>)</span><br><span class="line">    sdprior = dunif(sd, min=<span class="number">0</span>, max=<span class="number">30</span>, log = <span class="literal">T</span>)</span><br><span class="line">    <span class="keyword">return</span>(aprior+bprior+sdprior)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-posterior"><a href="#The-posterior" class="headerlink" title="The posterior"></a>The posterior</h2><p>The product of prior and likelihood is the actual quantity the MCMC will be working on. This function is called the <a href="https://en.wikipedia.org/wiki/Posterior_probability" target="_blank" rel="noopener">posterior</a> (or to be exact, it’s called the posterior after it’s normalized, which the MCMC will do for us, but let’s not be picky for the moment). Again, here we work with the sum because we work with logarithms.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">posterior &lt;- <span class="keyword">function</span>(param)&#123;</span><br><span class="line">   <span class="keyword">return</span> (likelihood(param) + prior(param))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-MCMC"><a href="#The-MCMC" class="headerlink" title="The MCMC"></a>The MCMC</h2><p>Now, here comes the actual <a href="https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm" target="_blank" rel="noopener">Metropolis-Hastings algorithm</a>. One of the most frequent applications of this algorithm (as in this example) is sampling from the posterior density in Bayesian statistics. In principle, however, the algorithm may be used to sample from any integrable function. So, the aim of this algorithm is to jump around in parameter space, but in a way that the probability to be at a point is proportional to the function we sample from (this is usually called the target function). In our case this is the posterior defined above.</p><p>This is achieved by</p><ol><li>Starting at a random parameter value</li><li>Choosing a new parameter value close to the old value based on some probability density that is called the proposal function</li><li>Jumping to this new point with a probability p(new)/p(old), where p is the target function, and $p&gt;1$ means jumping as well</li></ol><p>It’s fun to think about why that works, but for the moment I can assure you it does – when we run this algorithm, distribution of the parameters it visits converges to the target distribution $p$. So, let’s get this in R:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######## Metropolis algorithm ################</span></span><br><span class="line"></span><br><span class="line">proposalfunction &lt;- <span class="keyword">function</span>(param)&#123;</span><br><span class="line">    <span class="keyword">return</span>(rnorm(<span class="number">3</span>,mean = param, sd= c(<span class="number">0.1</span>,<span class="number">0.5</span>,<span class="number">0.3</span>)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run_metropolis_MCMC &lt;- <span class="keyword">function</span>(startvalue, iterations)&#123;</span><br><span class="line">    chain = array(dim = c(iterations+<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    chain[<span class="number">1</span>,] = startvalue</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:iterations)&#123;</span><br><span class="line">        proposal = proposalfunction(chain[i,])</span><br><span class="line"></span><br><span class="line">        probab = exp(posterior(proposal) - posterior(chain[i,]))</span><br><span class="line">        <span class="keyword">if</span> (runif(<span class="number">1</span>) &lt; probab)&#123;</span><br><span class="line">            chain[i+<span class="number">1</span>,] = proposal</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            chain[i+<span class="number">1</span>,] = chain[i,]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(chain)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startvalue = c(<span class="number">4</span>,<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">chain = run_metropolis_MCMC(startvalue, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">burnIn = <span class="number">5000</span></span><br><span class="line">acceptance = <span class="number">1</span>-mean(duplicated(chain[-(<span class="number">1</span>:burnIn),]))</span><br></pre></td></tr></table></figure><p>Again, working with the logarithms of the posterior might be a bit confusing at first, in particular when you look at the line where the acceptance probability is calculated (probab = exp(posterior(proposal) – posterior(chain[i,]))). To understand why we do this, note that $p1/p2 = exp[log(p1)-log(p2)]$.</p><p>The first steps of the algorithm may be biased by the initial value, and are therefore usually discarded for the further analysis (burn-in time). An interesting output to look at is the acceptance rate: how often was a proposal rejected by the metropolis-hastings acceptance criterion? The acceptance rate can be influenced by the proposal function: generally, the closer the proposals are, the larger the acceptance rate. Very high acceptance rates, however, are usually not beneficial: this means that the algorithms is “staying” at the same point, which results in a suboptimal probing of the parameter space (mixing). It can be shown that acceptance rates between 20% and 30% are optimal for typical applications (more on that here).</p><p>Finally, we can plot the results. There are more elegant ways of plotting this which I discuss in another recent post, so check this out, but for the moment I didn’t want to use any packages, so we do it the hard way:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Summary: #######################</span></span><br><span class="line"></span><br><span class="line">par(mfrow = c(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">hist(chain[-(<span class="number">1</span>:burnIn),<span class="number">1</span>],nclass=<span class="number">30</span>, , main=<span class="string">"Posterior of a"</span>, xlab=<span class="string">"True value = red line"</span> )</span><br><span class="line">abline(v = mean(chain[-(<span class="number">1</span>:burnIn),<span class="number">1</span>]))</span><br><span class="line">abline(v = trueA, col=<span class="string">"red"</span> )</span><br><span class="line">hist(chain[-(<span class="number">1</span>:burnIn),<span class="number">2</span>],nclass=<span class="number">30</span>, main=<span class="string">"Posterior of b"</span>, xlab=<span class="string">"True value = red line"</span>)</span><br><span class="line">abline(v = mean(chain[-(<span class="number">1</span>:burnIn),<span class="number">2</span>]))</span><br><span class="line">abline(v = trueB, col=<span class="string">"red"</span> )</span><br><span class="line">hist(chain[-(<span class="number">1</span>:burnIn),<span class="number">3</span>],nclass=<span class="number">30</span>, main=<span class="string">"Posterior of sd"</span>, xlab=<span class="string">"True value = red line"</span>)</span><br><span class="line">abline(v = mean(chain[-(<span class="number">1</span>:burnIn),<span class="number">3</span>]) )</span><br><span class="line">abline(v = trueSd, col=<span class="string">"red"</span> )</span><br><span class="line">plot(chain[-(<span class="number">1</span>:burnIn),<span class="number">1</span>], type = <span class="string">"l"</span>, xlab=<span class="string">"True value = red line"</span> , main = <span class="string">"Chain values of a"</span>, )</span><br><span class="line">abline(h = trueA, col=<span class="string">"red"</span> )</span><br><span class="line">plot(chain[-(<span class="number">1</span>:burnIn),<span class="number">2</span>], type = <span class="string">"l"</span>, xlab=<span class="string">"True value = red line"</span> , main = <span class="string">"Chain values of b"</span>, )</span><br><span class="line">abline(h = trueB, col=<span class="string">"red"</span> )</span><br><span class="line">plot(chain[-(<span class="number">1</span>:burnIn),<span class="number">3</span>], type = <span class="string">"l"</span>, xlab=<span class="string">"True value = red line"</span> , main = <span class="string">"Chain values of sd"</span>, )</span><br><span class="line">abline(h = trueSd, col=<span class="string">"red"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># for comparison:</span></span><br><span class="line">summary(lm(y~x))</span><br></pre></td></tr></table></figure><p>​<br>    Call:<br>    lm(formula = y ~ x)</p><pre><code>Residuals:    Min      1Q  Median      3Q     Max-15.844  -5.834  -1.342   5.479  19.348Coefficients:            Estimate Std. Error t value Pr(&gt;|t|)(Intercept)  -0.7967     1.6512  -0.482    0.633x             5.0498     0.1846  27.354   &lt;2e-16 ***---Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1Residual standard error: 9.193 on 29 degrees of freedomMultiple R-squared:  0.9627,    Adjusted R-squared:  0.9614F-statistic: 748.3 on 1 and 29 DF,  p-value: &lt; 2.2e-16</code></pre><div align="center"><br><img src="http://oye4atjxc.bkt.clouddn.com/machineLearning/MCMC/output_13_1.png" width="100%"><br></div><p>The resulting plots should look something like the plot above. You see that we retrieve more or less the original parameters that were used to create our data, and you also see that we get a certain area around the highest posterior values that also have some support by the data, which is the Bayesian equivalent of confidence intervals.</p><p><strong>Remark</strong>:</p><p>The upper row shows posterior estimates for slope (a), intercept (b) and standard deviation of the error (sd). The lower row shows the Markov Chain of parameter values.</p><h2 id="References-for-further-reading"><a href="#References-for-further-reading" class="headerlink" title="References for further reading"></a>References for further reading</h2><ol><li>Gelman, A.; Carlin, J. B.; Stern, H. S. &amp; Rubin, D. B. (2003) Bayesian Data Analysis</li><li>Andrieu, C.; de Freitas, N.; Doucet, A. &amp; Jordan, M. I. (2003) An introduction to MCMC for machine learning Mach. Learning, Springer, 50, 5-43</li><li>Hartig, F.; Calabrese, J. M.; Reineking, B.; Wiegand, T. &amp; Huth, A. (2011) Statistical inference for stochastic simulation models – theory and application Ecol. Lett., 14, 816–827.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;While there are certainly good software packages out there to do the job for you, notably BUGS or JAGS, it is instructive to program a si
      
    
    </summary>
    
    
      <category term="r" scheme="onlookerliu.github.io/tags/r/"/>
    
  </entry>
  
  <entry>
    <title>Decision_Tree_Regression</title>
    <link href="onlookerliu.github.io/2017/12/29/Decision-Tree-Regression/"/>
    <id>onlookerliu.github.io/2017/12/29/Decision-Tree-Regression/</id>
    <published>2017-12-28T17:45:47.000Z</published>
    <updated>2017-12-28T17:46:23.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Decision-Tree-Regression-using-DecisionTrees-jl"><a href="#Decision-Tree-Regression-using-DecisionTrees-jl" class="headerlink" title="Decision Tree Regression (using DecisionTrees.jl)"></a>Decision Tree Regression (using DecisionTrees.jl)</h1><p>Adapted from <a href="http://scikit-learn.org/stable/auto_examples/tree/plot_tree_regression.html" target="_blank" rel="noopener">http://scikit-learn.org/stable/auto_examples/tree/plot_tree_regression.html</a></p><p>A 1D regression with decision tree.</p><p>The decision trees is used to fit a sine curve with addition noisy observation. As a result, it learns local linear regressions approximating the sine curve.</p><p>We can see that if the maximum depth of the tree (controlled by the max_depth parameter) is set too high, the decision trees learn too fine details of the training data and learn from the noise, i.e. they overfit.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> DecisionTree</span><br><span class="line"><span class="keyword">using</span> ScikitLearn</span><br><span class="line"><span class="keyword">using</span> PyPlot</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a random dataset</span></span><br><span class="line">srand(<span class="number">42</span>)</span><br><span class="line">X = sort(<span class="number">5</span> * rand(<span class="number">80</span>))</span><br><span class="line">XX = reshape(X, <span class="number">80</span>, <span class="number">1</span>)</span><br><span class="line">y = sin(X)</span><br><span class="line">y[<span class="number">1</span>:<span class="number">5</span>:<span class="keyword">end</span>] += <span class="number">3</span> * (<span class="number">0.5</span> - rand(<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit regression model</span></span><br><span class="line">regr_1 = DecisionTreeRegressor()</span><br><span class="line">regr_2 = DecisionTreeRegressor(pruning_purity_threshold=<span class="number">0.05</span>)</span><br><span class="line">regr_3 = RandomForestRegressor(ntrees=<span class="number">20</span>)</span><br><span class="line">fit!(regr_1, XX, y)</span><br><span class="line">fit!(regr_2, XX, y)</span><br><span class="line">fit!(regr_3, XX, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Predict</span></span><br><span class="line">X_test = <span class="number">0</span>:<span class="number">0.01</span>:<span class="number">5.0</span></span><br><span class="line">y_1 = predict(regr_1, hcat(X_test))</span><br><span class="line">y_2 = predict(regr_2, hcat(X_test))</span><br><span class="line">y_3 = predict(regr_3, hcat(X_test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the results</span></span><br><span class="line">scatter(X, y, c=<span class="string">"k"</span>, label=<span class="string">"data"</span>)</span><br><span class="line">plot(X_test, y_1, c=<span class="string">"g"</span>, label=<span class="string">"no pruning"</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plot(X_test, y_2, c=<span class="string">"r"</span>, label=<span class="string">"pruning_purity_threshold=0.05"</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plot(X_test, y_3, c=<span class="string">"b"</span>, label=<span class="string">"RandomForestClassifier"</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">xlabel(<span class="string">"data"</span>)</span><br><span class="line">ylabel(<span class="string">"target"</span>)</span><br><span class="line">title(<span class="string">"Decision Tree Regression"</span>)</span><br><span class="line">legend(prop=<span class="built_in">Dict</span>(<span class="string">"size"</span>=&gt;<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p><img src="http://oye4atjxc.bkt.clouddn.com/leanote/Decision_Tree_Regression/output_3_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Decision-Tree-Regression-using-DecisionTrees-jl&quot;&gt;&lt;a href=&quot;#Decision-Tree-Regression-using-DecisionTrees-jl&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="julia" scheme="onlookerliu.github.io/tags/julia/"/>
    
  </entry>
  
  <entry>
    <title>Classifier_Comparison</title>
    <link href="onlookerliu.github.io/2017/12/29/Classifier-Comparison/"/>
    <id>onlookerliu.github.io/2017/12/29/Classifier-Comparison/</id>
    <published>2017-12-28T17:44:21.000Z</published>
    <updated>2017-12-28T17:44:54.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Classifier-Comparison"><a href="#Classifier-Comparison" class="headerlink" title="Classifier Comparison"></a>Classifier Comparison</h1><p>Adapted from <a href="http://scikit-learn.org/stable/auto_examples/classification/plot_classifier_comparison.html" target="_blank" rel="noopener">http://scikit-learn.org/stable/auto_examples/classification/plot_classifier_comparison.html</a></p><p>A comparison of a several classifiers in scikit-learn on synthetic datasets. The point of this example is to illustrate the nature of decision boundaries of different classifiers. This should be taken with a grain of salt, as the intuition conveyed by these examples does not necessarily carry over to real datasets.</p><p>Particularly in high-dimensional spaces, data can more easily be separated linearly and the simplicity of classifiers such as naive Bayes and linear SVMs might lead to better generalization than is achieved by other classifiers.</p><p>The plots show training points in solid colors and testing points semi-transparent. The lower right shows the classification accuracy on the test set.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python Code source: Gaël Varoquaux</span></span><br><span class="line"><span class="comment">#                     Andreas Müller</span></span><br><span class="line"><span class="comment"># Julia adaptation: Cédric St-Jean</span></span><br><span class="line"><span class="comment"># Modified for documentation by Jaques Grobler</span></span><br><span class="line"><span class="comment"># License: BSD 3 clause</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ScikitLearn</span><br><span class="line"><span class="keyword">using</span> PyCall</span><br><span class="line"><span class="keyword">using</span> PyPlot</span><br><span class="line"><span class="keyword">using</span> ScikitLearn.CrossValidation: train_test_split</span><br><span class="line"><span class="meta">@pyimport</span> matplotlib.colors as mplc</span><br><span class="line"><span class="meta">@sk_import</span> preprocessing: StandardScaler</span><br><span class="line"><span class="meta">@sk_import</span> datasets: (make_moons, make_circles, make_classification)</span><br><span class="line"><span class="meta">@sk_import</span> neighbors: KNeighborsClassifier</span><br><span class="line"><span class="meta">@sk_import</span> svm: SVC</span><br><span class="line"><span class="meta">@sk_import</span> tree: DecisionTreeClassifier</span><br><span class="line"><span class="meta">@sk_import</span> ensemble: (RandomForestClassifier, AdaBoostClassifier)</span><br><span class="line"><span class="meta">@sk_import</span> naive_bayes: GaussianNB</span><br><span class="line"><span class="meta">@sk_import</span> discriminant_analysis: (LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis)</span><br><span class="line"><span class="keyword">using</span> ScikitLearn.Utils: meshgrid</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">h = <span class="number">.02</span>  <span class="comment"># step size in the mesh</span></span><br><span class="line"></span><br><span class="line">names = [<span class="string">"Nearest Neighbors"</span>, <span class="string">"Linear SVM"</span>, <span class="string">"RBF SVM"</span>, <span class="string">"Decision Tree"</span>,</span><br><span class="line">         <span class="string">"Random Forest"</span>, <span class="string">"AdaBoost"</span>, <span class="string">"Naive Bayes"</span>, <span class="string">"Linear Discriminant Analysis"</span>,</span><br><span class="line">         <span class="string">"Quadratic Discriminant Analysis"</span>]</span><br><span class="line">classifiers = [</span><br><span class="line">    KNeighborsClassifier(<span class="number">3</span>),</span><br><span class="line">    SVC(kernel=<span class="string">"linear"</span>, C=<span class="number">0.025</span>),</span><br><span class="line">    SVC(gamma=<span class="number">2</span>, C=<span class="number">1</span>),</span><br><span class="line">    DecisionTreeClassifier(max_depth=<span class="number">5</span>),</span><br><span class="line">    RandomForestClassifier(max_depth=<span class="number">5</span>, n_estimators=<span class="number">10</span>, max_features=<span class="number">1</span>),</span><br><span class="line">    AdaBoostClassifier(),</span><br><span class="line">    GaussianNB(),</span><br><span class="line">    LinearDiscriminantAnalysis(),</span><br><span class="line">    QuadraticDiscriminantAnalysis()]</span><br><span class="line"></span><br><span class="line">X, y = make_classification(n_features=<span class="number">2</span>, n_redundant=<span class="number">0</span>, n_informative=<span class="number">2</span>,</span><br><span class="line">                           random_state=<span class="number">1</span>, n_clusters_per_class=<span class="number">1</span>)</span><br><span class="line">srand(<span class="number">42</span>)</span><br><span class="line">X += <span class="number">2</span> * rand(size(X)...)</span><br><span class="line">linearly_separable = (X, y)</span><br><span class="line"></span><br><span class="line">datasets = [make_moons(noise=<span class="number">0.3</span>, random_state=<span class="number">0</span>),</span><br><span class="line">            make_circles(noise=<span class="number">0.2</span>, factor=<span class="number">0.5</span>, random_state=<span class="number">1</span>),</span><br><span class="line">            linearly_separable</span><br><span class="line">            ];</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">fig = figure(figsize=(<span class="number">27</span>, <span class="number">9</span>))</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="comment"># iterate over datasets</span></span><br><span class="line"><span class="keyword">for</span> ds <span class="keyword">in</span> datasets</span><br><span class="line">    <span class="comment"># preprocess dataset, split into training and test part</span></span><br><span class="line">    X, y = ds</span><br><span class="line">    X = fit_transform!(StandardScaler(), X)</span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">.4</span>)</span><br><span class="line"></span><br><span class="line">    x_min, x_max = minimum(X[:, <span class="number">1</span>]) - <span class="number">.5</span>, maximum(X[:, <span class="number">1</span>]) + <span class="number">.5</span></span><br><span class="line">    y_min, y_max = minimum(X[:, <span class="number">2</span>]) - <span class="number">.5</span>, maximum(X[:, <span class="number">2</span>]) + <span class="number">.5</span></span><br><span class="line">    xx, yy = meshgrid(x_min:h:x_max, y_min:h:y_max)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># just plot the dataset first</span></span><br><span class="line">    cm = PyPlot.cm[:RdBu]</span><br><span class="line">    cm_bright = mplc.ListedColormap([<span class="string">"#FF0000"</span>, <span class="string">"#0000FF"</span>])</span><br><span class="line">    ax = subplot(length(datasets), length(classifiers) + <span class="number">1</span>, i)</span><br><span class="line">    <span class="comment"># Plot the training points</span></span><br><span class="line">    ax[:scatter](X_train[:, <span class="number">1</span>], X_train[:, <span class="number">2</span>], c=y_train, cmap=cm_bright)</span><br><span class="line">    <span class="comment"># and testing points</span></span><br><span class="line">    ax[:scatter](X_test[:, <span class="number">1</span>], X_test[:, <span class="number">2</span>], c=y_test, cmap=cm_bright, alpha=<span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">    ax[:set_xlim](minimum(xx), maximum(xx))</span><br><span class="line">    ax[:set_ylim](minimum(yy), maximum(yy))</span><br><span class="line">    ax[:set_xticks](())</span><br><span class="line">    ax[:set_yticks](())</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># iterate over classifiers</span></span><br><span class="line">    <span class="keyword">for</span> (name, clf) <span class="keyword">in</span> zip(names, classifiers)</span><br><span class="line">        ax = subplot(length(datasets), length(classifiers) + <span class="number">1</span>, i)</span><br><span class="line">        fit!(clf, X_train, y_train)</span><br><span class="line">        scor = score(clf, X_test, y_test)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Plot the decision boundary. For that, we will assign a color to each</span></span><br><span class="line">        <span class="comment"># point in the mesh [x_min, m_max]x[y_min, y_max].</span></span><br><span class="line">        <span class="keyword">try</span> </span><br><span class="line">            <span class="comment"># Not implemented for some</span></span><br><span class="line">            Z = decision_function(clf, hcat(xx[:], yy[:]))</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">            Z = predict_proba(clf, hcat(xx[:], yy[:]))[:, <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Put the result into a color plot</span></span><br><span class="line">        Z = reshape(Z, size(xx)...)</span><br><span class="line">        ax[:contourf](xx, yy, Z, cmap=cm, alpha=<span class="number">.8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Plot also the training points</span></span><br><span class="line">        ax[:scatter](X_train[:, <span class="number">1</span>], X_train[:, <span class="number">2</span>], c=y_train, cmap=cm_bright)</span><br><span class="line">        <span class="comment"># and testing points</span></span><br><span class="line">        ax[:scatter](X_test[:, <span class="number">1</span>], X_test[:, <span class="number">2</span>], c=y_test, cmap=cm_bright,</span><br><span class="line">                   alpha=<span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">        ax[:set_xlim](minimum(xx), maximum(xx))</span><br><span class="line">        ax[:set_ylim](minimum(yy), maximum(yy))</span><br><span class="line">        ax[:set_xticks](())</span><br><span class="line">        ax[:set_yticks](())</span><br><span class="line">        ax[:set_title](name)</span><br><span class="line"></span><br><span class="line">        ax[:text](maximum(xx) - <span class="number">.3</span>, minimum(yy) + <span class="number">.3</span>, <span class="meta">@sprintf</span>(<span class="string">"%.2f"</span>, scor),</span><br><span class="line">                size=<span class="number">15</span>, horizontalalignment=<span class="string">"right"</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fig[:subplots_adjust](left=<span class="number">.02</span>, right=<span class="number">.98</span>)</span><br></pre></td></tr></table></figure><p><img src="http://oye4atjxc.bkt.clouddn.com/leanote/Classifier_Comparison/output_5_0.png" alt="png"></p><pre><code>/Users/kay/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/sklearn/cross_validation.py:41: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.  &quot;This module will be removed in 0.20.&quot;, DeprecationWarning)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Classifier-Comparison&quot;&gt;&lt;a href=&quot;#Classifier-Comparison&quot; class=&quot;headerlink&quot; title=&quot;Classifier Comparison&quot;&gt;&lt;/a&gt;Classifier Comparison&lt;/
      
    
    </summary>
    
    
      <category term="julia" scheme="onlookerliu.github.io/tags/julia/"/>
    
  </entry>
  
  <entry>
    <title>Cross_Validated_Predictions</title>
    <link href="onlookerliu.github.io/2017/12/29/Cross-Validated-Predictions/"/>
    <id>onlookerliu.github.io/2017/12/29/Cross-Validated-Predictions/</id>
    <published>2017-12-28T17:42:24.000Z</published>
    <updated>2017-12-28T17:43:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Plotting-Cross-Validated-Predictions"><a href="#Plotting-Cross-Validated-Predictions" class="headerlink" title="Plotting Cross-Validated Predictions"></a>Plotting Cross-Validated Predictions</h1><p>Adapted from <a href="http://scikit-learn.org/stable/auto_examples/plot_cv_predict.html" target="_blank" rel="noopener">http://scikit-learn.org/stable/auto_examples/plot_cv_predict.html</a></p><p>This example shows how to use cross_val_predict to visualize prediction errors.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ScikitLearn</span><br><span class="line"><span class="keyword">using</span> ScikitLearn.CrossValidation: cross_val_predict</span><br><span class="line"></span><br><span class="line"><span class="meta">@sk_import</span> datasets: load_boston</span><br><span class="line"><span class="meta">@sk_import</span> linear_model: LinearRegression</span><br><span class="line"><span class="keyword">using</span> PyPlot</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lr = LinearRegression()</span><br><span class="line">boston = load_boston()</span><br><span class="line">y = boston[<span class="string">"target"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># cross_val_predict returns an array of the same size as `y` where each entry</span></span><br><span class="line"><span class="comment"># is a prediction obtained by cross validated:</span></span><br><span class="line">predicted = cross_val_predict(lr, boston[<span class="string">"data"</span>], y, cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">scatter(y, predicted)</span><br><span class="line">plot([minimum(y), maximum(y)], [minimum(y), maximum(y)], <span class="string">"k--"</span>, lw=<span class="number">4</span>)</span><br><span class="line">xlabel(<span class="string">"Measured"</span>)</span><br><span class="line">ylabel(<span class="string">"Predicted"</span>);</span><br></pre></td></tr></table></figure><p><img src="http://oye4atjxc.bkt.clouddn.com/leanote/Cross_Validated_Predictions/output_4_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Plotting-Cross-Validated-Predictions&quot;&gt;&lt;a href=&quot;#Plotting-Cross-Validated-Predictions&quot; class=&quot;headerlink&quot; title=&quot;Plotting Cross-Valid
      
    
    </summary>
    
    
      <category term="julia" scheme="onlookerliu.github.io/tags/julia/"/>
    
  </entry>
  
  <entry>
    <title>Clustering_Comparison</title>
    <link href="onlookerliu.github.io/2017/12/29/Clustering-Comparison/"/>
    <id>onlookerliu.github.io/2017/12/29/Clustering-Comparison/</id>
    <published>2017-12-28T17:39:41.000Z</published>
    <updated>2017-12-28T17:41:07.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Comparing-different-clustering-algorithms-on-toy-datasets"><a href="#Comparing-different-clustering-algorithms-on-toy-datasets" class="headerlink" title="Comparing different clustering algorithms on toy datasets"></a>Comparing different clustering algorithms on toy datasets</h1><p>Adapted from <a href="http://scikit-learn.org/stable/auto_examples/cluster/plot_cluster_comparison.html" target="_blank" rel="noopener">http://scikit-learn.org/stable/auto_examples/cluster/plot_cluster_comparison.html</a></p><p>This example aims at showing characteristics of different clustering algorithms on datasets that are “interesting” but still in 2D. The last dataset is an example of a ‘null’ situation for clustering: the data is homogeneous, and there is no good clustering.</p><p>While these examples give some intuition about the algorithms, this intuition might not apply to very high dimensional data.</p><p>The results could be improved by tweaking the parameters for each clustering strategy, for instance setting the number of clusters for the methods that needs this parameter specified. Note that affinity propagation has a tendency to create many clusters. Thus in this example its two parameters (damping and per-point preference) were set to to mitigate this behavior.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ScikitLearn</span><br><span class="line"><span class="keyword">using</span> PyPlot</span><br><span class="line"></span><br><span class="line"><span class="meta">@sk_import</span> datasets: (make_circles, make_moons, make_blobs)</span><br><span class="line"><span class="meta">@sk_import</span> cluster: (estimate_bandwidth, MeanShift, MiniBatchKMeans, AgglomerativeClustering, SpectralClustering)</span><br><span class="line"><span class="meta">@sk_import</span> cluster: (DBSCAN, AffinityPropagation, Birch)</span><br><span class="line"><span class="meta">@sk_import</span> preprocessing: StandardScaler</span><br><span class="line"><span class="meta">@sk_import</span> neighbors: kneighbors_graph</span><br></pre></td></tr></table></figure><pre><code>PyObject &lt;function kneighbors_graph at 0x1a30ba77d0&gt;</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">srand(<span class="number">33</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate datasets. We choose the size big enough to see the scalability</span></span><br><span class="line"><span class="comment"># of the algorithms, but not too big to avoid too long running times</span></span><br><span class="line">n_samples = <span class="number">1500</span></span><br><span class="line">noisy_circles = make_circles(n_samples=n_samples, factor=<span class="number">.5</span>, noise=<span class="number">.05</span>)</span><br><span class="line">noisy_moons = make_moons(n_samples=n_samples, noise=<span class="number">.05</span>)</span><br><span class="line">blobs = make_blobs(n_samples=n_samples, random_state=<span class="number">8</span>)</span><br><span class="line">no_structure = rand(n_samples, <span class="number">2</span>), <span class="literal">nothing</span></span><br><span class="line"></span><br><span class="line">colors0 = collect(<span class="string">"bgrcmykbgrcmykbgrcmykbgrcmyk"</span>)</span><br><span class="line">colors = vcat(fill(colors0, <span class="number">20</span>)...)</span><br><span class="line"></span><br><span class="line">clustering_names = [</span><br><span class="line">    <span class="string">"MiniBatchKMeans"</span>, <span class="string">"AffinityPropagation"</span>, <span class="string">"MeanShift"</span>,</span><br><span class="line">    <span class="string">"SpectralClustering"</span>, <span class="string">"Ward"</span>, <span class="string">"AgglomerativeClustering"</span>,</span><br><span class="line">    <span class="string">"DBSCAN"</span>, <span class="string">"Birch"</span>];</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">figure(figsize=(length(clustering_names) * <span class="number">2</span> + <span class="number">3</span>, <span class="number">9.5</span>))</span><br><span class="line">subplots_adjust(left=<span class="number">.02</span>, right=<span class="number">.98</span>, bottom=<span class="number">.001</span>, top=<span class="number">.96</span>, wspace=<span class="number">.05</span>,</span><br><span class="line">                    hspace=<span class="number">.01</span>)</span><br><span class="line"></span><br><span class="line">plot_num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">datasets = [noisy_circles, noisy_moons, blobs, no_structure]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i_dataset, dataset) <span class="keyword">in</span> enumerate(datasets)</span><br><span class="line"></span><br><span class="line">    X, y = dataset</span><br><span class="line">    <span class="comment"># normalize dataset for easier parameter selection</span></span><br><span class="line">    X = fit_transform!(StandardScaler(), X)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># estimate bandwidth for mean shift</span></span><br><span class="line">    bandwidth = estimate_bandwidth(X, quantile=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># connectivity matrix for structured Ward</span></span><br><span class="line">    connectivity = kneighbors_graph(X, n_neighbors=<span class="number">10</span>, include_self=<span class="literal">false</span>)[:todense]() <span class="comment"># PyCall does not support numpy sparse matrices</span></span><br><span class="line">    <span class="comment"># make connectivity symmetric</span></span><br><span class="line">    connectivity = <span class="number">0.5</span> * (connectivity + connectivity')</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create clustering estimators</span></span><br><span class="line">    ms = MeanShift(bandwidth=bandwidth, bin_seeding=<span class="literal">true</span>)</span><br><span class="line">    two_means = MiniBatchKMeans(n_clusters=<span class="number">2</span>)</span><br><span class="line">    ward = AgglomerativeClustering(n_clusters=<span class="number">2</span>, linkage=<span class="string">"ward"</span>,</span><br><span class="line">                                   connectivity=connectivity)</span><br><span class="line">    spectral = SpectralClustering(n_clusters=<span class="number">2</span>,</span><br><span class="line">                                  eigen_solver=<span class="string">"arpack"</span>,</span><br><span class="line">                                  affinity=<span class="string">"nearest_neighbors"</span>)</span><br><span class="line">    dbscan = DBSCAN(eps=<span class="number">.2</span>)</span><br><span class="line">    affinity_propagation = AffinityPropagation(damping=<span class="number">.9</span>, preference=-<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    average_linkage = AgglomerativeClustering(</span><br><span class="line">        linkage=<span class="string">"average"</span>, affinity=<span class="string">"cityblock"</span>, n_clusters=<span class="number">2</span>,</span><br><span class="line">        connectivity=connectivity)</span><br><span class="line"></span><br><span class="line">    birch = Birch(n_clusters=<span class="number">2</span>)</span><br><span class="line">    clustering_algorithms = [</span><br><span class="line">        two_means, affinity_propagation, ms, spectral, ward, average_linkage,</span><br><span class="line">        dbscan, birch]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (name, algorithm) <span class="keyword">in</span> zip(clustering_names, clustering_algorithms)</span><br><span class="line">        fit!(algorithm, X)</span><br><span class="line">        y_pred = <span class="literal">nothing</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            y_pred = predict(algorithm, X)</span><br><span class="line">        <span class="keyword">catch</span> <span class="literal">e</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">isa</span>(<span class="literal">e</span>, <span class="built_in">KeyError</span>)</span><br><span class="line">                y_pred = map(<span class="built_in">Int</span>, algorithm[:labels_])</span><br><span class="line">                clamp!(y_pred, <span class="number">0</span>, <span class="number">27</span>) <span class="comment"># not sure why some algorithms return -1</span></span><br><span class="line">            <span class="keyword">else</span> rethrow() <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        subplot(<span class="number">4</span>, length(clustering_algorithms), plot_num)</span><br><span class="line">        <span class="keyword">if</span> i_dataset == <span class="number">1</span></span><br><span class="line">            title(name, size=<span class="number">18</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> y_val <span class="keyword">in</span> unique(y_pred)</span><br><span class="line">            selected = y_pred.==y_val</span><br><span class="line">            scatter(X[selected, <span class="number">1</span>], X[selected, <span class="number">2</span>], color=string(colors0[y_val+<span class="number">1</span>]), s=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        xlim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        ylim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        xticks(())</span><br><span class="line">        yticks(())</span><br><span class="line">        plot_num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="http://oye4atjxc.bkt.clouddn.com/leanote/Classifier_Comparison/output_5_1.png" alt="png"></p><pre><code>/Users/kay/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/sklearn/manifold/spectral_embedding_.py:234: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.  warnings.warn(&quot;Graph is not fully connected, spectral embedding&quot;/Users/kay/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/sklearn/cluster/hierarchical.py:193: UserWarning: the number of connected components of the connectivity matrix is 2 &gt; 1. Completing it to avoid stopping the tree early.  affinity=&apos;euclidean&apos;)/Users/kay/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/sklearn/cluster/hierarchical.py:426: UserWarning: the number of connected components of the connectivity matrix is 2 &gt; 1. Completing it to avoid stopping the tree early.  affinity=affinity)/Users/kay/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/sklearn/cluster/hierarchical.py:193: UserWarning: the number of connected components of the connectivity matrix is 3 &gt; 1. Completing it to avoid stopping the tree early.  affinity=&apos;euclidean&apos;)/Users/kay/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/sklearn/cluster/hierarchical.py:426: UserWarning: the number of connected components of the connectivity matrix is 3 &gt; 1. Completing it to avoid stopping the tree early.  affinity=affinity)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Comparing-different-clustering-algorithms-on-toy-datasets&quot;&gt;&lt;a href=&quot;#Comparing-different-clustering-algorithms-on-toy-datasets&quot; clas
      
    
    </summary>
    
    
      <category term="julia" scheme="onlookerliu.github.io/tags/julia/"/>
    
  </entry>
  
  <entry>
    <title>DataFrame_Demo</title>
    <link href="onlookerliu.github.io/2017/12/29/DataFrame-Demo/"/>
    <id>onlookerliu.github.io/2017/12/29/DataFrame-Demo/</id>
    <published>2017-12-28T17:37:43.000Z</published>
    <updated>2018-02-28T15:55:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>Credits: this code and documentation was adapted from Paul Butler’s <a href="https://github.com/paulgb/sklearn-pandas" target="_blank" rel="noopener">sklearn-pandas</a></p><h1 id="DataFrames"><a href="#DataFrames" class="headerlink" title="DataFrames"></a>DataFrames</h1><p>It is possible to use a dataframe as a training set, but it needs to be converted to an array first. <code>DataFrameMapper</code> is used to specify how this conversion proceeds. For example, PCA might be applied to some numerical dataframe columns, and one-hot-encoding to a categorical column.</p><h2 id="Transformation-Mapping"><a href="#Transformation-Mapping" class="headerlink" title="Transformation Mapping"></a>Transformation Mapping</h2><p>Consider this dataset:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ScikitLearn</span><br><span class="line"><span class="keyword">using</span> DataFrames: DataFrame, NA, DataArray</span><br><span class="line"><span class="keyword">using</span> DataArrays: <span class="meta">@data</span></span><br><span class="line"><span class="meta">@sk_import</span> preprocessing: (LabelBinarizer, StandardScaler)</span><br><span class="line"></span><br><span class="line">data = DataFrame(pet=[<span class="string">"cat"</span>, <span class="string">"dog"</span>, <span class="string">"dog"</span>, <span class="string">"fish"</span>, <span class="string">"cat"</span>, <span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"fish"</span>],</span><br><span class="line">                 children=[<span class="number">4.</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>],</span><br><span class="line">                 salary=[<span class="number">90</span>, <span class="number">24</span>, <span class="number">44</span>, <span class="number">27</span>, <span class="number">32</span>, <span class="number">59</span>, <span class="number">36</span>, <span class="number">27</span>])</span><br></pre></td></tr></table></figure><table class="data-frame"><tr><th></th><th>pet</th><th>children</th><th>salary</th></tr><tr><th>1</th><td>cat</td><td>4.0</td><td>90</td></tr><tr><th>2</th><td>dog</td><td>6.0</td><td>24</td></tr><tr><th>3</th><td>dog</td><td>3.0</td><td>44</td></tr><tr><th>4</th><td>fish</td><td>3.0</td><td>27</td></tr><tr><th>5</th><td>cat</td><td>2.0</td><td>32</td></tr><tr><th>6</th><td>dog</td><td>3.0</td><td>59</td></tr><tr><th>7</th><td>cat</td><td>5.0</td><td>36</td></tr><tr><th>8</th><td>fish</td><td>4.0</td><td>27</td></tr></table><h3 id="Map-the-Columns-to-Transformations"><a href="#Map-the-Columns-to-Transformations" class="headerlink" title="Map the Columns to Transformations"></a>Map the Columns to Transformations</h3><p>The mapper takes a list of pairs. The first is a column name from the DataFrame, or a list containing one or multiple columns (we will see an example with multiple columns later). The second is an object which will perform the transformation which will be applied to that column:</p><p>Note: <code>ScikitLearn.DataFrameMapper</code> won’t be available until <code>DataFrames</code> is imported</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mapper = DataFrameMapper([(:pet, LabelBinarizer()),</span><br><span class="line">                          ([:children], StandardScaler())]);</span><br></pre></td></tr></table></figure><p>The difference between specifying the column selector as :column (as a single symbol) and [:column] (as a list with one element) is the shape of the array that is passed to the transformer. In the first case, a one dimensional array with be passed, while in the second case it will be a 2-dimensional array with one column, i.e. a column vector.</p><h3 id="Test-the-Transformation"><a href="#Test-the-Transformation" class="headerlink" title="Test the Transformation"></a>Test the Transformation</h3><p>We can use the <code>fit_transform!</code> shortcut to both fit the model and see what transformed data looks like. In this and the other examples, output is rounded to two digits with <code>round</code> to account for rounding errors on different hardware:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round(fit_transform!(mapper, copy(data)), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>8x4 Array{Float64,2}: 1.0  0.0  0.0   0.21 0.0  1.0  0.0   1.88 0.0  1.0  0.0  -0.63 0.0  0.0  1.0  -0.63 1.0  0.0  0.0  -1.46 0.0  1.0  0.0  -0.63 1.0  0.0  0.0   1.04 0.0  0.0  1.0   0.21</code></pre><p>Note that the first three columns are the output of the LabelBinarizer (corresponding to <code>cat</code>, <code>dog</code>, and <code>fish</code><br> respectively) and the fourth column is the standardized value for the number of children. In general, the columns are ordered according to the order given when the DataFrameMapper is constructed.</p><p>Now that the transformation is trained, we confirm that it works on new data:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sample = DataFrame(pet= [<span class="string">"cat"</span>], children= [<span class="number">5.</span>])</span><br><span class="line">round(transform(mapper, sample), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>1x4 Array{Float64,2}: 1.0  0.0  0.0  1.04</code></pre><h3 id="Transform-Multiple-Columns"><a href="#Transform-Multiple-Columns" class="headerlink" title="Transform Multiple Columns"></a>Transform Multiple Columns</h3><p>Transformations may require multiple input columns. In these cases, the column names can be specified in a list:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sk_import</span> decomposition: PCA</span><br><span class="line">mapper2 = DataFrameMapper([([:children, :salary], PCA(<span class="number">1</span>))]);</span><br></pre></td></tr></table></figure><p>Now running <code>fit_transform!</code> will run PCA on the <code>children</code> and <code>salary</code> columns and return the first principal component:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round(fit_transform!(mapper2, copy(data)), <span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>8x1 Array{Float64,2}:  47.6 -18.4   1.6 -15.4 -10.4  16.6  -6.4 -15.4</code></pre><h3 id="Multiple-transformers-for-the-same-column"><a href="#Multiple-transformers-for-the-same-column" class="headerlink" title="Multiple transformers for the same column"></a>Multiple transformers for the same column</h3><p>Multiple transformers can be applied to the same column specifying them in a list:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sk_import</span> preprocessing: Imputer</span><br><span class="line">mapper3 = DataFrameMapper([([:age], [Imputer()])]; NA2NaN=<span class="literal">true</span>)</span><br><span class="line">data_3 = DataFrame(age= <span class="meta">@data</span>([<span class="number">1</span>, NA, <span class="number">3</span>]))</span><br><span class="line">fit_transform!(mapper3, data_3)</span><br></pre></td></tr></table></figure><pre><code>3x1 Array{Float64,2}: 1.0 2.0 3.0</code></pre><h3 id="Columns-that-don’t-need-any-transformation"><a href="#Columns-that-don’t-need-any-transformation" class="headerlink" title="Columns that don’t need any transformation"></a>Columns that don’t need any transformation</h3><p>Only columns that are listed in the <code>DataFrameMapper</code> are kept. To keep a column but don’t apply any transformation to it, use <code>nothing</code> as transformer:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapper3 = DataFrameMapper([</span><br><span class="line">     (:pet, LabelBinarizer()),</span><br><span class="line">     (:children, <span class="literal">nothing</span>)])</span><br><span class="line">round(fit_transform!(mapper3, copy(data)))</span><br></pre></td></tr></table></figure><pre><code>8x4 Array{Float64,2}: 1.0  0.0  0.0  4.0 0.0  1.0  0.0  6.0 0.0  1.0  0.0  3.0 0.0  0.0  1.0  3.0 1.0  0.0  0.0  2.0 0.0  1.0  0.0  3.0 1.0  0.0  0.0  5.0 0.0  0.0  1.0  4.0</code></pre><h2 id="Cross-validation"><a href="#Cross-validation" class="headerlink" title="Cross-validation"></a>Cross-validation</h2><p>Now that we can combine features from a DataFrame, we may want to use cross-validation to see whether our model works.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sk_import</span> linear_model: LinearRegression</span><br><span class="line"></span><br><span class="line">pipe = Pipelines.Pipeline([</span><br><span class="line">     (:featurize, mapper),</span><br><span class="line">     (:lm, LinearRegression())])</span><br><span class="line">round(CrossValidation.cross_val_score(pipe, data, data[:salary]), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>3-element Array{Float64,1}:  -1.09  -5.3  -15.38</code></pre><h2 id="Iris-Dataset"><a href="#Iris-Dataset" class="headerlink" title="Iris Dataset"></a>Iris Dataset</h2><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RDatasets: dataset</span><br><span class="line"><span class="keyword">using</span> ScikitLearn</span><br><span class="line"></span><br><span class="line"><span class="meta">@sk_import</span> linear_model: LogisticRegression</span><br><span class="line"></span><br><span class="line">iris = dataset(<span class="string">"datasets"</span>, <span class="string">"iris"</span>)</span><br><span class="line"></span><br><span class="line">X = convert(<span class="built_in">Array</span>, iris[[:SepalLength, :SepalWidth, :PetalLength, :PetalWidth]])</span><br><span class="line">y = convert(<span class="built_in">Array</span>, iris[:Species])</span><br><span class="line"></span><br><span class="line">model = fit!(LogisticRegression(), X, y)</span><br><span class="line">accuracy = sum(predict(model, X) .== y) / length(y)</span><br><span class="line">println(<span class="string">"accuracy: <span class="variable">$accuracy</span>"</span>)  <span class="comment"># accuracy on training set</span></span><br></pre></td></tr></table></figure><pre><code>WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31accuracy: 0.96</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ScikitLearn.CrossValidation: cross_val_score</span><br><span class="line"></span><br><span class="line">cross_val_score(LogisticRegression(), X, y, cv=<span class="number">5</span>)  <span class="comment"># 5-fold</span></span><br></pre></td></tr></table></figure><pre><code>5-element Array{Float64,1}: 1.0      0.966667 0.933333 0.9      1.0     </code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ScikitLearn.GridSearch: GridSearchCV</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gridsearch = GridSearchCV(LogisticRegression(), <span class="built_in">Dict</span>(:C =&gt; <span class="number">0.1</span>:<span class="number">0.1</span>:<span class="number">2.0</span>))</span><br><span class="line">fit!(gridsearch, X, y)</span><br><span class="line">println(<span class="string">"Best parameters: <span class="subst">$(gridsearch.best_params_)</span>"</span>)</span><br></pre></td></tr></table></figure><pre><code>Best parameters: Dict{Symbol,Any}(Pair{Symbol,Any}(:C, 1.1))</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> PyPlot</span><br><span class="line"></span><br><span class="line">plot([cv_res.parameters[:C] <span class="keyword">for</span> cv_res <span class="keyword">in</span> gridsearch.grid_scores_],</span><br><span class="line">[mean(cv_res.cv_validation_scores) <span class="keyword">for</span> cv_res <span class="keyword">in</span> gridsearch.grid_scores_])</span><br></pre></td></tr></table></figure><pre><code>[1m[36mINFO: [39m[22m[36mRecompiling stale cache file /Users/kay/.julia/lib/v0.6/PyPlot.ji for module PyPlot.[39m</code></pre><p><img src="http://oye4atjxc.bkt.clouddn.com/leanote/iris/output_4_1.png" alt="png"></p><pre><code>1-element Array{PyCall.PyObject,1}: PyObject &lt;matplotlib.lines.Line2D object at 0x1a3b5abc50&gt;</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?GridSearchCV</span><br></pre></td></tr></table></figure><pre><code>search: [1mG[22m[1mr[22m[1mi[22m[1md[22m[1mS[22m[1me[22m[1ma[22m[1mr[22m[1mc[22m[1mh[22m</code></pre><p>Exhaustive search over specified parameter values for an estimator.</p><p>Important members are fit, predict.</p><p>GridSearchCV implements a “fit” method and a “predict” method like any classifier except that the parameters of the classifier used to predict is optimized by cross-validation.</p><h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><p>estimator : object type that implements the “fit” and “predict” methods     A object of that type is instantiated for each grid point.</p><p>param_grid : dict or list of dictionaries     Dictionary with parameters names (string) as keys and lists of     parameter settings to try as values, or a list of such     dictionaries, in which case the grids spanned by each dictionary     in the list are explored. This enables searching over any sequence     of parameter settings.</p><p>scoring : string, callable or None, optional, default: None     A string (see model evaluation documentation) or     a scorer callable object / function with signature     $scorer(estimator, X, y)$.</p><p>fit_params : dict, optional     Parameters to pass to the fit method.</p><p>n_jobs : int, default 1     Number of jobs to run in parallel.</p><p>pre_dispatch : int, or string, optional     Controls the number of jobs that get dispatched during parallel     execution. Reducing this number can be useful to avoid an     explosion of memory consumption when more jobs get dispatched     than CPUs can process. This parameter can be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- None, in which case all the jobs are immediately</span><br><span class="line">  created and spawned. Use this for lightweight and</span><br><span class="line">  fast-running jobs, to avoid delays due to on-demand</span><br><span class="line">  spawning of the jobs</span><br><span class="line"></span><br><span class="line">- An int, giving the exact number of total jobs that are</span><br><span class="line">  spawned</span><br><span class="line"></span><br><span class="line">- A string, giving an expression as a function of n_jobs,</span><br><span class="line">  as in &apos;2*n_jobs&apos;</span><br></pre></td></tr></table></figure><p>iid : boolean, default=True     If True, the data is assumed to be identically distributed across     the folds, and the loss minimized is the total loss per sample,     and not the mean loss across the folds.</p><p>cv : integer or cross-validation generator, default=3     If an integer is passed, it is the number of folds.     Specific cross-validation objects can be passed, see     sklearn.cross_validation module for the list of possible objects</p><p>refit : boolean, default=True     Refit the best estimator with the entire dataset.     If “False”, it is impossible to make predictions using     this GridSearchCV instance after fitting.</p><p>verbose : integer     Controls the verbosity: the higher, the more messages.</p><p>error_score : ‘raise’ (default) or numeric     Value to assign to the score if an error occurs in estimator fitting.     If set to ‘raise’, the error is raised. If a numeric value is given,     FitFailedWarning is raised. This parameter does not affect the refit     step, which will always raise the error.</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><blockquote><blockquote><blockquote><p>from sklearn import svm, grid_search, datasets iris = datasets.load_iris() parameters = {‘kernel’:(‘linear’, ‘rbf’), ‘C’:[1, 10]} svr = svm.SVC() clf = grid_search.GridSearchCV(svr, parameters) clf.fit(iris.data, iris.target)</p></blockquote></blockquote></blockquote><p>…                             # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS GridSearchCV(cv=None, error_score=…,        estimator=SVC(C=1.0, cache_size=…, class_weight=…, coef0=…,                      degree=…, gamma=…, kernel=’rbf’, max_iter=-1,                      probability=False, random_state=None, shrinking=True,                      tol=…, verbose=False),        fit_params={}, iid=…, n_jobs=1,        param_grid=…, pre_dispatch=…, refit=…,        scoring=…, verbose=…)</p><h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><p>grid<em>scores</em> : list of named tuples     Contains scores for all parameter combinations in param_grid.     Each entry corresponds to one parameter setting.     Each named tuple has the attributes:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* ``parameters``, a dict of parameter settings</span><br><span class="line">* ``mean_validation_score``, the mean score over the</span><br><span class="line">  cross-validation folds</span><br><span class="line">* ``cv_validation_scores``, the list of scores for each fold</span><br></pre></td></tr></table></figure><p>best<em>estimator</em> : estimator     Estimator that was chosen by the search, i.e. estimator     which gave highest score (or smallest loss if specified)     on the left out data. Not available if refit=False.</p><p>best<em>score</em> : float     Score of best_estimator on the left out data.</p><p>best<em>params</em> : dict     Parameter setting that gave the best results on the hold out data.</p><p>scorer_ : function     Scorer function used on the held out data to choose the best     parameters for the model.</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p>The parameters selected are those that maximize the score of the left out data, unless an explicit score is passed in which case it is used instead.</p><p>If <code>n_jobs</code> was set to a value higher than one, the data is copied for each point in the grid (and not <code>n_jobs</code> times). This is done for efficiency reasons if individual jobs take very little time, but may raise errors if the dataset is large and not enough memory is available.  A workaround in this case is to set <code>pre_dispatch</code>. Then, the memory is copied only <code>pre_dispatch</code> many times. A reasonable value for <code>pre_dispatch</code> is <code>2 * n_jobs</code>.</p><h2 id="See-Also"><a href="#See-Also" class="headerlink" title="See Also"></a>See Also</h2><p>:class:<code>ParameterGrid</code>:     generates all the combinations of a an hyperparameter grid.</p><p>:func:<code>sklearn.cross_validation.train_test_split</code>:     utility function to split the data into a development set usable     for fitting a GridSearchCV instance and an evaluation set for     its final evaluation.</p><p>:func:<code>sklearn.metrics.make_scorer</code>:     Make a scorer from a performance metric or loss function.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Grid</span><br></pre></td></tr></table></figure><pre><code>UndefVarError: Grid not defined</code></pre><p>​    </p><pre><code>Stacktrace: [1] include_string(::String, ::String) at ./loading.jl:515</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> PyCall</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PyCall.np</span><br></pre></td></tr></table></figure><pre><code>UndefVarError: np not defined</code></pre><p>​    </p><pre><code>Stacktrace: [1] include_string(::String, ::String) at ./loading.jl:515</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pyimport</span> numpy</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytypeof(model[:predict](X))</span><br></pre></td></tr></table></figure><pre><code>PyObject &lt;type &apos;numpy.ndarray&apos;&gt;</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyisinstance(model[:predict](X), numpy.ndarray)</span><br></pre></td></tr></table></figure><pre><code>true</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pyimport</span> sklearn.decomposition as decomp</span><br><span class="line"><span class="meta">@pyimport</span> sklearn.linear_model as lin</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log_mod = lin.LinearRegression()[:fit](randn(<span class="number">50</span>, <span class="number">3</span>), rand(<span class="number">0</span>:<span class="number">1</span>, <span class="number">50</span>))</span><br><span class="line">log_mod[:predict](randn(<span class="number">50</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>50-element Array{Float64,1}:  0.162175   0.722845   0.362414   0.549103   0.763084   0.270936   0.485301   0.41325    0.393773   0.663121   0.595053   0.498473   0.42885    ⋮          0.639132   0.702459   0.60041    0.229709   0.296202   0.34932   -0.0609968  0.680865   0.0816659  0.433398   0.463019   0.542642 </code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m = decomp.PCA()[:fit](randn(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line">m[:transform](randn(<span class="number">30</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><pre><code>30×10 Array{Float64,2}:  0.0492857  -0.740589     0.0282217  …   0.607899    0.582307    1.04095   -0.766687   -0.00563516  -0.972977      -0.111523   -1.61246     1.21119   -0.304345   -0.195561     0.523944       1.17019    -0.159978   -2.34993   -1.5165      0.725348    -0.589536      -0.077829    0.384159   -2.53808    0.10421    -0.592984    -0.579348       0.581532    0.0428926  -0.231679  -1.92898     1.20708     -1.7819     …  -1.17005    -0.994895   -1.03124   -0.436318    0.954802    -0.300581      -0.849914    2.33628     0.810238  -1.10481     0.913266     0.872128      -0.0772121  -0.562754   -0.689544  -0.456214    0.16222      0.0980988     -0.773041   -0.764416    0.683189  -0.273398    1.21917      0.627378      -1.00523     0.514595   -2.58339    0.570575    0.247493    -1.07453    …  -0.366462    0.36321    -0.639821  -0.233897   -1.67526     -1.66674        1.33278     0.122427    1.04181   -0.624457    0.741128    -1.67955       -0.311017    1.28079    -0.685025   ⋮                                   ⋱                                     -0.388898   -2.29054      0.498946      -2.33793     1.6837     -0.488352   0.403224    0.317897    -0.290501      -1.13959     0.55129     1.11115    0.857659   -0.918163    -0.0997422  …  -1.3764      0.581696   -0.0762093  0.304933    0.549334     1.4302         0.335545   -0.934283    0.110987  -0.255592   -1.78458     -0.831169       0.572008    1.22434     0.335873   0.31237    -1.03264     -1.22471       -0.258204   -0.299442   -0.995692   0.405265   -0.508662     0.657679      -0.404234    1.092      -0.439828   0.390309   -1.77777      0.132518   …   2.10857    -1.26122     0.442358  -0.687856    1.27136      1.76452       -1.73486    -0.400697    0.084941  -0.963835   -0.826341    -1.03699       -0.11351     2.36443    -1.27699   -1.94291    -1.02019      0.786294      -2.08115    -0.954      -1.44567   -0.926151    1.12885     -0.56298       -1.75913     0.183775   -0.987595 </code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model[:predict](X)</span><br></pre></td></tr></table></figure><pre><code>PyObject array([&apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;virginica&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;virginica&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;versicolor&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;],      dtype=&apos;|S10&apos;)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Credits: this code and documentation was adapted from Paul Butler’s &lt;a href=&quot;https://github.com/paulgb/sklearn-pandas&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
      <category term="julia" scheme="onlookerliu.github.io/tags/julia/"/>
    
  </entry>
  
  <entry>
    <title>dot语法总结</title>
    <link href="onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>onlookerliu.github.io/2017/12/28/dot语法总结/</id>
    <published>2017-12-27T18:48:49.000Z</published>
    <updated>2017-12-27T19:07:17.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>dot是开源工具包<a href="http://graphviz.org/" target="_blank" rel="noopener">Graphviz</a>上用来画图的一门脚本语言。通过布局引擎解析脚本得到图像，然后可以将图像导出为各种格式以满足需求。主要用于编写脚本来画各种结构示意图和流程图。</p><p>Graphviz的文件后缀名是<code>.gv</code>。每个<code>.gv</code>文件代表一个图，可以通过<code>dot -Tpng example.gv -o example.png</code>命令生成图像，或者使用Graphviz提供的工具gvedit来编辑和运行脚本。</p><p>dot脚本的语法特别简单，官方doc只有8页。下面简单介绍下dot脚本的一些语法。</p><h2 id="2-图的声明"><a href="#2-图的声明" class="headerlink" title="2.图的声明"></a>2.图的声明</h2><p>使用<code>digraph graphName</code>可以申明一个图，具体实现代码用一对花括号包裹起来。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">digraph graph1 &#123;</span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当图中某些内容同属一个类时，我们可以申明一个子图将其包含在齐齐。使用<code>subgraph cluster_subgraphName</code>可以申明一个子图<a href="注意，子图的名字必须以cluster开始，否则引擎在解析时无法识别">^1</a>。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph cluster_subgraphName &#123;</span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看一个具体的例子</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">digraph example1 &#123;</span><br><span class="line">  label = <span class="string">"this is a graph"</span>;</span><br><span class="line">  a;b;</span><br><span class="line"></span><br><span class="line">  subgraph cluster_subgraphName1 &#123;</span><br><span class="line">    label = <span class="string">"this is a  subgraph"</span>;</span><br><span class="line">    bgcolor = greenyellow;</span><br><span class="line">    c;d;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.blog.csdn.net/20160731141833407"><br></div><h2 id="3-结点和边的声明"><a href="#3-结点和边的声明" class="headerlink" title="3.结点和边的声明"></a>3.结点和边的声明</h2><p>dot里结点的申明非常简单，只需要键入结点名字<code>nodeName</code>；同时，结点默认的现实内容为结点名字。</p><p>当结点内容有空格时，我们可以将结点用一堆双引号包含起来，解析引擎会直接提取双引号里面的内容创建结点。</p><p>使用符号<code>-&gt;</code>就可以申明一条边，<code>a -&gt; b</code>就代表由结点a连接到结点b的边<a href="这是在不需要对结点进行单独的属性设置情况下的">^2</a>。结点也可以连接到结点自身。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a;</span><br><span class="line">b;</span><br><span class="line">a -&gt; b;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.blog.csdn.net/20160731143659300"><br></div><p>申明多条边的便捷语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a; b; c;</span><br><span class="line">a -&gt; b -&gt; c -&gt; c;</span><br></pre></td></tr></table></figure><h2 id="4-图的属性"><a href="#4-图的属性" class="headerlink" title="4.图的属性"></a>4.图的属性</h2><p>图的属性可以写在<code>graph[]</code>里，也可以直接写在外面:</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">digraph graph1 &#123;</span><br><span class="line">  bgcolor = red;</span><br><span class="line">  graph [bgcolor = red];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图的属性包括</strong>：</p><ol><li><code>bgcolor</code>：设置图的背景颜色，可以使用rgb值，也可以用<code>#rrggbb</code>编码形式</li><li><code>label</code>：设置图的描述。label会继承到子图，如果不想子图重复label需手动设置</li><li><code>rankdir</code>：设置图的方向，包括：TB（top to bottom）、BT（bottom to top）、LR(left to Right）、RL（right to left）</li><li><code>rotate</code>：设置图的旋转。如<code>rotata = 90</code>代表旋转90度，默认逆时针</li><li><code>ratio</code>：设置图的长宽比，可以是一个浮点数，也可以是：fill、compress、auto</li></ol><h2 id="5-结点属性和边属性"><a href="#5-结点属性和边属性" class="headerlink" title="5.结点属性和边属性"></a>5.结点属性和边属性</h2><p>结点和边的属性设置非常简单，只需要在结点或者边的声明后面加上方括号，然后在方括号里填写属性键值对即可。键值对之间使用逗号进行分割。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a [shape = egg, label = <span class="string">"this is node a"</span>];</span><br><span class="line">b [shape = circle, label = <span class="string">"this is node b"</span>];</span><br><span class="line">a -&gt; b [style = dashed, label = <span class="string">"this is edge a to b"</span>];</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.blog.csdn.net/20160731153349495"><br></div><p><strong>结点的常用属性</strong>：</p><ol><li><code>shape</code>：设置结点形状。包括：Mrecord（圆角矩形）、record（矩形）、circle（圆形）、box（矩形，和record略有区别，下面会讲到）、egg（蛋形）、doublecircle（双圆形）、plaintext（纯文本）、 ellipse（椭圆，默认）。</li><li><code>label</code>：设置结点的显示内容，内容用双引号包含，可以使用转义字符。当结点内容!=结点名时使用</li><li><code>style</code>：设置结点的样式。包括：filled(填充)、dotted（点状边框）、solid（普通边框）、dashed（虚线边框）、bold（边框加粗）、invis（隐形）。</li><li><code>color</code>：设置边框颜色。可以使用单词形式或者<code>#rrggbb</code>形式。</li><li><code>fillcolor</code>：设置填充颜色，仅style = filled时有效。</li><li><code>width</code>：设置结点宽度。</li><li><code>height</code>：设置结点高度。</li><li><code>perpheries</code>：设置结点边框个数。</li><li><code>fontcolor</code>：设置结点内容颜色。可以使用单词形式或者<code>#rrggbb</code>形式。</li></ol><p><strong>边的常用属性</strong>：<br>1.<code>style</code>：设置边的形状。包括：solid（实线）、dashed（虚线）、dotted（点线）、bold（加粗）、invis（隐形）。</p><ol><li><code>label</code>：设置边标签。内容用双引号包含，可以使用转义字符。</li><li><code>color</code>：设置边颜色。可以使用单词形式或者<code>#rrggbb</code>形式。</li><li><code>arrowhead</code>：设置结点箭头样式。包括：none、empty、odiamond等。</li></ol><p>使用<code>node[]</code>和<code>edge[]</code>可以分别设置结点和边的全局设置：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">digraph graph1&#123;</span><br><span class="line">node [shape = egg];</span><br><span class="line">edge [style = dashed];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.blog.csdn.net/20160731152414150"><br></div><h2 id="6-其他应用"><a href="#6-其他应用" class="headerlink" title="6.其他应用"></a>6.其他应用</h2><h3 id="使dot支持中文"><a href="#使dot支持中文" class="headerlink" title="使dot支持中文"></a>使dot支持中文</h3><p>Graphviz默认是不支持中文的，输入的中文在生成的图中显示为一个空方块。如果想要让其支持中文，可以尝试以下方法：</p><ul><li>在命令行制定<code>-Nfontname = xxx.ttf</code>，在gv文件中输入utf-8编码的汉字</li><li>给graph、node、edge设置<code>fontname = xxx.ttf</code>然后设置label</li></ul><h3 id="使用record的label属性生成表格"><a href="#使用record的label属性生成表格" class="headerlink" title="使用record的label属性生成表格"></a>使用record的label属性生成表格</h3><p>前面提到record和box有所区别。原因就是：设置为record和Mrecord的结点的label属性可以很方便地生成单列的表格和UML图等。（类似于XAML里面的stack）</p><p>用一对双引号+一对花括号包含起来的就是表格内容，不同的格子之间用符号 | 隔开，尖括号里的内容表示一个锚点</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example [shape = record, label = <span class="string">"&#123;&lt;head&gt;cell1 | cell2 | cell3&#125;"</span>];</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.blog.csdn.net/20160731165525158"><br></div><p>也可以生成空格只保留锚点：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label=<span class="string">"&#123;&lt;b1&gt;|&lt;b2&gt;|&lt;b3&gt;&#125;"</span></span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.blog.csdn.net/20160731165843222"><br></div><h3 id="使用html标签生成表格"><a href="#使用html标签生成表格" class="headerlink" title="使用html标签生成表格"></a>使用html标签生成表格</h3><p>如果record生成的表格不符合预期，还可以使用html标签生成表格。只需要将结点的label属性设置为相应的html代码即可。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">table1 [label=&lt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td port=<span class="string">"one"</span>&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">4</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&gt;];</span><br></pre></td></tr></table></figure><p><code>port</code>属性可以给<code>td</code>增加一个锚点</p><h3 id="表格锚点的应用"><a href="#表格锚点的应用" class="headerlink" title="表格锚点的应用"></a>表格锚点的应用</h3><p>cell的锚点可以让使用者在cell之间划线</p><p>引用cell的锚点的语法为<code>table: anchorName</code></p><p>示例代码<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">digraph example2 &#123;</span><br><span class="line">  node [shape = record];</span><br><span class="line">  table1 [label = <span class="string">"&#123;&lt;head&gt;cell1 | cell2 | cell3&#125;"</span>];</span><br><span class="line">  table2 [label = <span class="string">"&#123;&lt;head&gt;cell1 | cell2&#125;"</span>];</span><br><span class="line"></span><br><span class="line">  table1: head -&gt; table2: head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div align="center"><br><img src="http://img.blog.csdn.net/20160731170546038"><br></div><h3 id="生成图形"><a href="#生成图形" class="headerlink" title="生成图形"></a>生成图形</h3><p>可以使用结点的某些属性来生成图形，如</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">circle [label=<span class="string">""</span>, shape=<span class="string">"circle"</span>, width=<span class="number">0.5</span>, fixedsize=<span class="literal">true</span>, style=filled, color=black];</span><br></pre></td></tr></table></figure><p>就生成了一个实心的黑色圆形。</p><h3 id="命令行全局设置"><a href="#命令行全局设置" class="headerlink" title="命令行全局设置"></a>命令行全局设置</h3><p>不仅可以使用代码里的全局设置，还可以在命令行里进行全局设置，这样就可以根据不同要求来生成图形。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dot -Grankdir=LR -Nshape=<span class="string">"plaintext"</span> -Earrowhead=<span class="string">"odiamond"</span> -Tpng example.dot -o example.png</span><br></pre></td></tr></table></figure><p><code>Grankdir</code>: graph rankdir<br><code>Nshape</code>: node shape<br><code>Earrowhead</code>: edge arrowhead</p><p>其他一些属性也可以按照这种规则填写</p><h3 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h3><p>dot的注释使用<code>//</code>（单行）或者<code>/* */</code>（多行）</p><h2 id="7-几个实例"><a href="#7-几个实例" class="headerlink" title="7.几个实例"></a>7.几个实例</h2><p>(1) 复杂的标签</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">digraph structs&#123;</span><br><span class="line">  <span class="comment">/* 把结点默认形状设置为矩形record,默认的是圆角矩形Mrecord */</span></span><br><span class="line">  node [shape = record];</span><br><span class="line"></span><br><span class="line">  struct1 [label = <span class="string">"left|middle|right"</span>];</span><br><span class="line">  struct2 [label = <span class="string">"one|two"</span>];</span><br><span class="line">  struct3 [label = <span class="string">"hello\nworld|&#123;b|&#123;c|d|e&#125;|f&#125;|g|h"</span>];</span><br><span class="line"></span><br><span class="line">  struct1 -&gt; struct2;</span><br><span class="line">  struct1 -&gt; struct3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.my.csdn.net/uploads/201212/03/1354528144_9002.png"><br></div><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">graph picture &#123;</span><br><span class="line"><span class="comment">//这幅图的名字</span></span><br><span class="line">label = <span class="string">"I love you"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图名字的位置在bottom，也可以是t</span></span><br><span class="line">labelloc = b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图名字的位置在left，也可以是r</span></span><br><span class="line">labeljust = l;</span><br><span class="line"></span><br><span class="line">edge[decorate = <span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line">C -- D [label = <span class="string">"s1"</span>];</span><br><span class="line">C -- E [label = <span class="string">"s2"</span>];</span><br><span class="line">C -- F [label = <span class="string">"s3"</span>];</span><br><span class="line">D -- E [label = <span class="string">"s4"</span>];</span><br><span class="line">D -- F [label = <span class="string">"s5"</span>];</span><br><span class="line"></span><br><span class="line">edge[decorate = <span class="literal">false</span>, labelfontcolor = blue, fontcolor = red];</span><br><span class="line">C1 -- D1 [headlabel = <span class="string">"c1"</span>,taillabel = <span class="string">"d1"</span>,label = <span class="string">"c1 - d1"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.my.csdn.net/uploads/201212/03/1354528195_3992.png"><br></div><p>(2) 行列对齐</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">digraph html &#123;</span><br><span class="line">rankdir = LR;</span><br><span class="line">&#123;</span><br><span class="line">node[shape = plaintext];</span><br><span class="line"><span class="number">1995</span> -&gt; <span class="number">1996</span> -&gt; <span class="number">1997</span> -&gt; <span class="number">1998</span> -&gt; <span class="number">1999</span> -&gt; <span class="number">2000</span> -&gt; <span class="number">2001</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">node[shape = box, style = filled];</span><br><span class="line">WAR3 -&gt; Xhero -&gt; Footman -&gt; DOTA:</span><br><span class="line">WAR3 -&gt; Battleship;</span><br><span class="line">&#125;</span><br><span class="line">&#123;rank = same; <span class="number">1996</span>; WAR3;&#125;</span><br><span class="line">&#123;rank = same; <span class="number">1998</span>; Xhero; Battleship;&#125;</span><br><span class="line">&#123;rank = same; <span class="number">1999</span>; Footman;&#125;</span><br><span class="line">&#123;rank = same; <span class="number">2001</span>; DOTA;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.my.csdn.net/uploads/201212/03/1354528314_2222.png"><br></div><p>(2)二叉树</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">digraph G &#123;</span><br><span class="line">label = <span class="string">"Binary search tree"</span>;</span><br><span class="line">node [shape = record];</span><br><span class="line"></span><br><span class="line">A [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;A|&lt;f2&gt;"</span>];</span><br><span class="line">B [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;B|&lt;f2&gt;"</span>];</span><br><span class="line">C [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;C|&lt;f2&gt;"</span>];</span><br><span class="line">D [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;D|&lt;f2&gt;"</span>];</span><br><span class="line">E [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;E|&lt;f2&gt;"</span>];</span><br><span class="line">F [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;F|&lt;f2&gt;"</span>];</span><br><span class="line">G [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;G|&lt;f2&gt;"</span>];</span><br><span class="line"></span><br><span class="line">A:f0 -&gt; B:f1;</span><br><span class="line">A:f2 -&gt; C:f1;</span><br><span class="line">B:f0 -&gt; D:f1;</span><br><span class="line">B:f2 -&gt; E:f1;</span><br><span class="line">C:f0 -&gt; F:f1;</span><br><span class="line">C:f2 -&gt; G:f1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.my.csdn.net/uploads/201212/03/1354528355_9701.png"><br></div><p>(4)哈希表</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">digraph G&#123;</span><br><span class="line">nodesep = .<span class="number">0</span>5;</span><br><span class="line">rankdir = LR;</span><br><span class="line"></span><br><span class="line">node [shape = record,width = .<span class="number">1</span>,height = .<span class="number">1</span>];</span><br><span class="line">node0 [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;|&lt;f2&gt;|&lt;f3&gt;|&lt;f4&gt;|&lt;f5&gt;|&lt;f6&gt;|"</span>,height = <span class="number">2.5</span>];</span><br><span class="line"></span><br><span class="line">node [width = <span class="number">1.5</span>];</span><br><span class="line">node1 [label = <span class="string">"&#123;&lt;n&gt;n14|719|&lt;p&gt;&#125;"</span>];</span><br><span class="line">node2 [label = <span class="string">"&#123;&lt;n&gt;a1|805|&lt;p&gt;&#125;"</span>];</span><br><span class="line">node3 [label = <span class="string">"&#123;&lt;n&gt;i9|718|&lt;p&gt;&#125;"</span>];</span><br><span class="line">node4 [label = <span class="string">"&#123;&lt;n&gt;e5|989|&lt;p&gt;&#125;"</span>];</span><br><span class="line">node5 [label = <span class="string">"&#123;&lt;n&gt;t20|959|&lt;p&gt;&#125;"</span>];</span><br><span class="line">node6 [label = <span class="string">"&#123;&lt;n&gt;o15|794|&lt;p&gt;&#125;"</span>];</span><br><span class="line">node7 [label = <span class="string">"&#123;&lt;n&gt;s19|659|&lt;p&gt;&#125;"</span>];</span><br><span class="line"></span><br><span class="line">node0:f0 -&gt; node1:n;</span><br><span class="line">node0:f1 -&gt; node2:n;</span><br><span class="line">node0:f2 -&gt; node3:n;</span><br><span class="line">node0:f5 -&gt; node4:n;</span><br><span class="line">node0:f6 -&gt; node5:n;</span><br><span class="line">node2:p -&gt; node6:n;</span><br><span class="line">node4:p -&gt; node7:n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.my.csdn.net/uploads/201212/03/1354528430_5081.png"><br></div><p>(5)流程图</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">digraph G&#123;</span><br><span class="line">subgraph cluster0 &#123;</span><br><span class="line">node [style = filled,color = white];</span><br><span class="line">style = filled;</span><br><span class="line">color = lightgrey;</span><br><span class="line">a0 -&gt; a1 -&gt; a2 -&gt; a3;</span><br><span class="line">label = <span class="string">"process #1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subgraph cluster1 &#123;</span><br><span class="line">node [style = filled];</span><br><span class="line">b0 -&gt; b1 -&gt; b2 -&gt; b3;</span><br><span class="line">label = <span class="string">"process #2"</span>;</span><br><span class="line">color = blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start -&gt; a0;</span><br><span class="line">start -&gt; b0;</span><br><span class="line">a1 -&gt; b3;</span><br><span class="line">b2 -&gt; a3;</span><br><span class="line">a3 -&gt; a0;</span><br><span class="line">a3 -&gt; end;</span><br><span class="line">b3 -&gt; end;</span><br><span class="line">start [shape = Mdiamond];</span><br><span class="line">end [shape = Msquare];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.my.csdn.net/uploads/201212/03/1354528519_8284.png"><br></div><h2 id="8-参考文献"><a href="#8-参考文献" class="headerlink" title="8.参考文献"></a>8.参考文献</h2><ol><li>啄木鸟社区关于GraphViz的文章：<a href="https://wiki.woodpecker.org.cn/moin/GraphViz" target="_blank" rel="noopener">https://wiki.woodpecker.org.cn/moin/GraphViz</a></li><li>Cnblog上的一篇文章：<a href="http://www.cnblogs.com/CoolJie/archive/2012/07/17/graphviz.html" target="_blank" rel="noopener">http://www.cnblogs.com/CoolJie/archive/2012/07/17/graphviz.html</a></li><li>简书上的dot学习笔记：<a href="http://www.jianshu.com/p/e44885a777f0" target="_blank" rel="noopener">http://www.jianshu.com/p/e44885a777f0</a></li><li>dot官方文档：<a href="http://www.graphviz.org/pdf/dotguide.pdf" target="_blank" rel="noopener">http://www.graphviz.org/pdf/dotguide.pdf</a></li><li>CSDN上关于python实现graphviz的文章：<a href="http://blog.csdn.net/a1368783069/article/details/52067404" target="_blank" rel="noopener">http://blog.csdn.net/a1368783069/article/details/52067404</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h2&gt;&lt;p&gt;dot是开源工具包&lt;a href=&quot;http://graphviz.org/&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="dot" scheme="onlookerliu.github.io/tags/dot/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 001</title>
    <link href="onlookerliu.github.io/2017/12/28/LeetCode-Notes-001/"/>
    <id>onlookerliu.github.io/2017/12/28/LeetCode-Notes-001/</id>
    <published>2017-12-27T17:14:13.000Z</published>
    <updated>2018-02-28T11:57:26.084Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><p>Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.</p><p>The distance between two adjacent cells is 1.</p><p><strong>Example 1:</strong></p><p>Input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">0 0 0</span><br></pre></td></tr></table></figure></p><p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">0 0 0</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong></p><p>Input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure></p><p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">1 2 1</span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong></p><ol><li>The number of elements of the given matrix will not exceed 10,000.</li><li>There are at least one 0 in the given matrix.</li><li>The cells are adjacent in only four directions: up, down, left and right.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; matrix</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> updateMatrix = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// BFS</span></span><br><span class="line">  <span class="keyword">let</span> q = [];</span><br><span class="line">  <span class="keyword">let</span> hash = [];</span><br><span class="line">  <span class="keyword">let</span> [m, n] = [matrix.length, matrix[<span class="number">0</span>].length];</span><br><span class="line">  <span class="keyword">const</span> dir = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">-1</span>]];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    hash[i] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (matrix[i][j] === <span class="number">0</span>) &#123;</span><br><span class="line">        q.push(&#123;<span class="attr">x</span>: i, <span class="attr">y</span>: j, <span class="attr">step</span>: <span class="number">0</span>&#125;);</span><br><span class="line">        hash[i][j] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (q.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = q.shift();</span><br><span class="line">    <span class="keyword">let</span> &#123;x, y, step&#125; = item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> _x = x + dir[i][<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">let</span> _y = y + dir[i][<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span> (_x &lt; <span class="number">0</span> || _x &gt;= m || _y &lt; <span class="number">0</span> || _y &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">if</span> (hash[_x][_y] !== <span class="literal">undefined</span>) <span class="keyword">continue</span>;</span><br><span class="line">      hash[_x][_y] = step + <span class="number">1</span>;</span><br><span class="line">      q.push(&#123;<span class="attr">x</span>: _x, <span class="attr">y</span>: _y, <span class="attr">step</span>: step + <span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3Sum"><a href="#3Sum" class="headerlink" title="3Sum"></a>3Sum</h3><p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p><p><strong>Note:</strong> The solution set must not contain duplicate triplets.</p><p>For example, given array S = [-1, 0, 1, 2, -1, -4],</p><p>A solution set is:<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ans = []</span><br><span class="line">  <span class="keyword">let</span> len = nums.length</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enumerate the array, and assume the item to be the smallest one</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++ ) &#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// have already enumerate the item as the smallest one among the three</span></span><br><span class="line">    <span class="comment">// then continue</span></span><br><span class="line">    <span class="keyword">if</span> (i &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">// the sum of another two should be</span></span><br><span class="line">    <span class="keyword">let</span> target = -nums[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the indexes of another two </span></span><br><span class="line">    <span class="keyword">let</span> [start, end] = [i + <span class="number">1</span>, len - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">      <span class="keyword">let</span> sum = nums[start] + nums[end]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">        end--</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">        start++</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans.push([nums[i], nums[start], nums[end]])</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// remove the duplication</span></span><br><span class="line">        <span class="keyword">while</span> (nums[start] === nums[start + <span class="number">1</span>]) </span><br><span class="line">          start++</span><br><span class="line">        start++</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove the duplication</span></span><br><span class="line">        <span class="keyword">while</span> (nums[end] === nums[end - <span class="number">1</span>])</span><br><span class="line">          end--</span><br><span class="line">        end--</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3Sum-Closest"><a href="#3Sum-Closest" class="headerlink" title="3Sum Closest"></a>3Sum Closest</h3><p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><p>For example, given array <code>S = {-1 2 1 -4}</code>, and <code>target = 1</code>.</p><p>The sum that is closest to the target is <code>2</code>. (-1 + 2 + 1 = 2).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">a, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">    , end = a.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(start &lt;= end) &#123;</span><br><span class="line">    <span class="keyword">var</span> mid = ~~((start + end) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (a[mid] &gt;= target)</span><br><span class="line">      end = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      start = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> threeSumClosest = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = nums.length;</span><br><span class="line">  <span class="keyword">var</span> ans = <span class="literal">Infinity</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> a = target - nums[i] - nums[j];</span><br><span class="line">      <span class="keyword">var</span> pos = binarySearch(nums, a);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="built_in">Math</span>.max(<span class="number">0</span>, pos - <span class="number">1</span>); k &lt;= <span class="built_in">Math</span>.min(pos + <span class="number">0</span>, len - <span class="number">1</span>); k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k === i || k === j) </span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sum = nums[i] + nums[j] + nums[k];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(sum - target) &lt; <span class="built_in">Math</span>.abs(ans - target))</span><br><span class="line">          ans = sum;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4Sum"><a href="#4Sum" class="headerlink" title="4Sum"></a>4Sum</h3><p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p><p><strong>Note:</strong> The solution set must not contain duplicate quadruplets.</p><p>For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.</p><p>A solution set is:<br>[<br>  [-1,  0, 0, 1],<br>  [-2, -1, 1, 2],<br>  [-2,  0, 0, 2]<br>]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hash = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = nums.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> a = nums[i]</span><br><span class="line">        , b = nums[j]</span><br><span class="line">        , c = a + b;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (hash[c] === <span class="literal">undefined</span>) </span><br><span class="line">        hash[c] = [[i, j]];</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        hash[c].push([i, j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hashSet = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> a = nums[i]</span><br><span class="line">        , b = nums[j]</span><br><span class="line">        , sum = target - a - b;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!hash[sum])</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>, _len = hash[sum].length; k &lt; _len; k++) &#123;</span><br><span class="line">        <span class="keyword">var</span> item = hash[sum][k];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (item[<span class="number">0</span>] === i || item[<span class="number">1</span>] === i || item[<span class="number">0</span>] === j || item[<span class="number">1</span>] === j)</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> c = nums[item[<span class="number">0</span>]]</span><br><span class="line">          , d = nums[item[<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tmp = [a, b, c, d].sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str = tmp.join(<span class="string">','</span>);</span><br><span class="line">        <span class="keyword">if</span> (!hashSet[str]) &#123;</span><br><span class="line">          hashSet[str] = <span class="literal">true</span>;</span><br><span class="line">          ans.push(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4Sum-II"><a href="#4Sum-II" class="headerlink" title="4Sum II"></a>4Sum II</h3><p>Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.</p><p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.</p><p><strong>Example:</strong></p><p>Input:<br>A = [ 1, 2]<br>B = [-2,-1]<br>C = [-1, 2]<br>D = [ 0, 2]</p><p>Output:<br>2</p><p>Explanation:<br>The two tuples are:</p><ol><li>(0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0</li><li>(1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; A</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; B</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; C</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; D</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSumCount = <span class="function"><span class="keyword">function</span>(<span class="params">A, B, C, D</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, lenA = A.length; i &lt; lenA; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, lenB = B.length; j &lt; lenB; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> sum = A[i] + B[j];</span><br><span class="line">      <span class="keyword">let</span> count = ~~p.get(sum);</span><br><span class="line">      p.set(sum, count + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, lenC = C.length; i &lt; lenC; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, lenD = D.length; j &lt; lenD; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> sum = C[i] + D[j];</span><br><span class="line">      ans += ~~p.get(-sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Add-and-Search-Word-–-Data-structure-design"><a href="#Add-and-Search-Word-–-Data-structure-design" class="headerlink" title="Add and Search Word – Data structure design"></a>Add and Search Word – Data structure design</h3><p>Design a data structure that supports the following two operations:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void addWord(word)</span><br><span class="line">bool search(word)</span><br></pre></td></tr></table></figure><p>search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.</p><p>For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addWord(&quot;bad&quot;)</span><br><span class="line">addWord(&quot;dad&quot;)</span><br><span class="line">addWord(&quot;mad&quot;)</span><br><span class="line">search(&quot;pad&quot;) -&gt; false</span><br><span class="line">search(&quot;bad&quot;) -&gt; true</span><br><span class="line">search(&quot;.ad&quot;) -&gt; true</span><br><span class="line">search(&quot;b..&quot;) -&gt; true</span><br></pre></td></tr></table></figure><p><strong>Note:</strong><br>You may assume that all words are consist of lowercase letters <code>a-z</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.nodes = [];</span><br><span class="line">  <span class="keyword">this</span>.endFlag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> WordDictionary = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.startNode = <span class="keyword">new</span> Node();</span><br><span class="line">  <span class="comment">// 以该 node 结尾的单词存在</span></span><br><span class="line">  <span class="keyword">this</span>.startNode.endFlag = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; word</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125;</span></span><br><span class="line"><span class="comment"> * Adds a word into the data structure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">WordDictionary.prototype.addWord = <span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">this</span>.startNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = word.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = word.charCodeAt(i) - <span class="number">97</span>;</span><br><span class="line">    <span class="keyword">if</span> (!node.nodes[item]) &#123;</span><br><span class="line">      node.nodes[item] = <span class="keyword">new</span> Node();</span><br><span class="line">    &#125;</span><br><span class="line">    node = node.nodes[item];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  node.endFlag = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; word</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> * Returns if the word is in the data structure. A word could</span></span><br><span class="line"><span class="comment"> * contain the dot character '.' to represent any one letter.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">WordDictionary.prototype.search = <span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">this</span>.startNode;</span><br><span class="line">  <span class="keyword">var</span> isFound = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  dfs(node, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">node, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isFound)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index === word.length) &#123;</span><br><span class="line">      isFound = node.endFlag;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (word[index] === <span class="string">'.'</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.nodes[i])</span><br><span class="line">          dfs(node.nodes[i], index + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> item = word.charCodeAt(index) - <span class="number">97</span>;</span><br><span class="line">      <span class="keyword">if</span> (node.nodes[item])</span><br><span class="line">        dfs(node.nodes[item], index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isFound;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your WordDictionary object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var wordDictionary = new WordDictionary();</span></span><br><span class="line"><span class="comment"> * wordDictionary.addWord("word");</span></span><br><span class="line"><span class="comment"> * wordDictionary.search("pattern");</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Matrix&quot;&gt;&lt;a href=&quot;#Matrix&quot; class=&quot;headerlink&quot; title=&quot;Matrix&quot;&gt;&lt;/a&gt;Matrix&lt;/h3&gt;&lt;p&gt;Given a matrix consists of 0 and 1, find the distance 
      
    
    </summary>
    
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer--JavaScript版III</title>
    <link href="onlookerliu.github.io/2017/12/27/%E5%89%91%E6%8C%87offer-JavaScript%E7%89%88III/"/>
    <id>onlookerliu.github.io/2017/12/27/剑指offer-JavaScript版III/</id>
    <published>2017-12-27T15:55:24.000Z</published>
    <updated>2017-12-27T16:58:23.922Z</updated>
    
    <content type="html"><![CDATA[<p>51.<br>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumeric</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^[+-]?(?:(\d+)(\.\d+)?|(\.\d+))([eE][+-]?\d+)?$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.test(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>52.<br>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    streamNums = [];</span><br><span class="line">    streamNumsLen = <span class="number">256</span>;</span><br><span class="line">    streamNumsIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; streamNumsLen; i++) &#123;</span><br><span class="line">        streamNums[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Insert</span>(<span class="params">ch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> code = ch.charCodeAt();</span><br><span class="line">    <span class="keyword">if</span> (streamNums[code] == <span class="number">-1</span>) &#123;</span><br><span class="line">        streamNums[code] = streamNumsIndex;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (streamNums[code] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        streamNums[code] = <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    streamNumsIndex++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FirstAppearingOnce</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    result = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> ch = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> minIndex = <span class="literal">Infinity</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; streamNumsLen; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (streamNums[i] &gt;= <span class="number">0</span> &amp;&amp; streamNums[i] &lt; minIndex) &#123;</span><br><span class="line">            ch = <span class="built_in">String</span>.fromCharCode(i);</span><br><span class="line">            minIndex = streamNums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ch == <span class="string">""</span> ? <span class="string">'#'</span> : ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>53.<br>一个链表中包含环，请找出该链表的环的入口结点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EntryNodeOfLoop</span>(<span class="params">pHead</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pHead) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> meeting = meetingNode(pHead);</span><br><span class="line">    <span class="keyword">if</span> (!meeting) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> nodeLoop = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> node1 = meeting;</span><br><span class="line">    <span class="keyword">while</span> (node1.next != meeting) &#123;</span><br><span class="line">        node1 = node1.next;</span><br><span class="line">        nodeLoop++;</span><br><span class="line">    &#125;</span><br><span class="line">    node1 = pHead;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodeLoop; i++) &#123;</span><br><span class="line">        node1 = node1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> node2 = pHead;</span><br><span class="line">    <span class="keyword">while</span> (node1 != node2) &#123;</span><br><span class="line">        node1 = node1.next;</span><br><span class="line">        node2 = node2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">meetingNode</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node || !node.next) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> slow = node.next;</span><br><span class="line">        <span class="keyword">var</span> fast = slow.next;</span><br><span class="line">        <span class="keyword">while</span> (fast &amp;&amp; slow) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast === slow) &#123;</span><br><span class="line">                <span class="keyword">return</span> fast;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            <span class="keyword">if</span> (fast) &#123;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>54.<br>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteDuplication</span>(<span class="params">pHead</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pHead) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> tempHead = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">    tempHead.next = pHead;</span><br><span class="line">    <span class="keyword">var</span> preNode = tempHead;</span><br><span class="line">    <span class="keyword">var</span> curr1 = preNode.next;</span><br><span class="line">    <span class="keyword">var</span> curr2 = curr1.next;</span><br><span class="line">    <span class="keyword">while</span> (curr1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!curr2 || curr2.val !== curr1.val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr1.next !== curr2) &#123;</span><br><span class="line">                clear(curr1, curr2);</span><br><span class="line">                preNode.next = curr2;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                preNode = curr1;</span><br><span class="line">            &#125;</span><br><span class="line">            curr1 = curr2;</span><br><span class="line">            <span class="keyword">if</span> (curr2) &#123;</span><br><span class="line">                curr2 = curr2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr2) &#123;</span><br><span class="line">                curr2 = curr2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempHead.next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params">node, stop</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp;</span><br><span class="line">        <span class="keyword">while</span> (node !== stop) &#123;</span><br><span class="line">            temp = node.next;</span><br><span class="line">            node.next = <span class="literal">null</span>;</span><br><span class="line">            node = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>55.<br>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetNext</span>(<span class="params">pNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pNode) &#123;</span><br><span class="line">        <span class="keyword">return</span> pNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pNode.right) &#123;</span><br><span class="line">        pNode = pNode.right;</span><br><span class="line">        <span class="keyword">while</span> (pNode.left) &#123;</span><br><span class="line">            pNode = pNode.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pNode.next &amp;&amp; pNode.next.left == pNode) &#123;</span><br><span class="line">        <span class="keyword">return</span> pNode.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pNode.next &amp;&amp; pNode.next.right == pNode) &#123;</span><br><span class="line">        <span class="keyword">while</span> (pNode.next &amp;&amp; pNode.next.left != pNode) &#123;</span><br><span class="line">            pNode = pNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pNode.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>56.<br>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSymmetrical</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pRoot) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> symmetrical(pRoot, pRoot);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">symmetrical</span>(<span class="params">node1, node2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node1 &amp;&amp; !node2)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!node1 || !node2)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (node1.val != node2.val)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> symmetrical(node1.left, node2.right) &amp;&amp; symmetrical(node1.right, node2.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>57.<br>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Print</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">if</span> (!pRoot) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> que = [];</span><br><span class="line">    que.push(pRoot);</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (que.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> vec = [];</span><br><span class="line">        <span class="keyword">var</span> len = que.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp = que.shift(); <span class="comment">//front</span></span><br><span class="line">            vec.push(tmp.val);</span><br><span class="line">            <span class="keyword">if</span> (tmp.left)</span><br><span class="line">                que.push(tmp.left);</span><br><span class="line">            <span class="keyword">if</span> (tmp.right)</span><br><span class="line">                que.push(tmp.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            vec.reverse();</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(vec);</span><br><span class="line">        flag = !flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>58.<br>从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Print</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">if</span> (!pRoot) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> que = [];</span><br><span class="line">    que.push(pRoot);</span><br><span class="line">    <span class="keyword">while</span> (que.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> vec = [];</span><br><span class="line">        <span class="keyword">var</span> len = que.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp = que.shift(); <span class="comment">//front</span></span><br><span class="line">            vec.push(tmp.val);</span><br><span class="line">            <span class="keyword">if</span> (tmp.left)</span><br><span class="line">                que.push(tmp.left);</span><br><span class="line">            <span class="keyword">if</span> (tmp.right)</span><br><span class="line">                que.push(tmp.right);</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(vec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>59.<br>请实现两个函数，分别用来序列化和反序列化二叉树</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Serialize</span>(<span class="params">pNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = [];</span><br><span class="line">    ser(pNode);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = str.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] !== <span class="string">'#'</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.join();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ser</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">            str.push(<span class="string">'#'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str.push(node.val);</span><br><span class="line">        ser(node.left);</span><br><span class="line">        ser(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Deserialize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">var</span> len = str.length;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= len) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = str.split(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">var</span> head = des();</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">des</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span> (arr[index] &amp;&amp; arr[index] !== <span class="string">'#'</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = <span class="keyword">new</span> TreeNode(arr[index]);</span><br><span class="line">            node = temp;</span><br><span class="line">            node.left = des();</span><br><span class="line">            node.right = des();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>60.<br>给定一颗二叉搜索树，请找出其中的第k大的结点。例如， 5 / \ 3 7 /\ /\ 2 4 6 8 中，按结点数值大小顺序第三个结点的值为4。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">KthNode</span>(<span class="params">pRoot, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pRoot || !k) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> KthCore(pRoot);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">KthCore</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> target = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            target = KthCore(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k === <span class="number">1</span>)</span><br><span class="line">                target = node;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!target &amp;&amp; node.right)</span><br><span class="line">            target = KthCore(node.right);</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>61.<br>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Insert</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    arr.push(num);</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetMedian</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> ((arr.length &amp; <span class="number">1</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> n1 = arr[mid];</span><br><span class="line">        <span class="keyword">var</span> n2 = arr[mid - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> (n1 + n2) / <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[mid]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>62.<br>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxInWindows</span>(<span class="params">num, size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!num || num.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> max = [];</span><br><span class="line">    <span class="keyword">if</span> (num.length &gt;= size &amp;&amp; size &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> index = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (index.length &gt; <span class="number">0</span> &amp;&amp; num[i] &gt;= num[index[index.length - <span class="number">1</span>]])</span><br><span class="line">                index.pop();</span><br><span class="line">            index.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = size; i &lt; num.length; ++i) &#123;</span><br><span class="line">            max.push(num[index[<span class="number">0</span>]]);</span><br><span class="line">            <span class="keyword">while</span> (index.length &gt; <span class="number">0</span> &amp;&amp; num[i] &gt;= num[index[index.length - <span class="number">1</span>]])</span><br><span class="line">                index.pop();</span><br><span class="line">            <span class="keyword">if</span> (index.length &gt; <span class="number">0</span> &amp;&amp; index[<span class="number">0</span>] &lt;= i - size)</span><br><span class="line">                index.shift();</span><br><span class="line">            index.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        max.push(num[index[<span class="number">0</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>63.<br>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串”bcced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPath</span>(<span class="params">matrix, rows, cols, path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> visited = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rows * cols; i++) &#123;</span><br><span class="line">        visited[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pathLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (core(i, j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        visited.length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">core</span>(<span class="params">row, col</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.length === pathLen) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> hasPath = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= <span class="number">0</span> &amp;&amp; row = <span class="number">0</span> &amp;&amp; col &lt; cols &amp;&amp; matrix[row * cols + col] === path[pathLen] &amp;&amp; !visited[row * cols + col]) &#123;</span><br><span class="line">            pathLen++;</span><br><span class="line">            visited[row * cols + col] = <span class="literal">true</span>;</span><br><span class="line">            hasPath = core(row - <span class="number">1</span>, col) + core(row, col - <span class="number">1</span>)</span><br><span class="line">                + core(row + <span class="number">1</span>, col) + core(row, col + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (!hasPath) &#123;</span><br><span class="line">                pathLen--;</span><br><span class="line">                visited[row * cols + col] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasPath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>64.<br>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">movingCount</span>(<span class="params">threshold, rows, cols</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> visited = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rows * cols; ++i)</span><br><span class="line">        visited[i] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> count = movingCountCore(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    visited.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getDigitSum</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += number % <span class="number">10</span>;</span><br><span class="line">            number = <span class="built_in">Math</span>.floor(number / <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">row, col</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= <span class="number">0</span> &amp;&amp; row = <span class="number">0</span> &amp;&amp; col &lt; cols &amp;&amp; getDigitSum(row) + getDigitSum(col) &lt;= threshold &amp;&amp; !visited[row * cols + col])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">movingCountCore</span>(<span class="params">row, col</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(row, col)) &#123;</span><br><span class="line">            visited[row * cols + col] = <span class="literal">true</span>;</span><br><span class="line">            count = <span class="number">1</span> + movingCountCore(row - <span class="number">1</span>, col)</span><br><span class="line">                + movingCountCore(row, col - <span class="number">1</span>)</span><br><span class="line">                + movingCountCore(row + <span class="number">1</span>, col)</span><br><span class="line">                + movingCountCore(row, col + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动测试框架</p><ul><li>二叉树构造</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = x;</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">arr, node, num = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!arr || arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    node = node || <span class="keyword">new</span> TreeNode(arr[num - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> curr = node;</span><br><span class="line">    <span class="keyword">if</span> (num * <span class="number">2</span> - <span class="number">1</span> &lt; arr.length &amp;&amp; arr[num * <span class="number">2</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">        curr.left = <span class="keyword">new</span> TreeNode(arr[num * <span class="number">2</span> - <span class="number">1</span>]);</span><br><span class="line">        Tree(arr, curr.left, num * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num * <span class="number">2</span> &lt; arr.length &amp;&amp; arr[num * <span class="number">2</span>]) &#123;</span><br><span class="line">        curr.right = <span class="keyword">new</span> TreeNode(arr[num * <span class="number">2</span>]);</span><br><span class="line">        Tree(arr, curr.right, num * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据数组生成二叉树</span></span><br><span class="line"><span class="keyword">var</span> tree = <span class="keyword">new</span> Tree([<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="literal">null</span>, <span class="number">10</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">5</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(tree);</span><br></pre></td></tr></table></figure><ul><li>单向链表构造</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = x;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!arr || arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListNode(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="keyword">new</span> ListNode(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">var</span> curr = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = <span class="keyword">new</span> ListNode(arr[i]);</span><br><span class="line">        curr.next = temp;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ll = <span class="keyword">new</span> LinkedList([<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(ll);</span><br></pre></td></tr></table></figure><ul><li>Node.js 多行输入测试 (如果不能运行请更新浏览器来支持 es6 语法)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* Todo: This Array contains the input lines in sequence. Each of the elements is like a line of input. */</span></span><br><span class="line">    <span class="keyword">var</span> test_lines = [<span class="string">'5'</span>, <span class="string">'1 2 3 3 5'</span>, <span class="string">'3'</span>, <span class="string">'1 2 1'</span>, <span class="string">'2 4 5'</span>, <span class="string">'3 5 3'</span>];   <span class="comment">// Do not change the name of this array if you don't like bugs.</span></span><br><span class="line">    <span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">    Todo: Add your code here including the callback function of event 'rl.on()' and</span></span><br><span class="line"><span class="comment">    global variables except the statements and definitions of 'readline' and 'rl'.</span></span><br><span class="line"><span class="comment">    *****************************************************************/</span></span><br><span class="line">    <span class="comment">/* global variables here */</span></span><br><span class="line">    <span class="keyword">var</span> lines = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* callback function of 'rl.on()' */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">line</span>) </span>&#123;    <span class="comment">// Do not change the name of this function if you don't like bugs.</span></span><br><span class="line">        <span class="keyword">var</span> str = line.trim();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'lines'</span>, lines++, <span class="string">':'</span>, str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**************** End of Your Code *****************/</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> test_len = test_lines.length;</span><br><span class="line">        <span class="keyword">var</span> test_it = gen(test_lines);</span><br><span class="line">        <span class="keyword">var</span> test_val = test_it.next();</span><br><span class="line">        <span class="keyword">while</span> (test_len) &#123;</span><br><span class="line">            main(test_val.value);</span><br><span class="line">            test_val = test_it.next();</span><br><span class="line">            test_len--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params">test_lines</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> len = test_lines.length;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (len) &#123;</span><br><span class="line">                <span class="keyword">yield</span> test_lines[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;())</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;51.&lt;br&gt;请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
