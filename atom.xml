<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code@浮生记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="onlookerliu.github.io/"/>
  <updated>2018-05-08T18:04:57.319Z</updated>
  <id>onlookerliu.github.io/</id>
  
  <author>
    <name>Monad Kai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo-theme-melody v1.5 supports slides &amp; iframe</title>
    <link href="onlookerliu.github.io/2018/05/16/Slide%20demo/"/>
    <id>onlookerliu.github.io/2018/05/16/Slide demo/</id>
    <published>2018-05-16T11:57:52.000Z</published>
    <updated>2018-05-08T18:04:57.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-theme-melody-v1-5"><a href="#hexo-theme-melody-v1-5" class="headerlink" title="hexo-theme-melody v1.5"></a>hexo-theme-melody <small>v1.5</small></h2><!-- .slide: data-background="#49B1F5" --><p>Supports iframe &amp; slides. You can use a layout called <code>slides</code> to enabled the slides layout.</p><p>Also you can add a <code>iframe</code> front-matter with the <code>slides</code> layout in your <code>md</code> file to enable the iframe page.</p><!-- .slide: data-transition="concave" data-background="#C7916B" --><h2 id="Steps"><a href="#Steps" class="headerlink" title="Steps"></a>Steps</h2><h3 id="1-Add-a-slides-page"><a href="#1-Add-a-slides-page" class="headerlink" title="1. Add a slides page"></a>1. Add a slides page</h3><p>// ……</p><p>==</p><p>// ……</p><p>===</p><h3 id="2-Add-the-layout-type"><a href="#2-Add-the-layout-type" class="headerlink" title="2. Add the layout type"></a>2. Add the layout type</h3><!-- .slide: data-transition="fade" data-background="#00C4B6" --><p>// ……</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hexo-theme-melody-v1-5&quot;&gt;&lt;a href=&quot;#hexo-theme-melody-v1-5&quot; class=&quot;headerlink&quot; title=&quot;hexo-theme-melody v1.5&quot;&gt;&lt;/a&gt;hexo-theme-melody &lt;s
      
    
    </summary>
    
    
      <category term="hexo" scheme="onlookerliu.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Promise版本的数组遍历</title>
    <link href="onlookerliu.github.io/2018/05/06/Promise%E7%89%88%E6%9C%AC%E7%9A%84%E6%95%B0%E7%BB%84%E9%81%8D%E5%8E%86/"/>
    <id>onlookerliu.github.io/2018/05/06/Promise版本的数组遍历/</id>
    <published>2018-05-06T08:15:08.000Z</published>
    <updated>2018-05-07T08:51:58.219Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>这里指的遍历方法包括：map、reduce、reduceRight、forEach、filter、some、every 因为最近要进行了一些数据汇总，node版本已经是8.11.1了，所以直接写了个async/await的脚本。但是在对数组进行一些遍历操作时，发现有些遍历方法对Promise的反馈并不是我们想要的结果。</p></blockquote><p>当然，有些严格来讲并不能算是遍历，比如说some，every这些的。<br>但确实，这些都会根据我们数组的元素来进行多次的调用传入的回调。</p><p>这些方法都是比较常见的，但是当你的回调函数是一个Promise时，一切都变了。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>async/await</code>为<code>Promise</code>的语法糖,文中会直接使用<code>async/await</code>替换<code>Promise</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="keyword">await</span> func()</span><br><span class="line"><span class="comment">// =&gt; 等价于</span></span><br><span class="line">func().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// code here</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ======</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// =&gt; 等价与</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="number">1</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p><code>map</code>可以说是对<code>Promise</code>最友好的一个函数了。<br>我们都知道，<code>map</code>接收两个参数：</p><ol><li>对每项元素执行的回调，回调结果的返回值将作为该数组中相应下标的元素</li><li>一个可选的回调函数this指向的参数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function"><span class="params">item</span> =&gt;</span> item ** <span class="number">2</span>) <span class="comment">// 对数组元素进行求平方</span></span><br><span class="line"><span class="comment">// &gt; [1, 4, 9]</span></span><br></pre></td></tr></table></figure><p>上边是一个普通的<code>map</code>执行，但是当我们的一些计算操作变为异步的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="keyword">async</span> item =&gt; item ** <span class="number">2</span>) <span class="comment">// 对数组元素进行求平方</span></span><br><span class="line"><span class="comment">// &gt; [Promise, Promise, Promise]</span></span><br></pre></td></tr></table></figure><p>这时候，我们获取到的返回值其实就是一个由<code>Promise</code>函数组成的数组了。</p><p>所以为什么上边说<code>map</code>函数为最友好的，因为我们知道，<code>Promise</code>有一个函数为<code>Promise.all</code>会将一个由<code>Promise</code>组成的数组依次执行，并返回一个<code>Promise</code>对象，该对象的结果为数组产生的结果集。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="built_in">Promise</span>.all([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="keyword">async</span> item =&gt; item ** <span class="number">2</span>))</span><br><span class="line"><span class="comment">// &gt; [1, 4, 9]</span></span><br></pre></td></tr></table></figure><p>首先使用<code>Promise.all</code>对数组进行包装，然后用<code>await</code>获取结果。</p><h2 id="reduce-reduceRight"><a href="#reduce-reduceRight" class="headerlink" title="reduce/reduceRight"></a>reduce/reduceRight</h2><p><code>reduce</code>的函数签名想必大家也很熟悉了，接收两个参数：</p><ol><li><p>对每一项元素执行的回调函数，返回值将被累加到下次函数调用中，回调函数的签名：</p><ol><li>accumulator累加的值</li><li>currentValue当前正在处理的元素</li><li>currentIndex当前正在处理的元素下标</li><li>array调用reduce的数组</li></ol></li><li>可选的初始化的值，将作为accumulator的初始值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="function">(<span class="params">accumulator, item</span>) =&gt;</span> accumulator + item, <span class="number">0</span>) <span class="comment">// 进行加和</span></span><br><span class="line"><span class="comment">// &gt; 6</span></span><br></pre></td></tr></table></figure><p>这个代码也是没毛病的，同样如果我们加和的操作也是个异步的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="keyword">async</span> (accumulator, item) =&gt; accumulator + item, <span class="number">0</span>) <span class="comment">// 进行加和</span></span><br><span class="line"><span class="comment">// &gt; Promise &#123;&lt;resolved&gt;: "[object Promise]3"&#125;</span></span><br></pre></td></tr></table></figure><p>这个结果返回的就会很诡异了，我们在回看上边的<code>reduce</code>的函数签名</p><blockquote><p>对每一项元素执行的回调函数，返回值将被累加到下次函数调用中</p></blockquote><p>然后我们再来看代码，<code>async (accumulator, item) =&gt; accumulator += item</code>这个在最开始也提到了，是<code>Promise</code>的语法糖，为了看得更清晰，我们可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(accumulator, item) =&gt; <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span></span><br><span class="line">  resolve(accumulator += item)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>也就是说，我们<code>reduce</code>的回调函数返回值其实就是一个<code>Promise</code>对象<br>然后我们对<code>Promise</code>对象进行+=操作，得到那样怪异的返回值也就很合情合理了。</p><p>当然，<code>reduce</code>的调整也是很轻松的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">await</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].reduce(<span class="keyword">async</span> (accumulator, item) =&gt; <span class="keyword">await</span> accumulator + item, <span class="number">0</span>)</span><br><span class="line"><span class="comment">// &gt; 6</span></span><br></pre></td></tr></table></figure><p>我们对<code>accumulator</code>调用<code>await</code>，然后再与当前<code>item</code>进行加和，在最后我们的<code>reduce</code>返回值也一定是一个<code>Promise</code>，所以我们在最外边也添加<code>await</code>的字样<br>也就是说我们每次<code>reduce</code>都会返回一个新的<code>Promise</code>对象，在对象内部都会获取上次<code>Promise</code>的结果。<br>我们调用<code>reduce</code>实际上得到的是类似这样的一个<code>Promise</code>对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> item = <span class="number">3</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> item = <span class="number">2</span></span><br><span class="line">      <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> item = <span class="number">1</span></span><br><span class="line">        <span class="built_in">Promise</span>.resolve(<span class="number">0</span>).then(<span class="function"><span class="params">result</span> =&gt;</span> resolve(item + result))</span><br><span class="line">      &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> resolve(item + result))</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">result</span> =&gt;</span> resolve(item + result))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight"></a>reduceRight</h3><p>这个就没什么好说的了。。跟reduce只是执行顺序相反而已</p><h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><p><code>forEach</code>，这个应该是用得最多的遍历方法了，对应的函数签名：</p><ol><li><p><code>callback</code>，对每一个元素进行调用的函数</p><ol><li>currentValue，当前元素</li><li>index，当前元素下标</li><li>array，调用forEach的数组引用</li></ol></li><li>thisArg，一个可选的回调函数this指向</li></ol><p>我们有如下的操作：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数组元素求平方后的值</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item ** <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// &gt; 1</span></span><br><span class="line"><span class="comment">// &gt; 4</span></span><br><span class="line"><span class="comment">// &gt; 9</span></span><br></pre></td></tr></table></figure><p>普通版本我们是可以直接这么输出的，但是如果遇到了<code>Promise</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取数组元素求平方后的值</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEach(<span class="keyword">async</span> item =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item ** <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// &gt; nothing</span></span><br></pre></td></tr></table></figure><p><code>forEach</code>并不关心回调函数的返回值，所以<code>forEach</code>只是执行了三个会返回<code>Promise</code>的函数<br>所以如果我们想要得到想要的效果，只能够自己进行增强对象属性了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.forEachSync = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">callback, thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [index, item] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(<span class="keyword">this</span>)) &#123;</span><br><span class="line">    <span class="keyword">await</span> callback(item, index, <span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].forEachSync(<span class="keyword">async</span> item =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(item ** <span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// &gt; 1</span></span><br><span class="line"><span class="comment">// &gt; 4</span></span><br><span class="line"><span class="comment">// &gt; 9</span></span><br></pre></td></tr></table></figure><p><code>await</code>会忽略非<code>Promise</code>值，<code>await 0</code>、<code>await</code> <code>undefined</code>与普通代码无异</p><p>我们要进行一个奇数的筛选，所以我们这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].filter(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> !== <span class="number">0</span>)</span><br><span class="line"><span class="comment">// &gt; [1, 3]</span></span><br></pre></td></tr></table></figure><p>然后我们改为<code>Promise</code>版本：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[1, 2, 3].filter(async item =&gt; item % 2 !== 0)</span><br><span class="line">// &gt; [1, 2, 3]</span><br></pre></td></tr></table></figure><p>这会导致我们的筛选功能失效，因为<code>filter</code>的返回值匹配不是完全相等的匹配，只要是返回值能转换为<code>true</code>，就会被认定为通过筛选。<br><code>Promise</code>对象必然是<code>true</code>的，所以筛选失效。<br>所以我们的处理方式与上边的<code>forEach</code>类似，同样需要自己进行对象增强<br>但我们这里直接选择一个取巧的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.filterSync = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">callback, thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> filterResult = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(<span class="keyword">this</span>.map(callback))</span><br><span class="line">  <span class="comment">// &gt; [true, false, true]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.filter(<span class="function">(<span class="params">_, index</span>) =&gt;</span> filterResult[index])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">await</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].filterSync(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> !== <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>我们可以直接在内部调用<code>map</code>方法，因为我们知道<code>map</code>会将所有的返回值返回为一个新的数组。<br>这也就意味着，我们<code>map</code>可以拿到我们对所有<code>item</code>进行筛选的结果，<code>true</code>或者<code>false</code>。<br>接下来对原数组每一项进行返回对应下标的结果即可。</p><h2 id="some"><a href="#some" class="headerlink" title="some"></a>some</h2><p><code>some</code>作为一个用来检测数组是否满足一些条件的函数存在，同样是可以用作遍历的<br>函数签名同<code>forEach</code>，有区别的是当任一<code>callback</code>返回值匹配为<code>true</code>则会直接返回<code>true</code>，如果所有的<code>callback</code>匹配均为<code>false</code>，则返回<code>false</code></p><p>我们要判断数组中是否有元素等于<code>2</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].some(<span class="function"><span class="params">item</span> =&gt;</span> item === <span class="number">2</span>)</span><br><span class="line"><span class="comment">// &gt; true</span></span><br></pre></td></tr></table></figure><p>然后我们将它改为<code>Promise</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].some(<span class="keyword">async</span> item =&gt; item === <span class="number">2</span>)</span><br><span class="line"><span class="comment">// &gt; true</span></span><br></pre></td></tr></table></figure><p>这个函数依然会返回<code>true</code>，但是却不是我们想要的，因为这个是<code>async</code>返回的<code>Promise</code>对象被认定为<code>true</code>。</p><p>所以，我们要进行如下处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.someSync = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">callback, thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [index, item] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(<span class="keyword">this</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">await</span> callback(item, index, <span class="keyword">this</span>)) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">await</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].someSync(<span class="keyword">async</span> item =&gt; item === <span class="number">2</span>)</span><br><span class="line"><span class="comment">// &gt; true</span></span><br></pre></td></tr></table></figure><p>因为<code>some</code>在匹配到第一个<code>true</code>之后就会终止遍历，所以我们在这里边使用<code>forEach</code>的话是在性能上的一种浪费。<br>同样是利用了<code>await</code>会忽略普通表达式的优势，在内部使用<code>for-of</code>来实现我们的需求</p><h2 id="every"><a href="#every" class="headerlink" title="every"></a>every</h2><p>以及我们最后的一个<code>every</code>函数签名同样与<code>forEach</code>一样，<br>但是<code>callback</code>的处理还是有一些区别的。其实换一种角度考虑，<code>every</code>就是一个反向的<code>some</code>，<code>some</code>会在获取到第一个<code>true</code>时终止，而<code>every</code>会在获取到第一个<code>false</code>时终止，如果所有元素均为<code>true</code>，则返回<code>true</code></p><p>我们要判定数组中元素是否全部大于3</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].every(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">3</span>)</span><br><span class="line"><span class="comment">// &gt; false</span></span><br></pre></td></tr></table></figure><p>很显然，一个都没有匹配到的，而且回调函数在执行到第一次时就已经终止了，不会继续执行下去。<br>我们改为<code>Promise</code>版本：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].every(<span class="function"><span class="params">async</span> =&gt;</span> item &gt; <span class="number">3</span>)</span><br><span class="line"><span class="comment">// &gt; true</span></span><br></pre></td></tr></table></figure><p>这个必然是<code>true</code>，因为我们判断的是<code>Promise</code>对象<br>所以我们拿上边的<code>someSync</code>实现稍微修改一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.everySync = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params">callback, thisArg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [index, item] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(<span class="keyword">this</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">await</span> callback(item, index, <span class="keyword">this</span>)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">await</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].everySync(<span class="keyword">async</span> item =&gt; item === <span class="number">2</span>)</span><br><span class="line"><span class="comment">// &gt; false</span></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>关于数组的这几个遍历方法。因为<code>map</code>和<code>reduce</code>的特性，所以是在使用<code>async</code>时改动最小的函数。<br><code>reduce</code>的结果很像一个洋葱模型<br>但对于其他的遍历函数来说，目前来看就需要自己来实现了。</p><p>四个<code>*Sync</code>函数的实现：<a href="https://github.com/Jiasm/notebook/tree/master/array-sync" target="_blank" rel="noopener">https://github.com/Jiasm/notebook/tree/master/array-sync</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;这里指的遍历方法包括：map、reduce、reduceRight、forEach、filter、some、every 因为最近要进行了一些数据汇总，node版本已经是8.11.1了，所以直接写了个async/await的脚本。但是在对数组进行一些遍历操作时，发现有些遍历方法对Promise的反馈并不是我们想要的结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然，有些严格来讲并不能算是遍历，比如说some，every这些的。&lt;br&gt;但确实，这些都会根据我们数组的元素来进行多次的调用传入的回调。&lt;/p&gt;
&lt;p&gt;这些方法都是比较常见的，但是当你的回调函数是一个Promise时，一切都变了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
      <category term="ES6" scheme="onlookerliu.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Reading Challenge May 2018</title>
    <link href="onlookerliu.github.io/2018/05/04/Reading-Challenge-May-2018/"/>
    <id>onlookerliu.github.io/2018/05/04/Reading-Challenge-May-2018/</id>
    <published>2018-05-04T05:15:59.000Z</published>
    <updated>2018-05-14T05:29:37.322Z</updated>
    
    <content type="html"><![CDATA[<p>2018年五月书单～</p><a id="more"></a><h2 id="已经在读的"><a href="#已经在读的" class="headerlink" title="已经在读的"></a>已经在读的</h2><h3 id="Java改错学习法"><a href="#Java改错学习法" class="headerlink" title="Java改错学习法"></a>Java改错学习法</h3><div align="center"><br><img src="http://files.jb51.net/do/uploads/litimg/131223/194IG9224.gif"><br></div><p>《java改错学习法》作者虚构一个教学场景，采用一老一少的对话形式，将自己多年教学经验融入其中，颠覆传统教学模式，创新一种改错学java的方法，帮助学习者树立正确的学习观念，使初学者明白，改错也是一种学习方式，在改正错误的过程中也能够学到和巩固很多基础知识，只要有了足够的基础，就可以编写出非常复杂和漂亮的程序。<br>《java改错学习法》从基本概念入手，对开始学习java编程时会发生的错误进行纠正和引导，从而克服学习过程中的畏难心理，在改错中逐步成长。本书从简单的例子开始，循序渐进，帮助初学者提高查错、排错和改错的能力。相信通过足够多的练习，读者定能熟悉java程序设计的精华，进而提高java编程能力。</p><p><strong>Remark:</strong><br>复习巩固java基础</p><h3 id="Pearls-of-Functional-Algorithm-Design"><a href="#Pearls-of-Functional-Algorithm-Design" class="headerlink" title="Pearls of Functional Algorithm Design"></a>Pearls of Functional Algorithm Design</h3><div align="center"><br><img src="https://img1.doubanio.com/lpic/s29454188.jpg"><br></div><p>函数式算法设计珠玑，每一章节都适合单独作为一篇博文整理post。以Haskell语言为描述，给出了一个问题由浅入深的解答，非常适合用来学习算法设计思想。</p><p><strong>Remark:</strong><br>对完全理解的文章发博客进行总结，同时巩固<a href="http://www.learnyouahaskell.com/" target="_blank" rel="noopener">复习Haskell</a></p><h3 id="Data-Structure-amp-Algorithm-In-Go"><a href="#Data-Structure-amp-Algorithm-In-Go" class="headerlink" title="Data Structure &amp; Algorithm In Go"></a>Data Structure &amp; Algorithm In Go</h3><p>Go语言写的算法与数据结构，2017年新书</p><p>书籍主页 <a href="https://github.com/wlbrough/data-structures-and-algorithms-in-go" target="_blank" rel="noopener">https://github.com/wlbrough/data-structures-and-algorithms-in-go</a></p><h3 id="Data-Structure-and-Algorithm-with-JavaScript"><a href="#Data-Structure-and-Algorithm-with-JavaScript" class="headerlink" title="Data Structure and Algorithm with JavaScript"></a>Data Structure and Algorithm with JavaScript</h3><div align="center"><br><img src="https://img1.doubanio.com/view/subject/l/public/s27177628.jpg"><br></div><p>This practical book shows you how to use linked lists, stacks, queues, and graphs, as well as classic algorithms for sorting and searching data in your JavaScript programs.</p><p>Each chapter includes at least one real-world application of the data structure or data structures discussed, along with exercises that help you further explore the practical application of various data structures and algorithms.</p><ul><li>Implement data structures and algorithms within the constraints of JavaScript</li><li>Explore real-world applications to learn how JavaScript uses these data structures</li><li>Get a helpful JavaScript programming overview</li><li>Learn methods for handling advanced algorithms</li></ul><p><strong>Remark:</strong><br>用JS学习算法的入门必读. 最常用的算法和数据结构都讲了, 很透彻.</p><h3 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h3><div align="center"><br><img src="https://img1.doubanio.com/view/subject/l/public/s29518349.jpg"><br></div><p>《深度学习》由全球知名的三位专家Ian Goodfellow、Yoshua Bengio 和Aaron Courville撰写，是深度学习领域奠基性的经典教材。全书的内容包括3个部分：第1部分介绍基本的数学工具和机器学习的概念，它们是深度学习的预备知识；第2部分系统深入地讲解现今已成熟的深度学习方法和技术；第3部分讨论某些具有前瞻性的方向和想法，它们被公认为是深度学习未来的研究重点。</p><p>《深度学习》适合各类读者阅读，包括相关专业的大学生或研究生，以及不具有机器学习或统计背景、但是想要快速补充深度学习知识，以便在实际产品或平台中应用的软件工程师。</p><p><strong>Remarks</strong><br>分章节阅读，纳入长期计划，八月底之前看完。</p><h3 id="算法竞赛入门经典"><a href="#算法竞赛入门经典" class="headerlink" title="算法竞赛入门经典"></a>算法竞赛入门经典</h3><div align="center"><br><img src="https://img3.doubanio.com/view/subject/l/public/s28393836.jpg"><br></div><p>《算法竞赛入门经典（第2版）》是一本算法竞赛的入门与提高教材，把C/C++语言、算法和解题有机地结合在一起，淡化理论，注重学习方法和实践技巧。全书内容分为12 章，包括程序设计入门、循环结构程序设计、数组和字符串、函数和递归、C++与STL入门、数据结构基础、暴力求解法、高效算法设计、动态规划初步、数学概念与方法、图论模型与算法、高级专题等内容，覆盖了算法竞赛入门和提高所需的主要知识点，并含有大量例题和习题。书中的代码规范、简洁、易懂，不仅能帮助读者理解算法原理，还能教会读者很多实用的编程技巧；书中包含的各种开发、测试和调试技巧也是传统的语言、算法类书籍中难以见到的。</p><p>《算法竞赛入门经典（第2版）》可作为全国青少年信息学奥林匹克联赛（NOIP）复赛教材、全国青少年信息学奥林匹克竞赛（NOI）和ACM国际大学生程序设计竞赛（ACM/ICPC）的训练资料，也可作为IT工程师与科研人员的参考用书。</p><p><strong>Remark:</strong><br>主要利用C++实现，需要<a href="https://www.codesdope.com/cpp-introduction/" target="_blank" rel="noopener">复习C++</a></p><h3 id="Clojure编程乐趣"><a href="#Clojure编程乐趣" class="headerlink" title="Clojure编程乐趣"></a>Clojure编程乐趣</h3><div align="center"><br><img src="https://img3.doubanio.com/lpic/s27141806.jpg"><br></div><p>Clojure是一门Lisp方言。它通过函数式编程技术，直接支持并发软件开发，得到众多开发人员的欢迎。</p><p>《Clojure编程乐趣》并非Clojure初学指南，也不是一本Clojure的编程操作手册，而是通过对Clojure详尽地探究，教授函数式的程序设计方式，帮助读者理解和体会Clojure编程的乐趣，进而开发出优美的软件。</p><p>全书分为5个部分共13章。第1部分是基础，包括第1章到第3章，从Clojure背后的思想开始，介绍了Clojure的基础知识，并带领读者初步尝试Clojure编程。第2部分包括第4章和第5章，介绍了Clojure的各种数据类型。第3部分是第6章和第7章，介绍了函数式编程的特性。第4部分包括第8章到第11章，分别介绍了宏、组合数据域代码、Clojure对Java的调用，以及并发编程等较为高级的话题。第5部分为第12章和第13章，探讨了Clojure的性能问题及其带给我们的思考。</p><p>《Clojure编程乐趣》适合有一定基础的Clojure程序员阅读，进而掌握函数编程的思考方法和程序设计方法，也可以作为读者学习函数式编程的参考资料。</p><h3 id="Java并发编程核心方法与框架"><a href="#Java并发编程核心方法与框架" class="headerlink" title="Java并发编程核心方法与框架"></a>Java并发编程核心方法与框架</h3><div align="center"><br><img src="https://img1.doubanio.com/view/subject/l/public/s28991437.jpg"><br></div><p>Java并发编程类似API的一本书，给出了大量(重复?)示例。</p><h2 id="计划开始读的"><a href="#计划开始读的" class="headerlink" title="计划开始读的"></a>计划开始读的</h2><h3 id="Java编程思想"><a href="#Java编程思想" class="headerlink" title="Java编程思想"></a>Java编程思想</h3><div align="center"><br><img src="https://img3.doubanio.com/view/subject/l/public/s27243455.jpg"><br></div><p>本书赢得了全球程序员的广泛赞誉，即使是最晦涩的概念，在Bruce Eckel的文字亲和力和小而直接的编程示例面前也会化解于无形。从Java的基础语法到最高级特性（深入的面向对象概念、多线程、自动项目构建、单元测试和调试等），本书都能逐步指导你轻松掌握。</p><p>从本书获得的各项大奖以及来自世界各地的读者评论中，不难看出这是一本经典之作。本书的作者拥有多年教学经验，对C、C++以及Java语言都有独到、深入的见解，以通俗易懂及小而直接的示例解释了一个个晦涩抽象的概念。本书共22章，包括操作符、控制执行流程、访问权限控制、复用类、多态、接口、通过异常处理错误、字符串、泛型、数组、容器深入研究、Java I/O系统、枚举类型、并发以及图形化用户界面等内容。这些丰富的内容，包含了Java语言基础语法以及高级特性，适合各个层次的Java程序员阅读，同时也是高等院校讲授面向对象程序设计语言以及Java语言的绝佳教材和参考书。</p><p><strong>Remark:</strong><br>Java编程领域圣经级著作，锻炼Java编程思想</p><h3 id="算法新解"><a href="#算法新解" class="headerlink" title="算法新解"></a>算法新解</h3><div align="center"><br><img src="https://img3.doubanio.com/view/subject/l/public/s29205454.jpg"><br></div><p>本书分4 部分，同时用函数式和传统方法介绍主要的基本算法和数据结构。数据结构部分包括二叉树、红黑树、AVL 树、Trie、Patricia、后缀树、B 树、二叉堆、二项式堆、斐波那契堆、配对堆、队列、序列等；基本算法部分包括各种排序算法、序列搜索算法、字符串匹配算法（KMP 等）、深度优先与广度优先搜索算法、贪心算法以及动态规划。</p><p>如果读过Chris Okasaki的《Purely Functional Data Strucuture》和Richard Bird的《Pearls of functional algrithm design》就不用花钱买这本书了。但是我仍然推荐花个15分钟看看《算法新解》的英文版中的Fibonacci堆，AVL树和Finger树这3小段。至少在我写这些内容的时候，还没有用pattern matching实现的AVL树，纯函数的Fibonacci堆，以及类型递归深度递增的Finger树。英文电子版PDF在github上，可以免费看：<br><a href="https://github.com/liuxinyu95/AlgoXY/releases" target="_blank" rel="noopener">https://github.com/liuxinyu95/AlgoXY/releases</a></p><p>如果你看过Algorithms, A Funtional Proramming Approach，但没有看过上述两本，我还是大着胆子推荐一下《算法新解》，我觉得我写的比这本好。但和Okasaki与Bird比就差很多了。如果你想了解Monad，Arrow，Category，不用看这本书，完全没有涉及。</p><p>如果你想了解函数式编程中的代数方法，比如build/foldr deforestration，这本也没有涉及。</p><p>这本书最适合那些有很好的算法背景，刚刚用函数式方法写了一些Hello World式的程序玩，但是发现无从下手写纯函数式的数据结构和算法。也不知道常见算法和数据结构的函数式对应物大概是什么样的读者。</p><p><strong>Remarks:</strong></p><blockquote><p>这本书的英文书稿Elementary Algorithms，五六百页的一本算法书，是作者多年来在学术界和工业界实践中不断思考的结晶。那本英文书稿因为对几个算法问题的独到解读，成为英文世界中很多人学习算法的参考资料。这本中文版书稿《算法新解》，感觉内容更加充实丰富，文笔更加流畅，引文更加全面，结构更加紧凑，我也更加不读完不能释手。</p></blockquote><p>汉母语作者写的算法书里，这本是我觉得最好的一本。</p><h3 id="Purely-Functional-Data-Structure"><a href="#Purely-Functional-Data-Structure" class="headerlink" title="Purely Functional Data Structure"></a>Purely Functional Data Structure</h3><div align="center"><br><img src="https://img1.doubanio.com/view/subject/l/public/s2413338.jpg"><br></div><p>Most books on data structures assume an imperative language such as C or C++. However, data structures for these languages do not always translate well to functional languages such as Standard ML, Haskell, or Scheme. This book describes data structures from the point of view of functional languages, with examples, and presents design techniques that allow programmers to develop their own functional data structures. The author includes both classical data structures, such as red-black trees and binomial queues, and a host of new data structures developed exclusively for functional languages. All source code is given in Standard ML and Haskell, and most of the programs are easily adaptable to other functional languages. This handy reference for professional programmers working with functional languages can also be used as a tutorial or for self-study.</p><p><strong>Remarks:</strong></p><blockquote><p>最平实的语言讲出了最漂亮的方案，真的服气<br>函数式思维实现的数据结构<br>函数式与命令式数据结构的主要区别： In particular, when we update an imperative data structure we typically accept that the old version of the data structure will no longer be available, but, when we update a functional data structure, we expect that both the old and new versions of the data structure will be available for further processing.</p></blockquote><h3 id="Scala与Clojure函数式编程模式"><a href="#Scala与Clojure函数式编程模式" class="headerlink" title="Scala与Clojure函数式编程模式"></a>Scala与Clojure函数式编程模式</h3><div align="center"><br><img src="https://img3.doubanio.com/view/subject/l/public/s28069184.jpg"><br></div><p>StackOverflow刚刚发布了2015开发者调查，最受程序员喜爱的开发语言中，Clojure和Scala分别位列第五和第六。排名第一的是Swift，而Swift相比原先的Objective-C最重要的优点之一，就是对函数式编程提供了更好的支持。同时，新一代分布式计算系统Spark不仅在实现中选择了Scala，其提供的首选编程语言也是Scala。</p><p>所有迹象都显示，诞生50多年后，函数式编程却焕发了青春，越来越受到关注和青睐，从边缘地带步入了主流，除了Scala和Clojure这些新生函数式编程语言大行其道之外，Java等老牌面向对象的编程语言也开始支持匿名函数。函数式编程能简化开发过程，尤其是大型知识管理系统应用程序从中受益良多。</p><p>本书向读者展示了如何采用函数式方案来替代或简化面向对象编程中使用的诸多通用模式，同时还介绍了一些在函数式世界中广泛使用的模式。如果你是一名Java程序员，希望了解函数式编程能为你的工作效率带来多大的提升，或者你是一名刚刚开始使用Scala和Clojure的新手，尚不能玩转函数式的问题解决方案，那么本书就是为你而准备的。</p><p><strong>Remark:</strong><br>对于有经验的OOP来说，入门函数式编程的好书。</p><h3 id="Java多线程编程核心技术"><a href="#Java多线程编程核心技术" class="headerlink" title="Java多线程编程核心技术"></a>Java多线程编程核心技术</h3><div align="center"><br><img src="https://img3.doubanio.com/view/subject/l/public/s28238985.jpg"><br></div><p>结合大量实例，全面讲解Java多线程编程中的并发访问、线程间通信、锁等最难突破的核心技术与应用实践</p><p>Java多线程无处不在，如服务器、数据库、应用。多线程可以有效提升计算和处理效率，大大提升吞吐量和可伸缩性，深得广大程序员和公司的青睐。很多人学习完JavaSE/JavaEE之后想往更深入的技术进行探索，比如对大数据、分布式、高并发类的专题进行攻克时，立即遇到针对java.lang包中线程类的学习，但线程类的学习并不像JDBC一样简单，学习曲线陡峭，多弯路与“坑”。要学习这些热点技术，Java多线程技术避无可避。而本书将引领读者拿下该“技术高地”。</p><h3 id="Node-js硬实战：115个核心技巧"><a href="#Node-js硬实战：115个核心技巧" class="headerlink" title="Node.js硬实战：115个核心技巧"></a>Node.js硬实战：115个核心技巧</h3><p>《Node.js 硬实战：115 个核心技巧》是一本面向实战的Node.js 开发进阶指南。作为资深专家，《Node.js 硬实战：115 个核心技巧》作者独辟蹊径，将着眼点放在Node.js 的核心模块和网络应用，通过精心组织的丰富实例，向读者充分展示了Node.js 强大的并发处理能力，读者从中可真正掌握Node 的核心基础与高级技巧。</p><p>《Node.js 硬实战：115 个核心技巧》总共有三部分内容，第一部分是Node.js 的基础核心，涉及Buffer、流、网络和进程等相关知识；第二部分是项目实践，涉及测试、Web 开发、调试，生产环境等重要话题；第三部分则完整创建了一个Node.js 模块。每部分涉及的技术都有详细讲解及注释详尽的示例代码，以帮助读者们更好地理解要点及其应用。</p><p><strong>Remarks:</strong></p><blockquote><p>nodejs学习不可错过的一本好书，注重解决实际问题，而且选题绝不肤浅，能学到不少知识。<br>更加深入了解node.js的好书<br>内容确实有些过时了</p></blockquote><h3 id="响应式Web设计"><a href="#响应式Web设计" class="headerlink" title="响应式Web设计"></a>响应式Web设计</h3><div align="center"><br><img src="https://img3.doubanio.com/view/subject/l/public/s24423104.jpg"><br></div><p>随着iPad mini的发布，又一个新的屏幕尺寸诞生了。用不着全面统计，你就会发现移动互联网时代众多的屏幕规格，从智能手机的3、4、5英寸，到平板电脑的7、8、9、10英寸，再到笔记本和台式机的13至30英寸，绝非目前单一的固定或流式布局所能应付。于是，响应式设计应运而生，而且它也将成为移动互联网时代前端设计与开发人员的一门必修课。</p><p>本书堪称学习响应式Web设计的难得佳作。它不仅全面、细致、图文并茂地介绍了响应式设计相关的技术，比如媒体查询、流式布局、弹性媒体和弹性字体等，还把近几年来Web设计领域公认的最佳设计理念有机地融入到了实例当中，比如移动先行（Mobile First）、渐进增强、平稳退化、无障碍设计等。更加难得的是，本书以设计跨屏幕的网页（响应式设计）为出发点，以点带面，把如今Web设计领域两大标准的最新版本HTML5和CSS3也纳入其中，读者在掌握先进设计方法的同时也能掌握最新的设计技术（比如使用新的HTML5结构化语义标记、嵌入媒体、响应式视频，以及CSS3的新选择器、特效、过渡、变形和动画等），从而可以免除重复学习新标准之苦，让自己一步跨入Web设计领域的最前沿。无论你想学习响应式Web设计，还是学习HTML5和CSS3的实际应用，本书都能满足你的需要，是毋庸置疑的明智之选。</p><p>说到底，响应式Web设计并非一门独立的技术，而只是现有技术的一个组合应用。只要有一点HTML和CSS基础的读者都能顺利地掌握它。对于中、高级的前端设计和开发人员，翻阅本书也有助于理清自己的知识脉络，对这个新的设计理念获得更全面、深入的理解和把握。</p><p><strong>Remarks</strong></p><blockquote><p>多为HTML5和CSS3的内容，百分之四十讲得响应式设计</p></blockquote><h3 id="JavaScript高效图形编程"><a href="#JavaScript高效图形编程" class="headerlink" title="JavaScript高效图形编程"></a>JavaScript高效图形编程</h3><div align="center"><br><img src="https://img3.doubanio.com/view/subject/l/public/s27269295.jpg"><br></div><p>《JavaScript高效图形编程》是一本具有很强实操性的JavaScript图书，全书共分10章，涵盖的主要内容有：JavaScript的面向对象机制、JavaScript性能优化、jQuery和ExtJS库、高级UI设计、Web游戏开发、面向移动设备的开发、图形编程知识等。</p><p>《JavaScript高效图形编程》适合有一定Web开发经验和JavaScript基础的开发人员学习。</p><p><strong>Remarks</strong><br>图形编程对前端游戏开发很有用！如图形和精灵的动画展现，还有TileMap这类2D地图游戏和背景移动，再直接扔给你一个纯JS写的小蜜蜂游戏，期间加入Html5的画板介绍，模拟物理炮弹轨迹现顺便把之前写的精灵动画使用画板，最后告诉你JS编写的应用如何在手机上执行，介绍得挺好的，广度深度兼顾。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2018年五月书单～&lt;/p&gt;
    
    </summary>
    
    
      <category term="reading" scheme="onlookerliu.github.io/tags/reading/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的双向数据绑定</title>
    <link href="onlookerliu.github.io/2018/05/03/Vue%E4%B8%AD%E7%9A%84%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
    <id>onlookerliu.github.io/2018/05/03/Vue中的双向数据绑定/</id>
    <published>2018-05-03T05:47:23.000Z</published>
    <updated>2018-05-07T08:51:45.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h2><p>Vue的双线数据绑定的原理主要是通过<code>Object</code>对象的<code>defineProperty</code>属性，重写<code>data</code>的<code>set</code>和<code>get</code>函数来实现的，这里通过一个实例来说明。主要实现v-model，v-bind和v-click三个命令，其他命令也可以自行补充。</p><a id="more"></a><p>添加网上的一张图</p><h2 id="2-实现"><a href="#2-实现" class="headerlink" title="2. 实现"></a>2. 实现</h2><p>页面结构很简单，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"number"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">v-click</span>=<span class="string">"increment"</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>包含:</p><ol><li>一个input，使用v-model指令</li><li>一个button，使用v-click指令</li><li>一个h3，使用v-bind指令</li></ol><p>我们最后会通过类似与Vue的方式来使用我们的双向数据绑定，结合我们的数据结构添加注释：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> myVue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        number: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.number++;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>首先我们需要定义一个myVue构造函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myVue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了初始化这个构造函数，给它添加一个<code>_init</code>属性：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myVue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._init(options);</span><br><span class="line">&#125;</span><br><span class="line">myVue.prototype._init = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el);</span><br><span class="line">    <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">    <span class="keyword">this</span>.$methods = options.methods;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来实现 <code>_obverse</code>函数，对data进行处理，重写data的set和get函数，并改造_init函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">myVue.prototype._obverse = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value;</span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">            value = obj[key];</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>._obverse(value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.$data, key, &#123;</span><br><span class="line">                enumerable: <span class="literal">true</span>,</span><br><span class="line">                configurable: <span class="literal">true</span>,</span><br><span class="line">                get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`获取<span class="subst">$&#123;value&#125;</span>`</span>);</span><br><span class="line">                    <span class="keyword">return</span> value;</span><br><span class="line">                &#125;,</span><br><span class="line">                set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">`更新<span class="subst">$&#123;newValue&#125;</span>`</span>);</span><br><span class="line">                    <span class="keyword">if</span> (value !== newValue) &#123;</span><br><span class="line">                        value = newValue;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myVue.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$options = options;</span><br><span class="line">    <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el);</span><br><span class="line">    <span class="keyword">this</span>.$data = options.data;</span><br><span class="line">    <span class="keyword">this</span>.$methods = options.methods;</span><br><span class="line">    <span class="keyword">this</span>._obverse(<span class="keyword">this</span>.$data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们写一个指令类Watcher，用来绑定更新函数，实现对DOM元素的更新：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">name, el, vm, exp, attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.el = el;</span><br><span class="line">    <span class="keyword">this</span>.vm = vm;</span><br><span class="line">    <span class="keyword">this</span>.exp = exp;</span><br><span class="line">    <span class="keyword">this</span>.attr = attr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.update();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Watcher.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.el[<span class="keyword">this</span>.attr] = <span class="keyword">this</span>.vm.$data[<span class="keyword">this</span>.exp];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更新<code>_init</code>函数以及<code>_obverse</code>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">myVue.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._binding = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myVue.prototype._obverse = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span><br><span class="line">        <span class="keyword">this</span>._binding[key] = &#123;</span><br><span class="line">            _directives: []</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> binding = <span class="keyword">this</span>._binding[key];</span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.$data, key, &#123;</span><br><span class="line">            set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">`更新<span class="subst">$&#123;newVal&#125;</span>`</span>);</span><br><span class="line">                <span class="keyword">if</span> (value !== newVal) &#123;</span><br><span class="line">                    value = newVal;</span><br><span class="line">                    binding._directives.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">                        item.update();</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么如何将view与model进行绑定呢？接下来我们定义一个<code>_compile</code>函数，用来解析我们的指令(v-bind, v-model, v-clicked)等，并在这个过程中对view与model进行绑定。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">myVue.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._compile(<span class="keyword">this</span>.$el);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myVue.prototype._compile = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> nodes = root.children;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> node = nodes[i];</span><br><span class="line">        <span class="keyword">if</span> (node.children.length) &#123;</span><br><span class="line">            <span class="keyword">this</span>._compile(node);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-click'</span>)) &#123;</span><br><span class="line">            node.onclick = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> attrVal = nodes[i].getAttribute(<span class="string">'v-click'</span>);</span><br><span class="line">                <span class="keyword">return</span> _this.$methods[attrVal].bind(_this.$data);</span><br><span class="line">            &#125;)();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-model'</span>) &amp;&amp; (node.tagName == <span class="string">'INPUT'</span> || node.tagName == <span class="string">'TEXTAREA'</span>)) &#123;</span><br><span class="line">            node.addEventListener(<span class="string">'input'</span>, (<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">'v-model'</span>);</span><br><span class="line">                _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span><br><span class="line">                    <span class="string">'input'</span>,</span><br><span class="line">                    node,</span><br><span class="line">                    _this,</span><br><span class="line">                    attrVal,</span><br><span class="line">                    <span class="string">'value'</span></span><br><span class="line">                ))</span><br><span class="line">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    _this.$data[attrVal] = nodes[key].value;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)(i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-bind'</span>)) &#123;</span><br><span class="line">            <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">'v-bind'</span>);</span><br><span class="line">            _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span><br><span class="line">                <span class="string">'text'</span>,</span><br><span class="line">                node,</span><br><span class="line">                _this,</span><br><span class="line">                attrVal,</span><br><span class="line">                <span class="string">'innerHTML'</span></span><br><span class="line">            ))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们已经实现了一个简单vue的双向绑定功能，包括v-bind，v-model，v-click三个指令。效果如下</p><p>附上全部代码，不到150行</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>myVue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  #app &#123;</span></span><br><span class="line"><span class="undefined">      text-align: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"number"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">v-click</span>=<span class="string">"increment"</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-bind</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">myVue</span>(<span class="params">options</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>._init(options);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  myVue.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$options = options;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$el = <span class="built_in">document</span>.querySelector(options.el);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$data = options.data;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$methods = options.methods;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>._binding = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>._obverse(<span class="keyword">this</span>.$data);</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>._compile(<span class="keyword">this</span>.$el);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  myVue.prototype._obverse = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> value;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (obj.hasOwnProperty(key)) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>._binding[key] = &#123;</span></span><br><span class="line"><span class="undefined">                  _directives: []</span></span><br><span class="line"><span class="undefined">              &#125;;</span></span><br><span class="line"><span class="undefined">              value = obj[key];</span></span><br><span class="line"><span class="javascript">              <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">'object'</span>) &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>._obverse(value);</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> binding = <span class="keyword">this</span>._binding[key];</span></span><br><span class="line"><span class="javascript">              <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>.$data, key, &#123;</span></span><br><span class="line"><span class="javascript">                  enumerable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                  configurable: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                  get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                      <span class="built_in">console</span>.log(<span class="string">`获取<span class="subst">$&#123;value&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">                      <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="undefined">                  &#125;,</span></span><br><span class="line"><span class="javascript">                  set: <span class="function"><span class="keyword">function</span>(<span class="params">newVal</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                      <span class="built_in">console</span>.log(<span class="string">`更新<span class="subst">$&#123;newVal&#125;</span>`</span>);</span></span><br><span class="line"><span class="javascript">                      <span class="keyword">if</span> (value !== newVal) &#123;</span></span><br><span class="line"><span class="undefined">                          value = newVal;</span></span><br><span class="line"><span class="javascript">                          binding._directives.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                              item.update();</span></span><br><span class="line"><span class="undefined">                          &#125;)</span></span><br><span class="line"><span class="undefined">                      &#125;</span></span><br><span class="line"><span class="undefined">                  &#125;</span></span><br><span class="line"><span class="undefined">              &#125;)</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  myVue.prototype._compile = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> nodes = root.children;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">var</span> node = nodes[i];</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (node.children.length) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">this</span>._comiple(node);</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-click'</span>)) &#123;</span></span><br><span class="line"><span class="javascript">              node.onclick = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> attrVal = nodes[i].getAttribute(<span class="string">'v-click'</span>);</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">return</span> _this.$methods[attrVal].bind(_this.$data);</span></span><br><span class="line"><span class="undefined">              &#125;)();</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-model'</span>) &amp;&amp; (node.tagName == <span class="string">'INPUT'</span> || node.tagName == <span class="string">'TEXTAREA'</span>)) &#123;</span></span><br><span class="line"><span class="javascript">              node.addEventListener(<span class="string">'input'</span>, (<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">'v-model'</span>);</span></span><br><span class="line"><span class="javascript">                  _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span></span><br><span class="line"><span class="javascript">                      <span class="string">'input'</span>,</span></span><br><span class="line"><span class="undefined">                      node,</span></span><br><span class="line"><span class="undefined">                      _this,</span></span><br><span class="line"><span class="undefined">                      attrVal,</span></span><br><span class="line"><span class="javascript">                      <span class="string">'value'</span></span></span><br><span class="line"><span class="undefined">                  ))</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                      _this.$data[attrVal] = nodes[key].value;</span></span><br><span class="line"><span class="undefined">                  &#125;</span></span><br><span class="line"><span class="undefined">              &#125;)(i));</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (node.hasAttribute(<span class="string">'v-bind'</span>)) &#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">var</span> attrVal = node.getAttribute(<span class="string">'v-bind'</span>);</span></span><br><span class="line"><span class="javascript">              _this._binding[attrVal]._directives.push(<span class="keyword">new</span> Watcher(</span></span><br><span class="line"><span class="javascript">                  <span class="string">'text'</span>,</span></span><br><span class="line"><span class="undefined">                  node,</span></span><br><span class="line"><span class="undefined">                  _this,</span></span><br><span class="line"><span class="undefined">                  attrVal,</span></span><br><span class="line"><span class="javascript">                  <span class="string">'innerHTML'</span></span></span><br><span class="line"><span class="undefined">              ))</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">Watcher</span>(<span class="params">name, el, vm, exp, attr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.name = name;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.el = el;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.vm = vm;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.exp = exp;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.attr = attr;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.update();</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Watcher.prototype.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.el[<span class="keyword">this</span>.attr] = <span class="keyword">this</span>.vm.$data[<span class="keyword">this</span>.exp];</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> app = <span class="keyword">new</span> myVue(&#123;</span></span><br><span class="line"><span class="javascript">          el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">          data: &#123;</span></span><br><span class="line"><span class="undefined">              number: 0</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          methods: &#123;</span></span><br><span class="line"><span class="javascript">              increment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                  <span class="keyword">this</span>.number++;</span></span><br><span class="line"><span class="undefined">              &#125;,</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-原理&quot;&gt;&lt;a href=&quot;#1-原理&quot; class=&quot;headerlink&quot; title=&quot;1. 原理&quot;&gt;&lt;/a&gt;1. 原理&lt;/h2&gt;&lt;p&gt;Vue的双线数据绑定的原理主要是通过&lt;code&gt;Object&lt;/code&gt;对象的&lt;code&gt;defineProperty&lt;/code&gt;属性，重写&lt;code&gt;data&lt;/code&gt;的&lt;code&gt;set&lt;/code&gt;和&lt;code&gt;get&lt;/code&gt;函数来实现的，这里通过一个实例来说明。主要实现v-model，v-bind和v-click三个命令，其他命令也可以自行补充。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
      <category term="vue" scheme="onlookerliu.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 028</title>
    <link href="onlookerliu.github.io/2018/04/22/LeetCode-Notes-028/"/>
    <id>onlookerliu.github.io/2018/04/22/LeetCode-Notes-028/</id>
    <published>2018-04-21T16:01:11.000Z</published>
    <updated>2018-05-13T16:15:09.809Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Fizz-Buzz"><a href="#Fizz-Buzz" class="headerlink" title="Fizz Buzz"></a>Fizz Buzz</h3><p>Write a program that outputs the string representation of numbers from 1 to n.</p><p>But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">n = 15,</span><br><span class="line"></span><br><span class="line">Return:</span><br><span class="line">[</span><br><span class="line">    &quot;1&quot;,</span><br><span class="line">    &quot;2&quot;,</span><br><span class="line">    &quot;Fizz&quot;,</span><br><span class="line">    &quot;4&quot;,</span><br><span class="line">    &quot;Buzz&quot;,</span><br><span class="line">    &quot;Fizz&quot;,</span><br><span class="line">    &quot;7&quot;,</span><br><span class="line">    &quot;8&quot;,</span><br><span class="line">    &quot;Fizz&quot;,</span><br><span class="line">    &quot;Buzz&quot;,</span><br><span class="line">    &quot;11&quot;,</span><br><span class="line">    &quot;Fizz&quot;,</span><br><span class="line">    &quot;13&quot;,</span><br><span class="line">    &quot;14&quot;,</span><br><span class="line">    &quot;FizzBuzz&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fizzBuzz = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">3</span> === <span class="number">0</span>)</span><br><span class="line">      str += <span class="string">'Fizz'</span>;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">5</span> === <span class="number">0</span>)</span><br><span class="line">      str += <span class="string">'Buzz'</span>;</span><br><span class="line">    <span class="keyword">if</span> (str === <span class="string">''</span>)</span><br><span class="line">      str += i;</span><br><span class="line"></span><br><span class="line">    ans.push(str);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Flatten-Binary-Tree-to-Linked-List"><a href="#Flatten-Binary-Tree-to-Linked-List" class="headerlink" title="Flatten Binary Tree to Linked List"></a>Flatten Binary Tree to Linked List</h3><p>Given a binary tree, flatten it to a linked list in-place.</p><p>For example, given the following tree:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   5</span><br><span class="line"> / \   \</span><br><span class="line">3   4   6</span><br></pre></td></tr></table></figure><p>The flattened tree should look like:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line">   \</span><br><span class="line">    3</span><br><span class="line">     \</span><br><span class="line">      4</span><br><span class="line">       \</span><br><span class="line">        5</span><br><span class="line">         \</span><br><span class="line">          6</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125; Do not return anything, modify root in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> flatten = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root)</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line">  dfs(root, arr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len - <span class="number">1</span>; i++)</span><br><span class="line">    arr[i].right = arr[i + <span class="number">1</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> left = node.left;</span><br><span class="line">  <span class="keyword">var</span> right = node.right;</span><br><span class="line"></span><br><span class="line">  node.left = node.right = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">window</span>.arr.push(node);</span><br><span class="line"></span><br><span class="line">  left &amp;&amp; dfs(left);</span><br><span class="line">  right &amp;&amp; dfs(right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Flatten-Nested-List-Iterator"><a href="#Flatten-Nested-List-Iterator" class="headerlink" title="Flatten Nested List Iterator"></a>Flatten Nested List Iterator</h3><p>Given a nested list of integers, implement an iterator to flatten it.</p><p>Each element is either an integer, or a list – whose elements may also be integers or other lists.</p><p><strong>Example 1:</strong><br>Given the list <code>[[1,1],2,[1,1]]</code>,</p><p>By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: <code>[1,1,2,1,1]</code>.</p><p><strong>Example 2:</strong></p><p>Given the list <code>[1,[4,[6]]]</code>,</p><p>By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: <code>[1,4,6]</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * // This is the interface that allows for creating nested lists.</span></span><br><span class="line"><span class="comment"> * // You should not implement it, or speculate about its implementation</span></span><br><span class="line"><span class="comment"> * function NestedInteger() &#123;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     Return true if this NestedInteger holds a single integer, rather than a nested list.</span></span><br><span class="line"><span class="comment"> *     @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> *     this.isInteger = function() &#123;</span></span><br><span class="line"><span class="comment"> *         ...</span></span><br><span class="line"><span class="comment"> *     &#125;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     Return the single integer that this NestedInteger holds, if it holds a single integer</span></span><br><span class="line"><span class="comment"> *     Return null if this NestedInteger holds a nested list</span></span><br><span class="line"><span class="comment"> *     @return &#123;integer&#125;</span></span><br><span class="line"><span class="comment"> *     this.getInteger = function() &#123;</span></span><br><span class="line"><span class="comment"> *         ...</span></span><br><span class="line"><span class="comment"> *     &#125;;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *     Return the nested list that this NestedInteger holds, if it holds a nested list</span></span><br><span class="line"><span class="comment"> *     Return null if this NestedInteger holds a single integer</span></span><br><span class="line"><span class="comment"> *     @return &#123;NestedInteger[]&#125;</span></span><br><span class="line"><span class="comment"> *     this.getList = function() &#123;</span></span><br><span class="line"><span class="comment"> *         ...</span></span><br><span class="line"><span class="comment"> *     &#125;;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> * @param &#123;NestedInteger[]&#125; nestedList</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> NestedIterator = <span class="function"><span class="keyword">function</span>(<span class="params">nestedList</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.a = nestedList;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @this NestedIterator</span></span><br><span class="line"><span class="comment"> * @returns &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NestedIterator.prototype.hasNext = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.a.length)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="keyword">this</span>.a.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.a[<span class="number">0</span>] <span class="keyword">instanceof</span> NestedInteger) &#123;</span><br><span class="line">      <span class="keyword">var</span> obj = <span class="keyword">this</span>.a.shift();</span><br><span class="line">      <span class="comment">// if a[0] is List</span></span><br><span class="line">      <span class="keyword">if</span> (!obj.isInteger()) &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = obj.getList();</span><br><span class="line">        <span class="keyword">if</span> (arr.length) </span><br><span class="line">          <span class="built_in">Array</span>.prototype.unshift.apply(<span class="keyword">this</span>.a, arr);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> item = obj.getInteger();</span><br><span class="line">        <span class="built_in">Array</span>.prototype.unshift.apply(<span class="keyword">this</span>.a, [item]);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @this NestedIterator</span></span><br><span class="line"><span class="comment"> * @returns &#123;integer&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NestedIterator.prototype.next = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.a.shift();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Fizz-Buzz&quot;&gt;&lt;a href=&quot;#Fizz-Buzz&quot; class=&quot;headerlink&quot; title=&quot;Fizz Buzz&quot;&gt;&lt;/a&gt;Fizz Buzz&lt;/h3&gt;&lt;p&gt;Write a program that outputs the string representation of numbers from 1 to n.&lt;/p&gt;
&lt;p&gt;But for multiples of three it should output “Fizz” instead of the number and for the multiples of five output “Buzz”. For numbers which are multiples of both three and five output “FizzBuzz”.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;n = 15,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Return:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;1&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;2&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;Fizz&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;4&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;Buzz&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;Fizz&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;7&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;8&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;Fizz&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;Buzz&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;11&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;Fizz&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;13&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;14&amp;quot;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;quot;FizzBuzz&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 027</title>
    <link href="onlookerliu.github.io/2018/04/20/LeetCode-Notes-027/"/>
    <id>onlookerliu.github.io/2018/04/20/LeetCode-Notes-027/</id>
    <published>2018-04-20T08:24:05.000Z</published>
    <updated>2018-05-13T16:14:58.429Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Find-th-Difference"><a href="#Find-th-Difference" class="headerlink" title="Find th Difference"></a>Find th Difference</h3><p>Given two strings <code>s</code> and <code>t</code> which consist of only lowercase letters.</p><p>String <code>t</code> is generated by random shuffling string <code>s</code> and then add one more letter at a random position.</p><p>Find the letter that was added in <code>t</code>.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">s = &quot;abcd&quot;</span><br><span class="line">t = &quot;abcde&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">e</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">&apos;e&apos; is the letter that was added.</span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; t</span></span><br><span class="line"><span class="comment"> * @return &#123;character&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findTheDifference = <span class="function"><span class="keyword">function</span>(<span class="params">s, t</span>) </span>&#123;</span><br><span class="line">  s = s.split(<span class="string">''</span>).sort();</span><br><span class="line">  t = t.split(<span class="string">''</span>).sort();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = t.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s[i] !== t[i])</span><br><span class="line">      <span class="keyword">return</span> t[i];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Find-the-Duplicate-Number"><a href="#Find-the-Duplicate-Number" class="headerlink" title="Find the Duplicate Number"></a>Find the Duplicate Number</h3><p>Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), prove that at least one duplicate number must exist. Assume that there is only one duplicate number, find the duplicate one.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,3,4,2,2]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,1,3,4,2]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure></p><p>`<br><strong>Note:</strong></p><ol><li>You must not modify the array (assume the array is read only).</li><li>You must use only constant, O(1) extra space.</li><li>Your runtime complexity should be less than O(n2).</li><li>There is only one duplicate number in the array, but it could be repeated more than once.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间复杂度O(n) &amp; 空间复杂度O(n)</span></span><br><span class="line"><span class="comment">// 如果要求时间复杂度O(nlogn) &amp; 空间复杂度O(1) 的解法</span></span><br><span class="line"><span class="comment">// 提供一种思路。用一个 string 存储数字，用一个特殊字符隔开</span></span><br><span class="line"><span class="comment">// 比如 "1,2,2,3,3,4,5,6"</span></span><br><span class="line"><span class="comment">// 然后二分查找，插入，因为插入只是 string 的简单拼接，所以速度应该不慢</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = nums.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = nums[i];</span><br><span class="line">    <span class="keyword">if</span> (!hash[item])</span><br><span class="line">      hash[item] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="First-Bad-Version"><a href="#First-Bad-Version" class="headerlink" title="First Bad Version"></a>First Bad Version</h3><p>You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.</p><p>Suppose you have n versions [1, 2, …, n] and you want to find out the first bad one, which causes all the following ones to be bad.</p><p>You are given an API bool isBadVersion(version) which will return whether version is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><figcaption><span>n </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">call isBadVersion(3) -&gt; false</span><br><span class="line">call isBadVersion(5) -&gt; true</span><br><span class="line">call isBadVersion(4) -&gt; true</span><br><span class="line"></span><br><span class="line">Then 4 is the first bad version.</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for isBadVersion()</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param &#123;integer&#125; version number</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125; whether the version is bad</span></span><br><span class="line"><span class="comment"> * isBadVersion = function(version) &#123;</span></span><br><span class="line"><span class="comment"> *     ...</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125; isBadVersion()</span></span><br><span class="line"><span class="comment"> * @return &#123;function&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// easy binary search</span></span><br><span class="line"><span class="comment">// 有个坑，数据量很大，不能用位运算 ~~ 以及 &gt;&gt; 1</span></span><br><span class="line"><span class="comment">// 用 Math.floor(), Math.ceil() 以及 / 2 代替</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> solution = <span class="function"><span class="keyword">function</span>(<span class="params">isBadVersion</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param &#123;integer&#125; n Total versions</span></span><br><span class="line"><span class="comment">     * @return &#123;integer&#125; The first bad version</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> start = <span class="number">1</span></span><br><span class="line">        , end = n;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">        <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor((start + end) / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (isBadVersion(mid) === <span class="literal">true</span>) </span><br><span class="line">          end = mid - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">          start = mid + <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> start;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="First-Missing-Positive"><a href="#First-Missing-Positive" class="headerlink" title="First Missing Positive"></a>First Missing Positive</h3><p>Given an unsorted integer array, find the smallest missing positive integer.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [1,2,0]</span><br><span class="line">Output: 3</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [3,4,-1,1]</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure></p><p><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: [7,8,9,11,12]</span><br><span class="line">Output: 1</span><br></pre></td></tr></table></figure></p><h3 id="First-Unique-Character-in-a-String"><a href="#First-Unique-Character-in-a-String" class="headerlink" title="First Unique Character in a String"></a>First Unique Character in a String</h3><p>Given a string, find the first non-repeating character in it and return it’s index. If it doesn’t exist, return -1.</p><p><strong>Examples:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;leetcode&quot;</span><br><span class="line">return 0.</span><br><span class="line"></span><br><span class="line">s = &quot;loveleetcode&quot;,</span><br><span class="line">return 2.</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> firstUniqChar = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = s.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = s[i];</span><br><span class="line">    <span class="keyword">if</span> (s.lastIndexOf(item) === s.indexOf(item))</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Find-th-Difference&quot;&gt;&lt;a href=&quot;#Find-th-Difference&quot; class=&quot;headerlink&quot; title=&quot;Find th Difference&quot;&gt;&lt;/a&gt;Find th Difference&lt;/h3&gt;&lt;p&gt;Given two strings &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt; which consist of only lowercase letters.&lt;/p&gt;
&lt;p&gt;String &lt;code&gt;t&lt;/code&gt; is generated by random shuffling string &lt;code&gt;s&lt;/code&gt; and then add one more letter at a random position.&lt;/p&gt;
&lt;p&gt;Find the letter that was added in &lt;code&gt;t&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = &amp;quot;abcd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;t = &amp;quot;abcde&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;apos;e&amp;apos; is the letter that was added.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 026</title>
    <link href="onlookerliu.github.io/2018/04/14/LeetCode-Notes-026/"/>
    <id>onlookerliu.github.io/2018/04/14/LeetCode-Notes-026/</id>
    <published>2018-04-14T14:06:19.000Z</published>
    <updated>2018-04-18T16:10:32.218Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Find-Minimum-in-Rotated-Sorted-Array"><a href="#Find-Minimum-in-Rotated-Sorted-Array" class="headerlink" title="Find Minimum in Rotated Sorted Array"></a>Find Minimum in Rotated Sorted Array</h3><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p><p>Find the minimum element.</p><p>You may assume no duplicate exists in the array.</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findMin = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, nums);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Find-Minimum-in-Rotated-Sorted-Array-II"><a href="#Find-Minimum-in-Rotated-Sorted-Array-II" class="headerlink" title="Find Minimum in Rotated Sorted Array II"></a>Find Minimum in Rotated Sorted Array II</h3><blockquote><p>Follow up for “Find Minimum in Rotated Sorted Array”:<br>What if duplicates are allowed?</p><p>Would this affect the run-time complexity? How and why?</p></blockquote><p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p><p>(i.e., <code>0 1 2 4 5 6 7</code> might become <code>4 5 6 7 0 1 2</code>).</p><p>Find the minimum element.</p><p>The array may contain duplicates.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findMin = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, nums);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Find-Mode-in-Binary-Search-Tree"><a href="#Find-Mode-in-Binary-Search-Tree" class="headerlink" title="Find Mode in Binary Search Tree"></a>Find Mode in Binary Search Tree</h3><p>Given a binary search tree (BST) with duplicates, find all the mode(s) (the most frequently occurred element) in the given BST.</p><p>Assume a BST is defined as follows:</p><ul><li>The left subtree of a node contains only nodes with keys less than or equal to the node’s key.</li><li>The right subtree of a node contains only nodes with keys greater than or equal to the node’s key.</li><li>Both the left and right subtrees must also be binary search trees.</li></ul><p>For example:<br>Given BST <code>[1,null,2,2]</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> /</span><br><span class="line">2</span><br></pre></td></tr></table></figure><p>return [2].</p><p>Note: If a tree has more than one mode, you can return them in any order.</p><p>Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findMode = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> helper = <span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> val = node.val;</span><br><span class="line">    hash[val] = (~~hash[val]) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (node.left)</span><br><span class="line">      helper(node.left);</span><br><span class="line">    <span class="keyword">if</span> (node.right)</span><br><span class="line">      helper(node.right);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  root &amp;&amp; helper(root);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  <span class="keyword">let</span> maxn = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> hash) &#123;</span><br><span class="line">    <span class="keyword">let</span> val = hash[key];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (val &gt; maxn) &#123;</span><br><span class="line">      maxn = val;</span><br><span class="line">      ans = [+key];</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val === maxn) &#123;</span><br><span class="line">      ans.push(+key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Find-Peak-Element"><a href="#Find-Peak-Element" class="headerlink" title="Find Peak Element"></a>Find Peak Element</h3><p>A peak element is an element that is greater than its neighbors.</p><p>Given an input array where <code>num[i] ≠ num[i+1]</code>, find a peak element and return its index.</p><p>The array may contain multiple peaks, in that case return the index to any one of the peaks is fine.</p><p>You may imagine that <code>num[-1] = num[n] = -∞</code>.</p><p>For example, in array <code>[1, 2, 3, 1]</code>, 3 is a peak element and your function should return the index number 2.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> findPeakElement = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = nums.length;</span><br><span class="line">  nums[<span class="number">-1</span>] = nums[len] = -<span class="built_in">Number</span>.MAX_VALUE;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>] &amp;&amp; nums[i] &gt; nums[i + <span class="number">1</span>])</span><br><span class="line">      <span class="keyword">return</span> i;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Find-Right-Interval"><a href="#Find-Right-Interval" class="headerlink" title="Find Right Interval"></a>Find Right Interval</h3><p>Given a set of intervals, for each of the interval i, check if there exists an interval j whose start point is bigger than or equal to the end point of the interval i, which can be called that j is on the “right” of i.</p><p>For any interval i, you need to store the minimum interval j’s index, which means that the interval j has the minimum start point to build the “right” relationship for interval i. If the interval j doesn’t exist, store -1 for the interval i. Finally, you need output the stored value of each interval as an array.</p><p><strong>Note</strong></p><ul><li>You may assume the interval’s end point is always bigger than its start point.</li><li>You may assume none of these intervals have the same start point.</li></ul><p><strong>Example1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input: [ [1,2] ]</span><br><span class="line"></span><br><span class="line">Output: [-1]</span><br><span class="line"></span><br><span class="line">Explanation: There is only one interval in the collection, so it outputs -1.</span><br></pre></td></tr></table></figure></p><p><strong>Example2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: [ [3,4], [2,3], [1,2] ]</span><br><span class="line"></span><br><span class="line">Output: [-1, 0, 1]</span><br><span class="line"></span><br><span class="line">Explanation: There is no satisfied &quot;right&quot; interval for [3,4].</span><br><span class="line">For [2,3], the interval [3,4] has minimum-&quot;right&quot; start point;</span><br><span class="line">For [1,2], the interval [2,3] has minimum-&quot;right&quot; start point.</span><br></pre></td></tr></table></figure></p><p><strong>Example3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: [ [1,4], [2,3], [3,4] ]</span><br><span class="line"></span><br><span class="line">Output: [-1, 2, -1]</span><br><span class="line"></span><br><span class="line">Explanation: There is no satisfied &quot;right&quot; interval for [1,4] and [3,4].</span><br><span class="line">For [2,3], the interval [3,4] has minimum-&quot;right&quot; start point.</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for an interval.</span></span><br><span class="line"><span class="comment"> * function Interval(start, end) &#123;</span></span><br><span class="line"><span class="comment"> *     this.start = start;</span></span><br><span class="line"><span class="comment"> *     this.end = end;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;Interval[]&#125; intervals</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findRightInterval = <span class="function"><span class="keyword">function</span>(<span class="params">intervals</span>) </span>&#123;</span><br><span class="line">  intervals.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    item.index = index;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  intervals.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// different starting positions</span></span><br><span class="line">    <span class="keyword">return</span> a.start - b.start;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> len = intervals.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> f = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (intervals[j].start &gt;= intervals[i].end) &#123;</span><br><span class="line">        intervals[i].right = intervals[j].index;</span><br><span class="line">        f = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f &amp;&amp; (intervals[i].right = <span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  intervals.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// different starting positions</span></span><br><span class="line">    <span class="keyword">return</span> a.index - b.index;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  intervals.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    ans.push(item.right);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Find-Minimum-in-Rotated-Sorted-Array&quot;&gt;&lt;a href=&quot;#Find-Minimum-in-Rotated-Sorted-Array&quot; class=&quot;headerlink&quot; title=&quot;Find Minimum in Rotated Sorted Array&quot;&gt;&lt;/a&gt;Find Minimum in Rotated Sorted Array&lt;/h3&gt;&lt;p&gt;Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.&lt;/p&gt;
&lt;p&gt;(i.e., &lt;code&gt;0 1 2 4 5 6 7&lt;/code&gt; might become &lt;code&gt;4 5 6 7 0 1 2&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Find the minimum element.&lt;/p&gt;
&lt;p&gt;You may assume no duplicate exists in the array.&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>ML-Lectures Perceptron</title>
    <link href="onlookerliu.github.io/2018/04/13/ML-Lectures-Perceptron/"/>
    <id>onlookerliu.github.io/2018/04/13/ML-Lectures-Perceptron/</id>
    <published>2018-04-13T06:01:47.000Z</published>
    <updated>2018-04-13T17:35:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从感知机到简单神经网络"><a href="#从感知机到简单神经网络" class="headerlink" title="从感知机到简单神经网络"></a>从感知机到简单神经网络</h1><p>近年来，人工神经网络在深度学习的推动下获得了关注。什么是人造神经网络，它是由什么构成的？我想我们可能需要从感知器开始学起。</p><p>在这个讲座中，我们将严格推导感知机学习算法及其对偶理论，掌握一般的人工神经网络，并对单层甚至多层感知器进行编码实现。在几个实战例子中，我们采用人工神经元的最基本版本——感知器，来在超平面上对我们的数据集进行分类。</p><a id="more"></a><h2 id="0-什么是感知机？"><a href="#0-什么是感知机？" class="headerlink" title="0. 什么是感知机？"></a>0. 什么是感知机？</h2><p>感知机是<strong>二分类</strong>的线性分类模型，输入为实例的特征向量，输出为实例的类别（取+1和-1）。感知机对应于输入空间中<strong>将实例划分为两类</strong>的分离超平面。感知机属于判别模型(classifier)。</p><p>感知机旨在求出该超平面，为求得超平面导入了<strong>基于误分类的损失函数</strong>，利用<strong>梯度下降法</strong>对损失函数进行最优化。</p><h2 id="1-感知机模型"><a href="#1-感知机模型" class="headerlink" title="1. 感知机模型"></a>1. 感知机模型</h2><p>假设输入空间（特征向量）是 $\mathcal{X} \subseteq \mathbb{R}^n$，输出空间为 $\mathcal{Y} = {-1，+1}$. 输入 $X$ 表示实例的特征向量，对应于输入空间的点，输出 $y\in\mathcal{Y}$ 表示实例的类别，则由输入空间到输出空间的表达形式为：</p><p>$$<br>f(x) = \text{sign}(w \cdot x + b)<br>$$</p><p>其中 $w,b$ 称为模型的参数，$w$ 称为权值，$b$ 称为偏置，$ w\cdot x$表示为 $w,x$ 的内积. <code>sign</code>是符号函数</p><p>$$<br>\text{sign}(x) = \begin{cases}<br>+1 &amp; x &gt; 0 \<br>-1 &amp; x &lt; 0<br>\end{cases}<br>$$</p><p>如果我们将<code>sign</code>称之为激活函数的话，感知机与logistic regression的差别就是感知机激活函数是sign，logistic regression的激活函数是sigmoid.</p><p>$\text{sign}(x)​$ 将大于0的分为1，小于0的分为-1；sigmoid将大于0.5的分为1，小于0.5的分为0。因此sign又被称为单位阶跃函数，logistic regression也被看作是一种概率估计。(logistic后面会详细讲解)</p><p>感知机是一种线性分类模型，属于判别模型。感知机模型的假设空间是定义在特征空间中的所有线性分类模型(linear classification model)或线性分类器(linear classifier)，即函数集合 ${ f \mid f(x) = w \cdot x + b }$.</p><p>由感知机的线性方程表示 $w \cdot x + b = 0$ 可以看出它的几何意义：</p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/perceptron-2.1.png" width="300"><br></div><p>对于特征空间 $\mathbb{R}^n$ 中的一个超平面 $S$ ，其中 $w$ 是超平面的法向量，$b$是超平面的截距。这个超平面 (seperating hyperplane) 将特征空间分为两部分，位于两部分的点(特征向量)分别被分为正、负两类。</p><p>我们其实就是在<strong>学习参数 $w$ 与 $b$</strong>，确定了 $w$ 与 $b$，图上的直线（高维空间下为超平面）也就确定了，那么以后来一个数据点，我们用训练好的模型进行预测判断，如果大于 $0$ 就分类到 $+1$，如果小于 $0$ 就分类到 $-1$。</p><p>能这么做的原因其实是<a href="https://en.wikipedia.org/wiki/Hyperplane_separation_theorem" target="_blank" rel="noopener">超平面分离定理</a>：超平面分离定理是应用凸集到最优化理论中的重要结果，这个结果在最优化理论中有重要的位置。所谓两个凸集分离，直观地看是指两个凸集合没有交叉和重合的部分，因此<strong>可以用一张超平面将两者隔在两边</strong>。</p><p>如下图所示，在大于0的时候，我将数据点分类成了D类，在小于0的时候，我将数据点分类成了C类</p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/seperating.png" width="300"><br></div><h2 id="2-感知机学习策略"><a href="#2-感知机学习策略" class="headerlink" title="2. 感知机学习策略"></a>2. 感知机学习策略</h2><p>好了，上面我们已经知道感知机模型了，我们也知道他的任务是解决二分类问题，也知道了超平面的形式，那么下面关键是如何学习出超平面的参数 $w,b$，这就需要用到我们的学习策略。</p><p>我们知道机器学习模型，需要首先找到损失函数，然后转化为最优化问题，用梯度下降等方法进行更新，最终学习到我们模型的参数 $w,b$。</p><p>Ok, 我们开始来找感知机的损失函数:</p><p>我们很自然的会想到用误分类点的数目来作为损失函数，是的误分类点个数越来越少嘛，感知机本来也是做这种事的，只需要全部分对就好。</p><p>但是不幸的是，这样的损失函数并不是w，b连续可导（你根本就无法用函数形式来表达出误分类点的个数），无法进行优化。</p><p>于是我们想转为另一种选择，误分类点到超平面的总距离（直观来看，总距离越小越好）,距离公式如下</p><p>$$<br>\frac{1}{\Vert w \Vert} \vert w\cdot x_0 + b\vert<br>$$</p><p>而我们知道每一个<strong>误分类点</strong>都满足</p><p>$$<br>-y_i(w\cdot x_i + b) &gt; 0<br>$$</p><p>因为当我们数据点正确值为 $+1$ 的时候，你误分类了，那么你判断为 $-1$，则算出来$(w\cdot x_i+b)&lt;0$，可以将绝对值符号去掉，得到误分类点的距离为：</p><p>$$<br>-\frac{1}{\Vert w\Vert} y_i(w\cdot x_i + b)<br>$$</p><p>这样的话，假设超平面 $S$ 的误分类点集合为 $M$，那么所有误分类点到超平面 $S$ 的总距离为</p><p>$$<br>-\frac{1}{\Vert w\Vert} \sum_{x_i\in M} y_i(w\cdot x_i + b)<br>$$</p><p>不考虑 $\dfrac{1}{\Vert w\Vert}$，就得到了感知机学习的损失函数</p><p>$$<br>L(w, b) = -\sum_{x_i\in M} y_i(w\cdot x_i + b)<br>$$</p><p>其中 $M$ 为误分类点的数目，这个损失函数就是感知机学习的经验风险函数。</p><p><em>Question:</em><br>为什么可以不考虑 $\frac{1}{\Vert w\Vert}$，不用总距离表达式作为损失函数呢？</p><p><em>Answer:</em><br>感知机的任务是进行二分类工作，它最终并不关心得到的超平面离各点的距离有多少（所以我们最后才可以不考虑$\Vert w\Vert$），只是关心我最后是否已经正确分类正确（也就是考虑误分类点的个数），比如说下面红色与绿线，对于感知机来说，效果任务是一样好的。</p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/640.png" width="250"><br></div><p>但是在SVM的评价标准中，绿线是要比红线好的。对比书中SVM示意图</p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/svm.png" width="250"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/large_margin_intuition.jpg" width="300"><br></div><p>考虑这样右边的分类问题</p><p>可以看出</p><ul><li>感知机追求最大程度正确划分，最小化错误，效果类似紫线，很容易造成过拟合。</li><li>支持向量机追求在大致正确分类的同时，最大化margin，一定程度上避免了过拟合，效果类似黑线。margin可以理解为黑线到圈类和叉类之间的最短距离。</li><li>去掉距离限制的SVM，就是一种PLA，当然先不考虑核。</li></ul><p>这里我们可以不考虑 $\Vert w\Vert$，直接去掉它，因为这个时候我们只考虑误分类点，当一个误分类点出现的时候，我们进行梯度下降，对 $w,b$ 进行改变即可！</p><p>跟距离没有什么关系了，因为 $w$ 的范数始终是大于0，对于我们判断是否为误分类点（我们是通过 $-y_i(w\cdot x_i+b)&gt;0$ 来判断是否为误分类点）没有影响！</p><p>这也回到了我们最初始想要作为损失函数的误分类点的个数，<u>引入距离，只是将它推导出一个可导的形式！</u></p><p>最后说一句，我个人认为不去掉 $\Vert w\Vert$，也是一样可以得到最后的正确分类超平面，就是直接用距离来当做损失函数也是可以的，可能是求梯度比较复杂，或者是感知机本身就是用误分类点来区分，就没用这个损失函数了。</p><p>根据知乎吴洋文章中所做的实验，不考虑$\Vert w\Vert$ 的时候，结果如下:</p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/noNorm.png" width="400"><br></div><p>考虑$\Vert w\Vert$ 的时候，结果如下:</p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/hasNorm.png" width="400"><br></div><p>可以看到，无论是否考虑，实验收敛次数并没有改变！</p><p>那么好了，我们已经得到了损失函数了，后面直接讲解如何梯度下降，收敛到分类正确为止。</p><h2 id="3-感知机学习算法"><a href="#3-感知机学习算法" class="headerlink" title="3. 感知机学习算法"></a>3. 感知机学习算法</h2><h3 id="3-1-感知机学习算法的原始形式"><a href="#3-1-感知机学习算法的原始形式" class="headerlink" title="3.1 感知机学习算法的原始形式"></a>3.1 感知机学习算法的原始形式</h3><p>当我们已经有了一个目标是最小化损失函数，我们就可以用常用的梯度下降方法来进行更新，对w，b参数分别进行求偏导可得：</p><p>$$<br>\begin{split}<br>&amp;\nabla<em>w L(w,b) = -\sum</em>{x_i\in M} y_ix_i \<br>&amp;\nabla<em>b L(w,b) = -\sum</em>{x_i\in M} y_i<br>\end{split}<br>$$</p><p>那么我们任意初始化 $w, b$ 之后，碰到误分类点时，采取的权值更新为 $w,b$分别为：</p><p>$$<br>\begin{split}<br>&amp;w = w + \sum_{x_i\in M} y_ix<em>i \<br>&amp;b = b + \sum</em>{x_i\in M} y_i<br>\end{split}<br>$$</p><p>好了，当我们碰到误分类点的时候，我们就采取上面的更新步骤进行更新参数即可！但李航博士在书中并不是用到所有误分类点的数据点来进行更新，而是采取==随机梯度下降法==（stochastic gradient descent）。</p><p>步骤如下，首先，任取一个超平面 $w_0, b0$，然后用梯度下降法不断地极小化目标函数，极小化过程中<strong>不是一次使M中所有误分类点的梯度下降</strong>而是<strong>一次随机选取一个误分类点使其梯度下降</strong></p><p><strong>Remark:</strong><br>有证明可以证明随机梯度下降可以收敛，并且收敛速度快于批量梯度下降，在这里不是我们考虑的重点，我们默认为它能收敛到最优点即可</p><p>那么碰到误分类点的时候，采取的权值更新 $w, b$ 分别为:</p><p>$$<br>\begin{split}<br>&amp;w = w + \eta\, y_ix_i \<br>&amp;b = b + \eta\, y_i<br>\end{split}<br>$$</p><p>好了，至此我们可以给出整个感知机学习过程算法！如下：</p><h4 id="Algorithm-1"><a href="#Algorithm-1" class="headerlink" title="Algorithm 1:"></a><strong>Algorithm 1:</strong></h4><ol><li>选定初值 $w_0,b_0$，相当于初始给了一个超平面</li><li>在训练集中选取数据 $(x_i, y_i)$ (任意抽取数据点，判断是否所有数据点判断完成没有误分类点了，如果没有了，直接结束算法，如果还有进入3.)</li><li>若 $y_i(w \cdot x_i + b) \leq 0$，说明是误分类点，需要进行参数更新，更新方式如下<br>$$<br>\begin{split}<br>&amp;w = w + \eta\, y_ix_i \<br>&amp;b = b + \eta\, y_i<br>\end{split}<br>$$</li><li>转到2.，直到训练集中没有误分类点</li></ol><p>对于第三步的更新方式，我们有一个直观上的感觉，可视化如下图</p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/update-1.png" width="150"><br></div><p>当我们数据点应该分类为 $y=+1$ 的时候，我们分错了，分成 $-1$，说明 $w\cdot x&lt;0$，代表 $w$ 与 $x$向量夹角大于90度，这个时候应该调整，更新过程为 $w=w+1\cdot x$，往$x$ 向量方向更接近了。</p><p>另一种更新情形如下图</p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/update-2.png" width="150"><br></div><p>当我们数据点应该分类为 $y=-1$ 的时候，我们分错了，分成 $+1$，说明 $w\cdot x&gt;0$，代表 $w$ 与 $x$ 向量夹角小于90度，这个时候应该调整，更新过程为 $w=w-1\cdot x$，往远离 $x$ 向量方向更接近了。</p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/tune.png" width="600"><br></div><p><strong>Example:</strong><br>如下图所示的训练数据集，其正实例点是 $x_1 = (3, 3)^T, x_2 = (4, 3)^T$，负实例点是 $x_3 = (1,1)^T$，用感知机学习方法的原始形式求感知机模型 $f(x) = \text{sign}(w\cdot x + b)$。记 $w = (w^{(1)}, w^{(2)})^T, x = (x^{(1)}, x^{(2)})^T$</p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/perceptron-2.2.png" width="400"><br></div><p><strong>Solution:</strong><br>构建优化问题:</p><p>$$<br>\min<em>{w,b} L(w,b) = -\sum</em>{x_i\in M} y_i(w\cdot x_i + b)<br>$$</p><p>求解：$w, b, \eta=1$</p><ol><li>取初值 $w_0 = 0, b_0 = 0$</li><li>对 $x_1=(3,3)^T, y_1(w_0\cdot x_1 + b_0)=0$，未能被正常分类，更新 $w,b$<br>$$<br>w_1 = w_0+y_1x_1=(3,3)^T \qquad b_1=b_0+y_1=1<br>$$<br>得线性模型<br>$$<br>w_1\cdot x+b_1 = 3x^{(1)}+3x^{(2)}+1<br>$$</li><li>对 $x_1, x_2$，显然，$y_i(w_1\cdot x_i+b_1)&gt;0$，被正确分类，不修改 $w,b$:<br>对 $x_3=(1,1)^T, y_3(w_1\cdot x_3+b_1)&lt;0$，被误分类，更新 $w,b$.</li></ol><p>$$<br>w_2=w_1+y_3x_3=(2,2)^T \qquad b_2=b_1+y_3=0<br>$$</p><p>得到线性模型</p><p>$$<br>w_2\cdot x+b_2=2x^{(1)}+2x^{(2)}<br>$$</p><p>如此继续下去，直到</p><p>$$<br>\begin{split}<br>&amp;w_7=(1,1)^T \quad b_7=-3 \<br>&amp;w_7\cdot x+b_7=x^{(1)}+x^{(2)}-3<br>\end{split}<br>$$</p><p>对于所有数据点 $y_i(w_7\cdot x_i+b_7)&gt;0$，没有误分类点，损失函数达到极小.</p><p>分离超平面为</p><p>$$<br>x^{(1)} + x^{(2)} - 3 = 0<br>$$</p><p>感知机模型为</p><p>$$<br>f(x) = \text{sign}(x^{(1)}+x^{(2)}-3)<br>$$</p><p>迭代过程如下表</p><table><thead><tr><th>迭代次数</th><th>误分类点</th><th>$w$</th><th>$b$</th><th>$w\cdot x+b$</th></tr></thead><tbody><tr><td>0</td><td></td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>$x_1$</td><td>$(3,3)^T$</td><td>1</td><td>$3x^{(1)}+3x^{(2)}+1$</td></tr><tr><td>2</td><td>$x_3$</td><td>$(2,2)^T$</td><td>0</td><td>$2x^{(1)}+2x^{(2)}$</td></tr><tr><td>3</td><td>$x_3$</td><td>$(1,1)^T$</td><td>-1</td><td>$x^{(1)}+x^{(2)}-1$</td></tr><tr><td>4</td><td>$x_3$</td><td>$(0,0)^T$</td><td>-2</td><td>-2</td></tr><tr><td>5</td><td>$x_1$</td><td>$(3,3)^T$</td><td>-1</td><td>$3x^{(1)}+3x^{(2)}-1$</td></tr><tr><td>6</td><td>$x_3$</td><td>$(2,2)^T$</td><td>-2</td><td>$2x^{(1)}+2x^{(2)}-2$</td></tr><tr><td>7</td><td>$x_3$</td><td>$(1,1)^T$</td><td>-3</td><td>$x^{(1)}+x^{(2)}-3$</td></tr><tr><td>8</td><td>0</td><td>$(1,1)^T$</td><td>-3</td><td>$x^{(1)}+x^{(2)}-3$</td></tr></tbody></table><p>根据上述例子和算法过程，可以用如下python代码实现计算。</p><p>核心算法流程图如下</p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/alg.png" height="250"><br></div><ul><li><p>初始化训练数据以及参数 $w,b$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">train_set = [[(<span class="number">3</span>,<span class="number">3</span>), <span class="number">1</span>], [(<span class="number">4</span>,<span class="number">3</span>), <span class="number">1</span>], [(<span class="number">1</span>,<span class="number">1</span>), <span class="number">-1</span>]]</span><br><span class="line">w = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">b = <span class="number">0</span></span><br><span class="line">max_iter = <span class="number">1000</span></span><br></pre></td></tr></table></figure></li><li><p>main函数逻辑，如果在<code>max_iter</code>步之内全部正确分类给出提示</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    all_correct = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(max_iter):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> misclassified():</span><br><span class="line">            all_correct = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> all_correct:</span><br><span class="line">        print(<span class="string">"All points are correctly classified within max iterations!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Still not enough."</span>)</span><br></pre></td></tr></table></figure></li><li><p>编写<code>product()</code>函数用于计算 $y_i(w\cdot x_i+b)$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(item)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(item[<span class="number">0</span>])):</span><br><span class="line">        sum += item[<span class="number">0</span>][i] * w[i]</span><br><span class="line">    sum += b</span><br><span class="line">    sum *= item[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure></li><li><p>编写<code>misclassified()</code>函数用于判断是否误分类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">misclassified</span><span class="params">()</span>:</span></span><br><span class="line">    is_correct = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> train_set:</span><br><span class="line">        <span class="keyword">if</span> product(item) &lt;= <span class="number">0</span>:</span><br><span class="line">            is_correct = <span class="keyword">True</span></span><br><span class="line">            update(item)</span><br><span class="line">    <span class="keyword">return</span> is_correct</span><br></pre></td></tr></table></figure></li><li><p>编写<code>update()</code>函数用于确定误分类之后的一步更新操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> w, b</span><br><span class="line">    w[<span class="number">0</span>] += <span class="number">1</span>*item[<span class="number">1</span>]*item[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    w[<span class="number">1</span>] += <span class="number">1</span>*item[<span class="number">1</span>]*item[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    b += <span class="number">1</span>*item[<span class="number">1</span>]</span><br><span class="line">    print(<span class="string">"w = "</span>, w, <span class="string">"b = "</span>, b)</span><br></pre></td></tr></table></figure></li></ul><p>总的程序代码如下：<br><figure class="highlight python"><figcaption><span>&#123;.line-numbers cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">train_set = [[(<span class="number">3</span>,<span class="number">3</span>), <span class="number">1</span>], [(<span class="number">4</span>,<span class="number">3</span>), <span class="number">1</span>], [(<span class="number">1</span>,<span class="number">1</span>), <span class="number">-1</span>]]</span><br><span class="line">w = [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">b = <span class="number">0</span></span><br><span class="line">max_iter = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(item)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(item[<span class="number">0</span>])):</span><br><span class="line">        sum += item[<span class="number">0</span>][i] * w[i]</span><br><span class="line">    sum += b</span><br><span class="line">    sum *= item[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">misclassified</span><span class="params">()</span>:</span></span><br><span class="line">    is_correct = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> train_set:</span><br><span class="line">        <span class="keyword">if</span> product(item) &lt;= <span class="number">0</span>:</span><br><span class="line">            is_correct = <span class="keyword">True</span></span><br><span class="line">            update(item)</span><br><span class="line">    <span class="keyword">return</span> is_correct</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(item)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> w, b</span><br><span class="line">    w[<span class="number">0</span>] += <span class="number">1</span>*item[<span class="number">1</span>]*item[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line">    w[<span class="number">1</span>] += <span class="number">1</span>*item[<span class="number">1</span>]*item[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line">    b += <span class="number">1</span>*item[<span class="number">1</span>]</span><br><span class="line">    print(<span class="string">"w = "</span>, w, <span class="string">"b = "</span>, b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    all_correct = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(max_iter):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> misclassified():</span><br><span class="line">            all_correct = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> all_correct:</span><br><span class="line">        print(<span class="string">"All points are correctly classified within max iterations!"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Still not enough."</span>)</span><br></pre></td></tr></table></figure></p><p>程序运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">w =  [3, 3] b =  1</span><br><span class="line">w =  [2, 2] b =  0</span><br><span class="line">w =  [1, 1] b =  -1</span><br><span class="line">w =  [0, 0] b =  -2</span><br><span class="line">w =  [3, 3] b =  -1</span><br><span class="line">w =  [2, 2] b =  -2</span><br><span class="line">w =  [1, 1] b =  -3</span><br><span class="line">All points are correctly classified within max iterations!</span><br></pre></td></tr></table></figure></p><p>这与我们书本上的结果是对应的。</p><p><strong>Remark:</strong></p><ol><li><p>上述结果是在误分类点先后取 $x_1, x_3, x_3, x_3, x_1, x_3, x_3$ 得到的分离超平面和感知机模型。如果在计算中误分类点依次取 $x_1, x_3, x_3, x_3, x_2, x_3, x_3, x_3, x_1, x_3, x_3$，那么得到的分离超平面是 $2x^{(1)}+x^{(2)}-5=0$.</p></li><li><p>可以发现，感知机方法对于不同初值或取不同的误分类点，解可以不同。</p></li><li><p>与SVM不同之处，感知机只能做到产生一个分割，但并不能产生一个很好的分割。对于分类问题，感知机是可用的，但如果用来预测新样本的属性，最好还是用SVM。</p></li></ol><p>至此，感知机学习算法以及简单的python实现已经讲完了，下面讲解一下感知机的对偶形式，以及证明一下感知机学习算法为什么在迭代有限次的时候可以收敛。</p><h3 id="3-2-算法收敛性"><a href="#3-2-算法收敛性" class="headerlink" title="3.2 算法收敛性"></a>3.2 算法收敛性</h3><p>现在证明，对于线性可分数据集，感知机方法原始形式收敛。也就是说，经过有限次迭代可以得到一个将训练数据集完全正确划分的分离超平面和感知机模型。</p><p>为了方便推导，将bias偏置 $b$ 并入权重向量 $w$ 中，记作 $\hat w = (w^T, b)^T$。这需要同时将输入向量加以扩充，补入常数 $1$，记作 $\hat x = (x^T, 1)^T$。这样，$\hat x\in\mathbb{R}^{n+1}, \hat w\in\mathbb{R}^{n+1}$，$\hat w\cdot \hat x = w\cdot x+b$。</p><p><strong>Novikoff’s Theorem:</strong><br>设训练数据集 $T = { (x_1, y_1), (x_2, y_2), \cdots, (x_N, y_N) }$ 是线性可分的，其中 $x_i\in\mathcal{X}=\mathbb{R}^n$，$y_i\in\mathcal{Y}={-1,+1}, i=1,2,\cdots,N$，则</p><ol><li>存在满足条件 $\Vert \hat w<em>{\text{opt}}\Vert = 1$ 的超平面 $\hat w</em>{\text{opt}}\cdot \hat x = w<em>{\text{opt}}\cdot x+b</em>{\text{opt}}$ 将训练数据集完全正确分开；且存在 $\gamma &gt; 0$，对所有的 $i=1,2,\cdots,N$<br>$$<br>y<em>i(\hat w</em>{\text{opt}} \cdot \hat x_i) = y<em>i(w</em>{\text{opt}}\cdot x<em>i + b</em>{\text{opt}}) \geq \gamma<br>$$</li><li>令 $R = \max\limits_{1\leq i\leq N}\Vert \hat x_i\Vert$，则感知机算法在训练数据集上的误分类次数 $k$ 满足不等式<br>$$<br>k \leq \left( \frac{R}{\gamma} \right)^2<br>$$</li></ol><p>上面定理直白来说就是，如果是一个线性可分的数据集，我们可以在有限 $k$ 次更新，得到一个将数据集完美分割好的超平面（感知机模型）。</p><p><strong>Proof:</strong></p><ol><li>由于训练数据集是线性可分的，存在超平面可将数据集完全正确分开，取此超平面为 $\hat w<em>{\text{opt}}\cdot \hat x = w</em>{\text{opt}}\cdot x + b<em>{\text{opt}} = 0$，使得 $\Vert \hat w</em>{\text{opt}} \Vert=1$.（ $w<em>{\text{opt}}$ 与 $b</em>{\text{opt}}$ 同时缩小或扩大不改变超平面）</li></ol><p>由于对有限的 $i=1,2,\cdots,N$，均有<br>$$<br>y<em>i(\hat w</em>{\text{opt}}\cdot \hat x_i) = y<em>i(w</em>{\text{opt}} \cdot x<em>i + b</em>{\text{opt}}) &gt; 0<br>$$<br>上式为已经全部分对情形，所以所有训练集上的数据点均满足上式。<br>对于有限个数据点，存在<br>$$<br>\gamma = \min\limits_i { y<em>i(w</em>{\text{opt}} \cdot x<em>i + b</em>{\text{opt}}) }<br>$$<br>使得<br>$$<br>y<em>i(\hat w</em>{\text{opt}} \cdot \hat x_i) = y<em>i(w</em>{\text{opt}}\cdot x<em>i + b</em>{\text{opt}}) \geq \gamma<br>$$</p><ol><li>感知机算法从 $\hat w<em>0 = 0$ 开始，如果实例被误分类，则更新权重。令 $\hat w</em>{k-1}$ 为第 $k$ 个误分类实例之前的扩充权重向量，即<br>$$<br>\hat w<em>{k-1} = (w</em>{k-1}^T, b_{k-1})^T<br>$$<br>则第 $k$ 个误分类实例的条件是<br>$$<br>y<em>i(\hat w</em>{k-1}\cdot \hat x_i) = y<em>i(w</em>{k-1}\cdot x<em>i+b</em>{k-1}) \leq 0<br>$$<br>若 $(x_i, y<em>i)$ 是被 $\hat w</em>{k-1} = (w<em>{k-1}^T, b</em>{k-1})^T$ 误分类的数据，则 $w$ 和 $b$ 的更新是<br>$$<br>\begin{split}<br>&amp;w<em>k \leftarrow w</em>{k-1} + \eta\,y_ix_i \<br>&amp;b<em>k \leftarrow b</em>{k-1} + \eta\,y_i<br>\end{split}<br>$$<br>即<br>$$<br>\hat w<em>k = \hat w</em>{k-1} + \eta\, y_i\hat x_i<br>$$<br>下面我们证明两个小结论<br>$$<br>\begin{split}<br>&amp;\hat w<em>k \cdot \hat w</em>{\text{opt}} \geq k\eta\,\gamma \<br>&amp;\Vert \hat w_k\Vert^2 \leq k\eta^2R^2<br>\end{split}<br>$$</li></ol><p>(1) 证明：<br>$$<br>\begin{split}<br>\hat w<em>k\cdot \hat w</em>{\text{opt}} &amp;= \hat w<em>{k-1}\cdot \hat w</em>{\text{opt}} + \eta\, y<em>i\hat w</em>{\text{opt}}\cdot \hat x<em>i \<br>&amp;\geq \hat w</em>{k-1}\cdot \hat w_{\text{opt}} + \eta\,\gamma<br>\end{split}<br>$$<br>由此递推得到不等式<br>$$<br>\hat w<em>k\cdot \hat w</em>{\text{opt}} \geq \hat w<em>{k-1}\cdot \hat w</em>{\text{opt}} + \eta\,\gamma \geq \hat w<em>{k-2}\cdot \hat w</em>{\text{opt}} + 2\eta\,\gamma \geq \cdots \geq k\eta\gamma<br>$$</p><p>(2) 证明：<br>$$<br>\begin{split}<br>\Vert \hat w<em>k\Vert^2 &amp;= \Vert \hat w</em>{k-1}\Vert^2 + 2\eta\,y<em>i\hat w</em>{k-1}\cdot \hat x_i + \eta^2\Vert \hat x<em>i\Vert^2 \<br>&amp;\leq \Vert \hat w</em>{k-1}\Vert^2 + \eta^2\Vert \hat x<em>i\Vert^2 \<br>&amp;\leq \Vert \hat w</em>{k-1}\Vert^2 + \eta^2 R^2 \<br>&amp;\leq \Vert \hat w_{k-2}\Vert^2 + 2\eta^2 R^2 \leq \cdots \<br>&amp;\leq k\,\eta^2 R^2<br>\end{split}<br>$$</p><p>结合以上，有<br>$$<br>\begin{split}<br>&amp;k\eta\,\gamma \leq \hat w<em>k\cdot \hat w</em>{\text{opt}} \leq \Vert \hat w<em>k\Vert\,\Vert w</em>{\text{opt}}\Vert \leq \sqrt{k}\eta R \<br>&amp;k^2 \gamma^2 \leq k R^2<br>\end{split}<br>$$</p><p><strong>Remark:</strong></p><ol><li>误分类的次数 $k$ 是上界的 $\implies$ 当训练数据集线性可分的时候，感知机学习算法原始迭代是收敛的。</li><li>感知机学习算法存在许多解，依赖于初值选择，也依赖于迭代过程中误分类点的选择顺序。</li><li>为了得到唯一的超平面，需要对分离超平面增加约束条件，SVM想法由此而来。</li><li>对于线性不可分的数据，SVM算法不能收敛，会产生震荡现象。<br>解决方法：<ul><li>规定最大迭代次数</li><li>每次更新算法的参数当且仅当在该参数下误分割的样本数量减少了</li></ul></li></ol><h3 id="3-3-感知机学习算法的对偶形式"><a href="#3-3-感知机学习算法的对偶形式" class="headerlink" title="3.3 感知机学习算法的对偶形式"></a>3.3 感知机学习算法的对偶形式</h3><p>对偶形式就是将参数 $w,b$ 表示为实例 $x_i$ 和 $y_i$ 的线性组合的形式，通过求解其系数而求得 $w$ 和 $b$。我们假设 $w_0,b_0$ 均为0，对误分类点 $(x_i, y_i)$ 通过：<br>$$<br>\begin{split}<br>&amp;w \leftarrow w + \eta\,y_ix_i \<br>&amp;b \leftarrow b + \eta\,y_i<br>\end{split}<br>$$<br>逐步修改 $w, b$，设修改了 $n$ 次，则 $w, b$ 关于 $(x_i, y_i)$ 的增量分别是 $\alpha_i y_i x_i$ 和 $\alpha_i y_i$，这里 $\alpha_i = n<em>i\,\eta$。这样，从学习过程可以得到最终学习到的 $w,b$ 分别为<br>$$<br>\begin{split}<br>&amp;w = \sum</em>{i=1}^N \alpha_i y_i x<em>i \<br>&amp;b = \sum</em>{i=1}^N \alpha_i y_i<br>\end{split}<br>$$<br>这里，$\alpha_i\geq 0$, $i=1,2,\cdots,N$，==当 $\eta=1$ 时，表示 $i$ 个实例点由于误分而进行更新的次数==。<u>实例点更新次数越多，意味着它距离分离超平面越近，也就越难正确分类（越容易分错，超平面移动不多就容易将这些点分错）换句话说，这样的实例对学习结果影响最大</u>（在SVM中，这些点代表着支持向量）</p><p>那么我们怎么得到它的对偶形式呢？将 $x_i, y<em>i$ 表达的 $w$ 代入原来感知机模型中，得到下面对偶感知机模型：<br>$$<br>f(x) = \text{sign}\left( \sum</em>{j=1}^N \alpha_j\, y_jx_j\cdot x+b \right)<br>$$<br>根据上面模型方程，我们可以看出与原始感知机模型不同的就是 $w$ 的形式有所改变，那么到底为什么有对偶形式出现呢？后面会讲原因！</p><h4 id="Algorithm-2"><a href="#Algorithm-2" class="headerlink" title="Algorithm 2:"></a><strong>Algorithm 2:</strong></h4><p>Input: 线性可分的数据集 $T = { (x_1, y_1), (x_2, y_2), \cdots, (x_N, y_N) }$，其中 $x_i\in\mathbb{R}^n, y<em>i\in{ -1, +1 }, i=1,2,\cdot,N$；学习率 $\eta, 0&lt;\eta\leq 1$<br>Output: $a, b$；感知机模型 $f(x) = \text{sign}\left( \sum</em>{j=1}^N \alpha_j\, y_jx_j\cdot x+b \right)$，其中 $\alpha = (\alpha_1, \alpha_2, \cdots, \alpha_N)^T$</p><ol><li>$\alpha \leftarrow 0, b \leftarrow 0$</li><li>在训练集中选取数据 $(x_i, y_i)$</li><li>如果 $y<em>i\left( \sum</em>{j=1}^N \alpha_j\,y_jx_j\cdot x_i + b \right) \leq 0$<br>$$<br>\begin{split}<br>&amp;\alpha_i \leftarrow \alpha_i + \eta \<br>&amp;b \leftarrow b + \eta\, y_i<br>\end{split}<br>$$</li><li>转到2. 直到没有误分类数据</li></ol><p><strong>Remark:</strong><br><u>这里的更新其实等价于 $\alpha_i = n<em>i\,\eta$，从 $\alpha</em>{i+1} = \alpha<em>{i} + \eta$ 可以推出 $n</em>{i+1}\eta = n<em>i\eta + \eta$ 进而 $n</em>{i+1} = n_i + 1$，表示如果该数据点分错了，那么更新次数加一，$b$ 的更新方式和原始感知机模型更新方式一样。</u></p><p>现在假设样本点 $(x_i, y_i)$ 在更新过程中被使用了 $n<em>i$ 次。因此，从原始形式的学习过程中可以得到，最后学习到的 $w,b$分别可以表示为<br>$$<br>\begin{split}<br>&amp;w = \sum</em>{i=1}^N n_i\,\eta y_ix<em>i \<br>&amp;b = \sum</em>{i=1}^N n_i\,\eta y_i<br>\end{split}<br>$$</p><p>考虑 $n_i$ 的含义：如果 $n_i$ 的值越大，那么意味着这个样本点经常被误分，也就说明该点离超平面很近。这种点其实就很可能是支持向量。</p><p>现将上式代入感知机模型中，可得：<br>$$<br>f(x) = \text{sign}(w\cdot x + b) = \text{sign}\left( \sum_{j=1}^N n_j\eta\, y_jx<em>j\cdot x + \sum</em>{j=1}^N n_j\eta\, y_j \right)<br>$$</p><p>此时，学习的目标不再是 $w,b$，而是 $n_i, i=1,2,\cdots, N.$ 相应的，训练过程变为：</p><ol><li>初始时刻 $n_i = 0 \quad \forall i = 1,2,\cdots, N$</li><li>在训练集中选取数据 $(x_i, y_i)$</li><li>如果 $y<em>i\left( \sum\limits</em>{j=1}^N n_j\eta\, y_jx_j\cdot x<em>i + \sum\limits</em>{j=1}^N n_j\eta\, y_j \right) \leq 0$，更新 $n_i \leftarrow n_i + 1$</li><li>转到 2. 直至没有误分类数据。</li></ol><p><em>Question:</em><br>为什么引入对偶形式?</p><p><em>Answer:</em><br>根据查阅到的资料，我能接受的观点如下：</p><ol><li>从对偶形式学习算法过程可以看出，样本点的特征向量以內积的形式存在于感知机对偶形式的训练算法中，凡是涉及到矩阵，向量內积的运算量就非常大（现实中特征维度很高），这里我们如果事先计算好所有的內积，存储于Gram矩阵中，以后碰到更新的点，直接从Gram矩阵中查找即可，相当于我就初始化运算一遍Gram矩阵，以后都是查询，大大加快了计算速度。</li></ol><blockquote><p>不妨假设特征空间是 $\mathbb{R}^n$，$n$很大，一共有 $N$ 个训练数据，$N$ 相对 $n$ 很小。我们考虑原始形式的感知机学习算法，每一轮迭代中我们至少都要判断某个输入实例是不是误判点，即对于 $x_i,y_i$，是否有 $y_i(w x_i + b) \leq 0$。这里的运算量主要集中在求输入实例 $x_i$ 和权值向量 $w$ 的內积上，$\Theta(n)$ 的时间复杂度，由于特征空间维度很高，所以很慢。</p><p>而在对偶形式的感知机学习算法中，对于输入实例 $(x_i, y_i)$ 是否误判的条件转变为了 $y<em>i\left( \sum</em>{j=1}^N \alpha_j\,y_jx_j\cdot x_i + b \right) \leq 0$。这里所有输入实例都仅仅以內积的形式出现，所以我们可以预先计算输入实例两两之间的內积，得到所谓的Gram矩阵 $G = [x_i\cdot x<em>j]</em>{N\times N}$。这样一来每次做误判检测的时候我们直接在Gram矩阵里查表就能拿到內积 $x_i\cdot x_j$，所以这个误判检测的时间复杂度是 $\Theta(N)$。</p><p>也就是说，对偶形式的感知机，把每轮迭代的时间复杂度的数据规模从特征空间维度 $n$ 转移到了训练集大小 $N$ 上，那么对于维度非常高的空间，自然可以提升性能了。</p></blockquote><ol><li>跟SVM的对偶形式其实有相似之处，后面讲到SVM的时候再说明。</li></ol><p><strong>Example:</strong><br>用感知机学习算法的对偶形式求解感知机模型，数据同上。</p><p>按照对偶算法框架，有：</p><ol><li>取 $\alpha_i = 0, i=1,2,3, b=0, \eta=1$</li><li>计算Gram矩阵<br>$$<br>G = \begin{bmatrix}<br>18 &amp; 21 &amp; 6 \<br>21 &amp; 25 &amp; 7 \<br>6 &amp; 7 &amp; 2<br>\end{bmatrix}<br>$$</li><li>误分条件<br>$$<br>y<em>i \left( \sum</em>{j=1}^N \alpha_j y_j x_j \cdot x_i + b \right) \leq 0<br>$$<br>参数更新<br>$$<br>\alpha_i \leftarrow \alpha_i+1 \quad b \leftarrow b + y_i<br>$$</li><li>迭代。</li><li>​<br>$$<br>\begin{split}<br>&amp;w = 2x_1 + 0x_2 - 5x_3 = (1,1)^T \<br>&amp;b = -3<br>\end{split}<br>$$<br>分离超平面<br>$$<br>x^{(1)} + x^{(2)} - 3 = 0<br>$$<br>感知机模型<br>$$<br>f(x) = \text{sign}(x^{(1)} + x^{(2)} - 3)<br>$$</li></ol><p>迭代过程中的参数变化如下表</p><table><thead><tr><th>$k$</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td></td><td></td><td>$x_1$</td><td>$x_3$</td><td>$x_3$</td><td>$x_3$</td><td>$x_1$</td><td>$x_3$</td><td>$x_3$</td></tr><tr><td>$\alpha_1$</td><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td><td>2</td><td>2</td><td>2</td></tr><tr><td>$\alpha_2$</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>$\alpha_3$</td><td>0</td><td>0</td><td>1</td><td>2</td><td>3</td><td>3</td><td>4</td><td>5</td></tr><tr><td>$b$</td><td>0</td><td>1</td><td>0</td><td>-1</td><td>-2</td><td>-1</td><td>-2</td><td>-3</td></tr></tbody></table><p>对比原始形式的例子，可以发现结果一致且迭代步骤也是对应的。</p><p>用python实现该对偶问题的计算如下：</p><ul><li><p>初始化数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">train_set = np.array([[[<span class="number">3</span>, <span class="number">3</span>], <span class="number">1</span>], [[<span class="number">4</span>, <span class="number">3</span>], <span class="number">1</span>], [[<span class="number">1</span>, <span class="number">1</span>], <span class="number">-1</span>]])</span><br><span class="line"></span><br><span class="line">a = np.zeros(len(train_set), np.float)</span><br><span class="line">b = <span class="number">0.0</span></span><br><span class="line">max_iter = <span class="number">1000</span></span><br><span class="line">Gram = <span class="keyword">None</span></span><br><span class="line">y = np.array(train_set[:, <span class="number">1</span>])</span><br><span class="line">x = np.empty((len(train_set), <span class="number">2</span>), np.float)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(train_set)):</span><br><span class="line">    x[i] = train_set[i][<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li><li><p>主函数逻辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Gram = cal_gram()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(max_iter):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> misclassified():</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li><li><p>编写<code>cal_gram()</code>函数计算Gram矩阵</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_gram</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    calculate the Gram matrix</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    g = np.empty((len(train_set), len(train_set)), np.int)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(train_set)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(train_set)):</span><br><span class="line">            g[i][j] = np.dot(train_set[i][<span class="number">0</span>], train_set[j][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> g</span><br></pre></td></tr></table></figure></li><li><p>编写<code>misclassified()</code>函数判断是否分类正确</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">misclassified</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a, b, x, y</span><br><span class="line">    is_correct = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(train_set)):</span><br><span class="line">        <span class="keyword">if</span> product(i) &lt;= <span class="number">0</span>:</span><br><span class="line">            is_correct = <span class="keyword">True</span></span><br><span class="line">            update(i)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_correct:</span><br><span class="line">        w = np.dot(a * y, x)</span><br><span class="line">        print(<span class="string">"\nResult within max iterations:"</span>)</span><br><span class="line">        print(<span class="string">"w: "</span>, w, <span class="string">" b: "</span>, b)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br></pre></td></tr></table></figure></li><li><p>编写<code>product()</code>函数计算误分条件左端值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a, b, x, y</span><br><span class="line">    </span><br><span class="line">    sum = np.dot(a * y, Gram[i])</span><br><span class="line">    sum = (sum + b) * y[i]</span><br><span class="line">    <span class="keyword">return</span> sum</span><br></pre></td></tr></table></figure></li><li><p>编写<code>update()</code>函数用于更新参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    update parameter using stochastic gradient descent</span></span><br><span class="line"><span class="string">    :param i:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">global</span> a, b</span><br><span class="line">    a[i] += <span class="number">1</span></span><br><span class="line">    b += y[i]</span><br><span class="line">    print(a, b)</span><br></pre></td></tr></table></figure></li></ul><p>程序运行结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[ 1.  0.  0.] 1.0</span><br><span class="line">[ 1.  0.  1.] 0.0</span><br><span class="line">[ 1.  0.  2.] -1.0</span><br><span class="line">[ 1.  0.  3.] -2.0</span><br><span class="line">[ 2.  0.  3.] -1.0</span><br><span class="line">[ 2.  0.  4.] -2.0</span><br><span class="line">[ 2.  0.  5.] -3.0</span><br><span class="line"></span><br><span class="line">Result within max iterations:</span><br><span class="line">w:  [1.0 1.0]  b:  -3.0</span><br></pre></td></tr></table></figure></p><p>完整的程序代码如下<br><figure class="highlight python"><figcaption><span>&#123;.line-numbers cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dual problem solution</span></span><br><span class="line">train_set = np.array([[[<span class="number">3</span>, <span class="number">3</span>], <span class="number">1</span>], [[<span class="number">4</span>, <span class="number">3</span>], <span class="number">1</span>], [[<span class="number">1</span>, <span class="number">1</span>], <span class="number">-1</span>]])</span><br><span class="line"></span><br><span class="line">a = np.zeros(len(train_set), np.float)</span><br><span class="line">b = <span class="number">0.0</span></span><br><span class="line">max_iter = <span class="number">1000</span></span><br><span class="line">Gram = <span class="keyword">None</span></span><br><span class="line">y = np.array(train_set[:, <span class="number">1</span>])</span><br><span class="line">x = np.empty((len(train_set), <span class="number">2</span>), np.float)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(train_set)):</span><br><span class="line">    x[i] = train_set[i][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cal_gram</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    calculate the Gram matrix</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    g = np.empty((len(train_set), len(train_set)), np.int)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(train_set)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(len(train_set)):</span><br><span class="line">            g[i][j] = np.dot(train_set[i][<span class="number">0</span>], train_set[j][<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    update parameter using stochastic gradient descent</span></span><br><span class="line"><span class="string">    :param i:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">global</span> a, b</span><br><span class="line">    a[i] += <span class="number">1</span></span><br><span class="line">    b += y[i]</span><br><span class="line">    print(a, b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(i)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a, b, x, y</span><br><span class="line">    </span><br><span class="line">    sum = np.dot(a * y, Gram[i])</span><br><span class="line">    sum = (sum + b) * y[i]</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">misclassified</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a, b, x, y</span><br><span class="line">    is_correct = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(train_set)):</span><br><span class="line">        <span class="keyword">if</span> product(i) &lt;= <span class="number">0</span>:</span><br><span class="line">            is_correct = <span class="keyword">True</span></span><br><span class="line">            update(i)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> is_correct:</span><br><span class="line">        w = np.dot(a * y, x)</span><br><span class="line">        print(<span class="string">"\nResult within max iterations:"</span>)</span><br><span class="line">        print(<span class="string">"w: "</span>, w, <span class="string">" b: "</span>, b)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    Gram = cal_gram()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(max_iter):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> misclassified():</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></p><p><strong>Remark:</strong><br>与原始形式一样，感知机学习算法的对偶形式迭代也是收敛的，且存在多个解。</p><p><strong>Summary:</strong></p><ol><li>感知机是二类，线性分类模型。要求给定数据线性可分</li><li>感知机算法本质：求一个超平面，使得预定的损失函数最小化</li><li>感知机的模型, 策略, 算法分别为<ul><li>model: 超平面（对二维空间就是直线），线性模型。若样本维数为 $n$，假设空间 $\mathbb{R}^{n+1}$</li><li>strategy: 极小化损失函数</li><li>algorithm: gradient descent</li></ul></li><li>超平面方程：$w\cdot x+b=0$，$w,x$ 是与样本 $x$ 相同维数的向量</li><li>损失函数：$-\sum \frac{1}{\Vert w\Vert} y_i(w\cdot x_i+b)$，只考虑所有被错误分类的点。感知机算法即优化这样一个函数</li><li>感知机的形式：$\text{sign}(w\cdot x+b)$，$\text{sign}(x)$ 是符号函数</li></ol><h2 id="4-感知机学习算法应用实例"><a href="#4-感知机学习算法应用实例" class="headerlink" title="4. 感知机学习算法应用实例"></a>4. 感知机学习算法应用实例</h2><h3 id="4-1-鸢尾花数据集分类"><a href="#4-1-鸢尾花数据集分类" class="headerlink" title="4.1. 鸢尾花数据集分类"></a>4.1. 鸢尾花数据集分类</h3><h4 id="python源码实现感知机"><a href="#python源码实现感知机" class="headerlink" title="python源码实现感知机"></a>python源码实现感知机</h4><ul><li>加载需要用到的包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">%matplotlib inline</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd  <span class="comment"># pandas用数据提取与展示</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># numpy用于数组操作</span></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris  <span class="comment"># 从sklearn中导入数据集</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># matplotlib用于制图可视化</span></span><br></pre></td></tr></table></figure><ul><li>数据提取</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">iris = load_iris()  <span class="comment"># 加载iris数据集并命名</span></span><br><span class="line">df = pd.DataFrame(iris.data, columns=iris.feature_names)  <span class="comment"># 将数据集放入pandas数据框</span></span><br><span class="line">df[<span class="string">'label'</span>] = iris.target  <span class="comment"># 将iris的目标值记为名为label的列</span></span><br><span class="line">df  <span class="comment"># 可以看到数据框了，类似 150*50 的矩阵</span></span><br></pre></td></tr></table></figure><ul><li>简单数据统计</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.columns = [<span class="string">'sepal length'</span>, <span class="string">'sepal width'</span>, <span class="string">'petal length'</span>, <span class="string">'petal width'</span>, <span class="string">'label'</span>]  <span class="comment"># 对DataFrame的列重命名</span></span><br><span class="line">df.label.value_counts()  <span class="comment"># 对label的值进行简要的统计</span></span><br></pre></td></tr></table></figure><ul><li>可视化数据点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(df[:<span class="number">50</span>][<span class="string">'sepal length'</span>], df[:<span class="number">50</span>][<span class="string">'sepal width'</span>], label=<span class="string">'0'</span>)  <span class="comment"># 选取前50个值，绘制散点图，横纵坐标分别为length, width</span></span><br><span class="line">plt.scatter(df[<span class="number">50</span>:<span class="number">100</span>][<span class="string">'sepal length'</span>], df[<span class="number">50</span>:<span class="number">100</span>][<span class="string">'sepal width'</span>], label=<span class="string">'1'</span>)  <span class="comment"># 选取后50个值，绘制散点图，同上</span></span><br><span class="line">plt.xlabel(<span class="string">'sepal length'</span>)  <span class="comment"># 给x轴加label</span></span><br><span class="line">plt.ylabel(<span class="string">'sepal width'</span>)  <span class="comment"># 给y轴加label</span></span><br><span class="line">plt.legend()  <span class="comment"># 加上图例</span></span><br></pre></td></tr></table></figure><ul><li><p>另一种选取数据方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data = np.array(df.iloc[:<span class="number">100</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>]])  <span class="comment"># 选取第1,2和最后一列组成新的数据框</span></span><br><span class="line">X, y = data[:, :<span class="number">-1</span>], data[:, <span class="number">-1</span>]  <span class="comment"># X为除最后一列的所有，y为最后一列</span></span><br><span class="line">y = np.array([<span class="number">1</span> <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span> <span class="keyword">for</span> i <span class="keyword">in</span> y])  <span class="comment"># 将y中所有0变为-1</span></span><br></pre></td></tr></table></figure></li><li><p>定义Perceptron类</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Perceptron</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.w = np.ones(len(data[<span class="number">0</span>])<span class="number">-1</span>, dtype=np.float32)</span><br><span class="line">        self.b = <span class="number">0</span></span><br><span class="line">        self.l_rate = <span class="number">0.1</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(self, x, w, b)</span>:</span></span><br><span class="line">        y = np.dot(x, w) + b</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X_train, y_train)</span>:</span></span><br><span class="line">        is_wrong = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> is_wrong:</span><br><span class="line">            wrong_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> range(len(X_train)):</span><br><span class="line">                X = X_train[d]</span><br><span class="line">                y = y_train[d]</span><br><span class="line">                <span class="keyword">if</span> y * self.sign(X, self.w, self.b) &lt;= <span class="number">0</span>:</span><br><span class="line">                    self.w = self.w + self.l_rate * np.dot(y, X)</span><br><span class="line">                    self.b = self.b + self.l_rate * y</span><br><span class="line">                    wrong_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> wrong_count == <span class="number">0</span>:</span><br><span class="line">                is_wrong = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Perceptron Model'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>用感知机模型训练数据</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perceptron = Perceptron()  <span class="comment"># 创建Perceptron的一个实例</span></span><br><span class="line">perceptron.fit(X, y)  <span class="comment"># 传入数据开始训练</span></span><br></pre></td></tr></table></figure><ul><li>可视化训练得到的w和b</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x_points = np.linspace(<span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>)</span><br><span class="line">y_ = (perceptron.w[<span class="number">0</span>] * x_points + perceptron.b) / perceptron.w[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(x_points, y_)</span><br><span class="line">plt.plot(data[:<span class="number">50</span>, <span class="number">0</span>], data[:<span class="number">50</span>, <span class="number">1</span>], <span class="string">'bo'</span>, color=<span class="string">'blue'</span>, label=<span class="string">'0'</span>)</span><br><span class="line">plt.plot(data[<span class="number">50</span>:<span class="number">100</span>, <span class="number">0</span>], data[<span class="number">50</span>:<span class="number">100</span>, <span class="number">1</span>], <span class="string">'bo'</span>, color=<span class="string">'orange'</span>, label=<span class="string">'1'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'sepal length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'sepal width'</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/iris_1.png" width="300"><br></div><p>从上图可以看到，训练结果近似符合预期，但还不够好，下面利用高度优化的<code>sklearn</code>包来进行感知机方法的训练。</p><p>完整的程序代码如下：<br><figure class="highlight python"><figcaption><span>&#123;.line-numbers cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">df = pd.DataFrame(iris.data, columns=iris.feature_names)</span><br><span class="line">df[<span class="string">'label'</span>] = iris.target</span><br><span class="line"></span><br><span class="line">df.columns = [<span class="string">'sepal length'</span>, <span class="string">'sepal width'</span>,</span><br><span class="line">              <span class="string">'petal length'</span>, <span class="string">'petal width'</span>, <span class="string">'label'</span>]</span><br><span class="line">data = np.array(df.iloc[:<span class="number">100</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>]])</span><br><span class="line">X, y = data[:, :<span class="number">-1</span>], data[:, <span class="number">-1</span>]</span><br><span class="line">y = np.array([<span class="number">1</span> <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span> <span class="keyword">for</span> i <span class="keyword">in</span> y])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Perceptron</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.w = np.ones(len(data[<span class="number">0</span>]) - <span class="number">1</span>, dtype=np.float32)</span><br><span class="line">        self.b = <span class="number">0</span></span><br><span class="line">        self.l_rate = <span class="number">0.1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sign</span><span class="params">(self, x, w, b)</span>:</span></span><br><span class="line">        y = np.dot(x, w) + b</span><br><span class="line">        <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fit</span><span class="params">(self, X_train, y_train)</span>:</span></span><br><span class="line">        is_wrong = <span class="keyword">False</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> is_wrong:</span><br><span class="line">            wrong_count = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> d <span class="keyword">in</span> range(len(X_train)):</span><br><span class="line">                X = X_train[d]</span><br><span class="line">                y = y_train[d]</span><br><span class="line">                <span class="keyword">if</span> y * self.sign(X, self.w, self.b) &lt;= <span class="number">0</span>:</span><br><span class="line">                    self.w = self.w + self.l_rate * np.dot(y, X)</span><br><span class="line">                    self.b = self.b + self.l_rate * y</span><br><span class="line">                    wrong_count += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> wrong_count == <span class="number">0</span>:</span><br><span class="line">                is_wrong = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">'Perceptron Model'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">score</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">perceptron = Perceptron()</span><br><span class="line">perceptron.fit(X, y)</span><br><span class="line"></span><br><span class="line">x_points = np.linspace(<span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>)</span><br><span class="line">y_ = (perceptron.w[<span class="number">0</span>] * x_points + perceptron.b) / perceptron.w[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(x_points, y_)</span><br><span class="line">plt.plot(data[:<span class="number">50</span>, <span class="number">0</span>], data[:<span class="number">50</span>, <span class="number">1</span>], <span class="string">'bo'</span>, color=<span class="string">'blue'</span>, label=<span class="string">'0'</span>)</span><br><span class="line">plt.plot(data[<span class="number">50</span>:<span class="number">100</span>, <span class="number">0</span>], data[<span class="number">50</span>:<span class="number">100</span>, <span class="number">1</span>], <span class="string">'bo'</span>, color=<span class="string">'orange'</span>, label=<span class="string">'1'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'sepal length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'sepal width'</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure></p><h4 id="利用sklearn实现感知机方法"><a href="#利用sklearn实现感知机方法" class="headerlink" title="利用sklearn实现感知机方法"></a>利用sklearn实现感知机方法</h4><ul><li>导包</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Perceptron</span><br></pre></td></tr></table></figure><ul><li>定义一个分类器并开始训练</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">clf = Perceptron(fit_intercept=<span class="keyword">False</span>, n_iter=<span class="number">1000</span>, shuffle=<span class="keyword">False</span>)</span><br><span class="line">clf.fit(X, y)</span><br></pre></td></tr></table></figure><ul><li>查看训练结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(clf.coef_)  <span class="comment"># 训练得到的系数w</span></span><br><span class="line">print(clf.intercept_)  <span class="comment"># 训练得到的截距b</span></span><br></pre></td></tr></table></figure><ul><li>可视化呈现</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x_points = np.arange(<span class="number">4</span>, <span class="number">8</span>)</span><br><span class="line">y_ = -(clf.coef_[<span class="number">0</span>][<span class="number">0</span>] * x_points + clf.intercept_) / clf.coef_[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(x_points, y_)</span><br><span class="line"></span><br><span class="line">plt.plot(data[:<span class="number">50</span>, <span class="number">0</span>], data[:<span class="number">50</span>, <span class="number">1</span>], <span class="string">'bo'</span>, color=<span class="string">'blue'</span>, label=<span class="string">'0'</span>)</span><br><span class="line">plt.plot(data[<span class="number">50</span>:<span class="number">100</span>, <span class="number">0</span>], data[<span class="number">50</span>:<span class="number">100</span>, <span class="number">1</span>], <span class="string">'bo'</span>, color=<span class="string">'orange'</span>, label=<span class="string">'1'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'sepal length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'sepal width'</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/iris_2.png" width="300"><br></div><p>完整代码如下：<br><figure class="highlight python"><figcaption><span>&#123;.line-numbers cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> Perceptron</span><br><span class="line"></span><br><span class="line">iris = load_iris()</span><br><span class="line">df = pd.DataFrame(iris.data, columns=iris.feature_names)</span><br><span class="line">df[<span class="string">'label'</span>] = iris.target</span><br><span class="line"></span><br><span class="line">df.columns = [<span class="string">'sepal length'</span>, <span class="string">'sepal width'</span>,</span><br><span class="line">              <span class="string">'petal length'</span>, <span class="string">'petal width'</span>, <span class="string">'label'</span>]</span><br><span class="line">data = np.array(df.iloc[:<span class="number">100</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">-1</span>]])</span><br><span class="line">X, y = data[:, :<span class="number">-1</span>], data[:, <span class="number">-1</span>]</span><br><span class="line">y = np.array([<span class="number">1</span> <span class="keyword">if</span> i == <span class="number">1</span> <span class="keyword">else</span> <span class="number">-1</span> <span class="keyword">for</span> i <span class="keyword">in</span> y])</span><br><span class="line"></span><br><span class="line">clf = Perceptron(fit_intercept=<span class="keyword">False</span>, n_iter=<span class="number">1000</span>, shuffle=<span class="keyword">False</span>)</span><br><span class="line">clf.fit(X, y)</span><br><span class="line"><span class="comment"># print(clf.coef_)</span></span><br><span class="line"><span class="comment"># print(clf.intercept_)</span></span><br><span class="line"></span><br><span class="line">x_points = np.arange(<span class="number">4</span>, <span class="number">8</span>)</span><br><span class="line">y_ = -(clf.coef_[<span class="number">0</span>][<span class="number">0</span>] * x_points + clf.intercept_) / clf.coef_[<span class="number">0</span>][<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">plt.plot(x_points, y_)</span><br><span class="line"></span><br><span class="line">plt.plot(data[:<span class="number">50</span>, <span class="number">0</span>], data[:<span class="number">50</span>, <span class="number">1</span>], <span class="string">'bo'</span>, color=<span class="string">'blue'</span>, label=<span class="string">'0'</span>)</span><br><span class="line">plt.plot(data[<span class="number">50</span>:<span class="number">100</span>, <span class="number">0</span>], data[<span class="number">50</span>:<span class="number">100</span>, <span class="number">1</span>], <span class="string">'bo'</span>, color=<span class="string">'orange'</span>, label=<span class="string">'1'</span>)</span><br><span class="line">plt.xlabel(<span class="string">'sepal length'</span>)</span><br><span class="line">plt.ylabel(<span class="string">'sepal width'</span>)</span><br><span class="line">plt.legend()</span><br></pre></td></tr></table></figure></p><h3 id="4-2-从感知机到人工神经网络ANN"><a href="#4-2-从感知机到人工神经网络ANN" class="headerlink" title="4.2. 从感知机到人工神经网络ANN"></a>4.2. 从感知机到人工神经网络ANN</h3><p>人造神经网络的概念主要受模拟大脑中神经元的目标的启发。但现在它变成了一个工程和计算机科学的主题，并且在大规模视觉识别和机器学习任务中显示出有前途的结果。<br>我们不需要过多考虑生物学的细节例如生物神经元与感知器的比较。因为了解生物神经元对于理解感知器的工作原理并不是绝对必要的。<br>只是为了理解，下面的图片是一个生物神经元，描述一个神经元做什么的流程。</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/10/neuron.png" width="400"><br></div><p>神经科学界的共识是，人脑包含1000亿个神经元，每个神经元有1万个突触，数量巨大，组合方式复杂，联系广泛。也就是说，突触传递机制十分复杂。</p><p>现在已经发现和阐明的突触传递机制有：突触后兴奋、突触后抑制、突触前抑制、突触前兴奋，以及远程抑制等。</p><p>ANN人工神经网络是一种模仿生物神经网络结构和功能的数学模型，它使用大量的人工神经元连接来进行计算，该网络由大量的“神经元”相互连接构成，每个“神经元”代表一种特定的输出函数。又称激励函数。每两个“神经元”间的连接代表一个通过该连接信号的加权值，称之为权重，这相当于人工神经网络的记忆。网络的输出则根据网络的连接规则来确定，输出因权重值和激励函数的不同而不同。人工神经网络可以理解为对自然界某种算法或者函数的逼近。</p><p>下面是一种模拟上述生物神经元的感知器模型。图片来自于Andrej Karpathy在斯坦福课程<a href="http://cs231n.github.io/neural-networks-1/" target="_blank" rel="noopener">CS231n</a>上的讲座。</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/10/neuron_model.jpeg" width="400"><br></div><p>我们可以看到每个神经元或者感知器执行一个带有输入和它的权重的点积，用它们加上偏差，然后应用非线性 $f(x)$，在这种情况下是sigmoid。这个非线性函数也被称为激活函数。</p><p>就上图而言，总输入是 $x = x_1 + x_2 + \ldots + x_N$，其中 $N$ 是输入的总数。类别预测取决于特定样本的激活是否导致 $f(z)$ 的输出大于预定阈值。该阈值包含在公式 $z = w_1 x_1 + w_2 x_2 + b$ 中，正如我们在上图中看到的那样，阈值 $b$ 又被称为偏差。为了使它更普遍，有时用 $w_0$ 代替，乘以一个对应的 $x_0$ 得到最终的样子 $z = w_0 x_0 + w_1 x_1 + w_2 x_2$。从图形上看，它看起来像下图，我们在数据中有两个特征 $x_1$ 和 $x_2$。</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/10/linearly-separable.png" width="250"><br></div><p>对于更高维的数据，分界线将是一个超平面。</p><p>Rosenblatt感知机是由没过计算机科学家F.Rosenblatt于1957年提出的。F.Rosenblatt经过证明得出结论，如果两类模式是线性可分的，则算法一定收敛。Rosenblatt感知器特别适用于简单的模式分类问题，也可用于基于模式分类的学习控制。</p><h3 id="4-3-单层感知机求解AND-OR问题"><a href="#4-3-单层感知机求解AND-OR问题" class="headerlink" title="4.3. 单层感知机求解AND/OR问题"></a>4.3. 单层感知机求解AND/OR问题</h3><h4 id="原始解法"><a href="#原始解法" class="headerlink" title="原始解法"></a>原始解法</h4><figure class="highlight python"><figcaption><span>&#123;.line-numbers cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NUM_FEATURES = <span class="number">2</span></span><br><span class="line">NUM_ITER = <span class="number">2000</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>]], np.float32)  <span class="comment"># 4x2, input</span></span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], np.float32)  <span class="comment"># 4, correct output, AND operation</span></span><br><span class="line"><span class="comment"># y = np.array([0, 1, 1, 1], np.float32) # OR operation</span></span><br><span class="line"></span><br><span class="line">W = np.zeros(NUM_FEATURES, np.float32)  <span class="comment"># 2x1, weight</span></span><br><span class="line">b = np.zeros(<span class="number">1</span>, np.float32)  <span class="comment"># 1x1</span></span><br><span class="line"></span><br><span class="line">N, d = np.shape(x)  <span class="comment"># number of samples and number of features</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># process each sample separately</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(NUM_ITER):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(N):</span><br><span class="line">        yHat_j = x[j, :].dot(W) + b  <span class="comment"># 1x2, 2x1</span></span><br><span class="line">        yHat_j = <span class="number">1.0</span> / (<span class="number">1.0</span> + np.exp(-yHat_j))</span><br><span class="line"></span><br><span class="line">        err = y[j] - yHat_j  <span class="comment"># error term</span></span><br><span class="line">        deltaW = err * x[j, :]</span><br><span class="line">        deltaB = err</span><br><span class="line">        W = W + learning_rate * deltaW  <span class="comment"># if err = y - yHat, then W = W + lRate * deltW</span></span><br><span class="line">        b = b + learning_rate * deltaB</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now plot the fitted line. We need only two points to plot the line</span></span><br><span class="line">plot_x = np.array([np.min(x[:, <span class="number">0</span>] - <span class="number">0.2</span>), np.max(x[:, <span class="number">1</span>] + <span class="number">0.2</span>)])</span><br><span class="line"><span class="comment"># comes from, w0*x + w1*y + b = 0 then y = (-1/w1) (w0*x + b)</span></span><br><span class="line">plot_y = - <span class="number">1</span> / W[<span class="number">1</span>] * (W[<span class="number">0</span>] * plot_x + b)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'W:'</span> + str(W))</span><br><span class="line">print(<span class="string">'b:'</span> + str(b))</span><br><span class="line">print(<span class="string">'plot_y: '</span> + str(plot_y))</span><br><span class="line"></span><br><span class="line">plt.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=y, s=<span class="number">100</span>, cmap=<span class="string">'viridis'</span>)</span><br><span class="line">plt.plot(plot_x, plot_y, color=<span class="string">'k'</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.xlim([<span class="number">-0.2</span>, <span class="number">1.2</span>])</span><br><span class="line">plt.ylim([<span class="number">-0.2</span>, <span class="number">1.25</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">W:[ 2.6949501   2.69091272]</span><br><span class="line">b:[-4.2682209]</span><br><span class="line">plot_y: [ 1.78646111  0.38436049]</span><br></pre></td></tr></table></figure></p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/AND_OR_1.png" width="300"><br></div><p>除了这种每次迭代中逐一处理每个样本的方法，我们可以对公式进行矢量化以减少额外的for循环，使程序运行得更快。下面给出等价的更加简单的实现。矢量化编程在机器学习中非常有用。</p><figure class="highlight python"><figcaption><span>&#123;.line-numbers cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NUM_FEATURES = <span class="number">2</span></span><br><span class="line">NUM_ITER = <span class="number">2000</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>]], np.float32)  <span class="comment"># 4x2, input</span></span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], np.float32)  <span class="comment"># 4, correct output, AND operation</span></span><br><span class="line"><span class="comment"># y = np.array([0, 1, 1, 1], np.float32) # OR operation</span></span><br><span class="line"></span><br><span class="line">W = np.zeros(NUM_FEATURES, np.float32)  <span class="comment"># 2x1, weight</span></span><br><span class="line">b = np.zeros(<span class="number">1</span>, np.float32)  <span class="comment"># 1x1</span></span><br><span class="line"></span><br><span class="line">N, d = np.shape(x)  <span class="comment"># number of samples and number of features</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(NUM_ITER):</span><br><span class="line">    yHat = x.dot(W) + b</span><br><span class="line">    yHat = <span class="number">1.0</span> / (<span class="number">1.0</span> + np.exp(-yHat))</span><br><span class="line"></span><br><span class="line">    err = y - yHat</span><br><span class="line"></span><br><span class="line">    deltaW = np.transpose(x).dot(err)  <span class="comment"># have to 2x1</span></span><br><span class="line">    deltaB = np.sum(err)  <span class="comment"># have to 1x1. collect error from all the 4 samples</span></span><br><span class="line">    W = W + learning_rate * deltaW  <span class="comment"># if err = y - yHat, then W = W + lRate * deltW</span></span><br><span class="line">    b = b + learning_rate * deltaB</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now plot the fitted line. We need only two points to plot the line</span></span><br><span class="line">plot_x = np.array([np.min(x[:, <span class="number">0</span>] - <span class="number">0.2</span>), np.max(x[:, <span class="number">1</span>] + <span class="number">0.2</span>)])</span><br><span class="line"><span class="comment"># comes from, w0*x + w1*y + b = 0 then y = (-1/w1) (w0*x + b)</span></span><br><span class="line">plot_y = - <span class="number">1</span> / W[<span class="number">1</span>] * (W[<span class="number">0</span>] * plot_x + b)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'W:'</span> + str(W))</span><br><span class="line">print(<span class="string">'b:'</span> + str(b))</span><br><span class="line">print(<span class="string">'plot_y: '</span> + str(plot_y))</span><br><span class="line"></span><br><span class="line">plt.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=y, s=<span class="number">100</span>, cmap=<span class="string">'viridis'</span>)</span><br><span class="line">plt.plot(plot_x, plot_y, color=<span class="string">'k'</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.xlim([<span class="number">-0.2</span>, <span class="number">1.2</span>])</span><br><span class="line">plt.ylim([<span class="number">-0.2</span>, <span class="number">1.25</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>要特别注意<code>deltaW</code>和<code>deltaB</code>，我们直接将输入<code>x</code>转进行转置，然后乘以误差项。这用到了一个简单的线性代数技巧。最简单的方法就是考虑矩阵大小，输入<code>x</code>是 $4\times 2$ 的，<code>err</code>是 $4\times 1$ 的，那么<code>weights</code>必须是 $2\times 1$ 的。为了得到 $2\times 1$ 矩阵，这里我们直接取了 $x^T\cdot (y-\hat y)$。对于<code>deltaB</code>我们直接求和，得到所有样本点的误差。程序运行求得结果与之前非常接近</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">W:[ 2.68957829  2.68957829]</span><br><span class="line">b:[-4.26430988]</span><br><span class="line">plot_y: [ 1.78549385  0.38549384]</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/AND_OR_2.png" width="300"><br></div><h4 id="利用TensorFlow求解single-perceptron"><a href="#利用TensorFlow求解single-perceptron" class="headerlink" title="利用TensorFlow求解single-perceptron"></a>利用TensorFlow求解single-perceptron</h4><p>现在，让我们使用tensorflow实现相同的感知器算法，看看利用TensorFlow来解决问题的基本流程。在面对海量数据的时候，TensorFlow将会是一个强大的工具。</p><p>在TensorFlow中，除了直接定义<code>x</code>和<code>y</code>以外，我们还需要在一个<code>session</code>下定义<code>x</code>和<code>y</code>对应的<code>placeholder</code>，而<code>Variable</code>被申明为TensorFlow中的变量，我们需要在程序运行过程中训练它。TensorFlow函数<code>Variable()</code>有一个名为<code>trainable=True</code>的默认值参数。默认为True时会将其放入计算图进行计算。这里起初并没有更改原先的<code>W</code>和<code>B</code>，而是利用了临时变量<code>W_</code>和<code>B_</code>，将每次迭代更新后得到的参数存储，然后再将它们的值<code>assign</code>到原始的变量<code>W</code>和<code>B</code>中。</p><p>完整的程序代码如下：<br><figure class="highlight python"><figcaption><span>&#123;.line-numbers cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NUM_FEATURES = <span class="number">2</span></span><br><span class="line">NUM_ITER = <span class="number">2000</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line">x = np.array([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">1</span>]], np.float32)  <span class="comment"># 4x2, input</span></span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>], np.float32)  <span class="comment"># 4, correct output, AND operation</span></span><br><span class="line"><span class="comment"># y = np.array([0, 1, 1, 1], np.float32) # OR operation</span></span><br><span class="line">y = np.reshape(y, [<span class="number">4</span>, <span class="number">1</span>])  <span class="comment"># convert to 4x1</span></span><br><span class="line"></span><br><span class="line">X = tf.placeholder(tf.float32, shape=[<span class="number">4</span>, <span class="number">2</span>])</span><br><span class="line">Y = tf.placeholder(tf.float32, shape=[<span class="number">4</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">W = tf.Variable(tf.zeros([NUM_FEATURES, <span class="number">1</span>]), tf.float32)</span><br><span class="line">B = tf.Variable(tf.zeros([<span class="number">1</span>, <span class="number">1</span>]), tf.float32)</span><br><span class="line"></span><br><span class="line">yHat = tf.sigmoid(tf.add(tf.matmul(X, W), B))  <span class="comment"># 4x1</span></span><br><span class="line">err = Y - yHat</span><br><span class="line">deltaW = tf.matmul(tf.transpose(X), err)  <span class="comment"># have to be 2x1</span></span><br><span class="line">deltaB = tf.reduce_sum(err, <span class="number">0</span>)  <span class="comment"># 4, have to 1x1. sum all the biases? yes</span></span><br><span class="line">W_ = W + learning_rate * deltaW</span><br><span class="line">B_ = B + learning_rate * deltaB</span><br><span class="line"></span><br><span class="line"><span class="comment"># to update the values of weights and biases.</span></span><br><span class="line">step = tf.group(W.assign(W_), B.assign(B_))</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(NUM_ITER):</span><br><span class="line">    sess.run([step], feed_dict=&#123;X: x, Y: y&#125;)</span><br><span class="line"></span><br><span class="line">W = np.squeeze(sess.run(W))</span><br><span class="line">b = np.squeeze(sess.run(B))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Now plot the fitted line. We need only two points to plot the line</span></span><br><span class="line">plot_x = np.array([np.min(x[:, <span class="number">0</span>] - <span class="number">0.2</span>), np.max(x[:, <span class="number">1</span>] + <span class="number">0.2</span>)])</span><br><span class="line">plot_y = - <span class="number">1</span> / W[<span class="number">1</span>] * (W[<span class="number">0</span>] * plot_x + b)</span><br><span class="line">plot_y = np.reshape(plot_y, [<span class="number">2</span>, <span class="number">-1</span>])</span><br><span class="line">plot_y = np.squeeze(plot_y)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'W: '</span> + str(W))</span><br><span class="line">print(<span class="string">'b: '</span> + str(b))</span><br><span class="line">print(<span class="string">'plot_y: '</span> + str(plot_y))</span><br><span class="line"></span><br><span class="line">plt.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=y, s=<span class="number">100</span>, cmap=<span class="string">'viridis'</span>)</span><br><span class="line">plt.plot(plot_x, plot_y, color=<span class="string">'k'</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plt.xlim([<span class="number">-0.2</span>, <span class="number">1.2</span>])</span><br><span class="line">plt.ylim([<span class="number">-0.2</span>, <span class="number">1.25</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>程序运行结果如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">W: [ 2.68957829  2.68957829]</span><br><span class="line">b: -4.264309883117676</span><br><span class="line">plot_y: [ 1.78549385  0.38549384]</span><br></pre></td></tr></table></figure></p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/AND_OR_3.png" width="300"><br></div><p>从上图可以看到，单层感知机模型对于逻辑与/或问题，给出了很好的结果。</p><h4 id="多层感知机求解XOR问题"><a href="#多层感知机求解XOR问题" class="headerlink" title="多层感知机求解XOR问题"></a>多层感知机求解XOR问题</h4><p>下面我们从一个例子开始介绍多层感知机模型(multi-layer perceptron)。同样，多层感知机是一种监督学习方法。在面临XOR问题时，我们发现single-layer perceptron不起作用了！为了学习XOR问题的特征，我们需要一个至少两层的神经网络，因为XOR问题不能由简单一条直线进行区分。下面我们简单实现一个两层的神经网络来学习XOR模型。对于MNIST手写数字集，我们也可以用类似的多层感知机来进行分类。</p><p>对于如下逻辑门</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/11/xor_0.png?w=666&h=240" width="200"><br></div><p>将输入<code>A</code>和<code>B</code>记为<code>x</code>，输出记为<code>y</code>，异或问题在<code>x</code>中元素一致时取<code>0</code>，否则取<code>1</code>。</p><p>对于为什么需要两层神经网络有一个直观的理解，如下图</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/11/xor_11.png" width="300"><br></div><p>黄点为0，红点为1，那么我们需要两条线来将<code>0</code>和<code>1</code>划分。我们已经看到，神经元/感知器只给我们一条线，将输入空间分成两类。所以我们至少需要在我们第一个隐藏层中的两个神经元来学习异或。我们需要将这两个神经元并排放置在一个层中，而不是放在两个不同的层中，以便他们同时看到输入并学习如何分离输入空间。</p><p>下面实现以下最简单的两层神经网络来学习异或门。</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/12/xor_2.png" width="300"><br></div><p><strong>Remark:</strong><br>值得注意的是，一个MLP可以包含任意数量的层和任意数量的神经元。这些通常被称作是超参数(hyperparameters)。如何选择超参数是一个算法设计问题，由实际问题的大小和难度来决定。例如，XOR是一个具有两个特征并且输入大小仅为4的玩具问题。因此，第一个隐藏层中具有2个单位的双层MLP就能够学习XOR函数。一个比较大的问题，例如对mnist数据集中的数字进行分类，将需要在每个layer中使用更多的神经元，后面有机会会讲到。</p><p><strong>MLP模型确立</strong><br>我们在单层感知器中已经看到输出是通过将输入x乘以权重w，加上偏差b并最终采用一个非线性sigmoid函数f来激活计算的。<br>如上图，我们有一个输入层，一个隐藏层和一个输出层，w中的上标表示图层编号。<br>多层感知器有时被称为普通神经网络(vanilla neural networks)，特别是当它们只有一个隐藏层时。</p><p>有趣的是，人工神经网络(ANN)的基本结构与单层感知器相似。我们将在所有层中进行相同的计算。<br>最初我们将我们的输入传到第一个隐藏层，然后第一层的输出被输入到第二层。也就是说，每次我们将当前层的输出视为下一层的输入并执行类似的计算。<br>隐藏层输出可以通过如下表示</p><p>$$<br>h = g(W^{(1)} x + b^{(1)})<br>$$<br>其中，$x$ 为inputs, $g$ 为一个non-linear的激活函数，$W^{(1)}$ 是第一层上的weights，$b$ 是bias。将隐藏层看做输入层，我们可以得到MLP最终层的输出</p><p>$$<br>\hat y = f(W^{(2)} h + b^{(2)})<br>$$</p><p>结合以上两个式子（这个过程称为feed-forward）可得</p><p>$$<br>\hat y = f(W^{(2)} g(W^{(1)} x + b^{(1)}) + b^{(2)})<br>$$</p><p>实际上，无论MLP中有多少图层，数学表达式都是单个方程，其中考虑了从输入开始的所有隐藏层。<br>简言之，每个多层感知器基于训练数据集学都了某个函数，并且能够将相似的输入序列映射到适当的输出。</p><p><strong>Remark:</strong></p><ol><li>在任何层中，由于权重 $W$ 用于将输入传递到输出，所以它被定义为前后神经元层数的矩阵。例如，在我们的MLP中，$W^{(1)}$是2×2，$W^{(2)}$是2×1。</li><li>非线性 $g$ 在神经网络中起着重要作用。最常见的非线性类型包括sigmoid，tanh，relu等，以及它们各自的优点和局限性。nonlinear也称为激活函数。</li><li>feed-forward图解</li></ol><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/feed_forward.png" height="500"><br></div><p><strong>python实现多层感知机求解异或问题</strong><br>不要忘记导入必要的包含和其他全局变量，如学习速率，迭代次数等等，重要的是要注意最小尺寸的MLP（2个输入，2个隐藏的神经元，1个输出神经元），正如我们在这里实现的，学习XOR可能会很棘手。<br>可能需要调整learning rate。太大的值（如0.1）是不常用，因为会使网络振荡overshoot。非常低的值（如0.0001）将导致网络学习非常缓慢，可能需要迭代数十万次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]], np.float32)</span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], np.float32)</span><br></pre></td></tr></table></figure><p>下面实现两层感知器模型的辅助函数<code>multi_layer_perceptron_xor</code>。我们使用S型非线性作为激活函数。也可以用其他非线性的函数例如tanh。</p><p><strong>Remark:</strong><br>观察显示tanh比sigmoid具有更高的收敛概率，但这里还是sigmoid。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_layer_perceptron_xor</span><span class="params">(x, weights, biases)</span>:</span></span><br><span class="line"></span><br><span class="line">    hidden_layer1 = tf.add(tf.matmul(x, weights[<span class="string">'w_h1'</span>]), biases[<span class="string">'b_h1'</span>])</span><br><span class="line">    hidden_layer1 = tf.nn.sigmoid(hidden_layer1)</span><br><span class="line"></span><br><span class="line">    out_layer = tf.add(tf.matmul(hidden_layer1, weights[<span class="string">'w_out'</span>]), biases[<span class="string">'b_out'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out_layer</span><br></pre></td></tr></table></figure><p>权重值的初始化对学习XOR也很重要。我们从一个随机正态分布中选择权重，其均值为0.0，标准差为1.0，并将weights的数据类型设成python字典。</p><p><strong>Remark:</strong></p><ol><li>sigmoid和tanh都有一个输出饱和的巨大区域。这些区域的梯度非常小，这在神经网络中不是好的性质。一般我们希望我们的权重在原点周围足够小，以使激活函数在其线性区域中运行，这部分梯度最大。</li><li>有时候随机初始化可能会遇到一种参数组合，该情形下很容易陷入局部最小值，并且网络不会学到任何东西。所以你在调整参数以减少迭代次数的时候，可能会遇到网络出现两条随机线而不是XOR的解决方案的情况。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">weights = &#123;</span><br><span class="line">    <span class="string">'w_h1'</span> : tf.Variable(tf.random_normal([num_input, num_hidden1])), <span class="comment"># w1, from input layer to hidden layer 1</span></span><br><span class="line">    <span class="string">'w_out'</span>: tf.Variable(tf.random_normal([num_hidden1, num_output])) <span class="comment"># w2, from hidden layer 1 to output layer</span></span><br><span class="line">&#125;</span><br><span class="line">biases = &#123;</span><br><span class="line">    <span class="string">'b_h1'</span> : tf.Variable(tf.zeros([num_hidden1])),</span><br><span class="line">    <span class="string">'b_out'</span>: tf.Variable(tf.zeros([num_output]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建模型:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = multi_layer_perceptron_xor(X, weights, biases)</span><br></pre></td></tr></table></figure></p><p>现在我们需要训练模型。为此，我们定义了一个损失函数和优化器optimizer。由于这是一个二元分类问题，因此使用sigmoid交叉熵损失而不是softmax。<br>MLP利用一种称为反向传播（因为我们已有标签y）的监督学习方法进行训练。<u>反向传播是任何人工神经网络设计的核心。简而言之，它是通过计算成本函数(cost function)的梯度来调整神经元权重的一种方法。它从输出层开始，并将错误传播回第一层，以便神经元以减少前一次迭代的误差的方式来调整权重。通过这种方式，整个网络最终以一组权重值来较好的解释训练集。</u><br>反向传播是一个很大的话题，涉及大量的数学，值得在这方面发表一篇完整的文章。<br>TensorFlow在这里为我们完成所有这些后台计算，包括梯度，反向传播和权重更新的工作。在这里，我们只需要关注MLP如何工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loss_func = tf.reduce_sum(tf.nn.sigmoid_cross_entropy_with_logits(logits=model, labels=Y))</span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(loss_func)</span><br></pre></td></tr></table></figure><p>用最初设置的迭代次数进行迭代。确保你用足够的迭代训练模型。XOR通常需要大量迭代才能收敛，推荐至少100,000次迭代。你可以使用不同的迭代次数来观察网络的行为。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(num_iter):</span><br><span class="line">    tmp_cost, _ = sess.run([loss_func, optimizer], feed_dict=&#123;X: x, Y: y&#125;)</span><br><span class="line">    <span class="keyword">if</span> k % display_step == <span class="number">0</span>:</span><br><span class="line">        <span class="comment">#print('output: ', sess.run(model, feed_dict=&#123;X:x&#125;))</span></span><br><span class="line">        print(<span class="string">'loss= '</span> + <span class="string">"&#123;:.5f&#125;"</span>.format(tmp_cost))</span><br></pre></td></tr></table></figure><p>通过output层，可以绘制出如下的拟合线</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/11/xor_3.png" width="300"><br></div><p>完整代码如下<br><figure class="highlight python"><figcaption><span>&#123;.line-numbers cmd</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">num_features = <span class="number">2</span></span><br><span class="line">num_iter = <span class="number">10000</span></span><br><span class="line">display_step = int(num_iter / <span class="number">10</span>)</span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line"></span><br><span class="line">num_input = <span class="number">2</span>          <span class="comment"># units in the input layer 28x28 images</span></span><br><span class="line">num_hidden1 = <span class="number">2</span>        <span class="comment"># units in the first hidden layer</span></span><br><span class="line">num_output = <span class="number">1</span>         <span class="comment"># units in the output, only one output 0 or 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#%% mlp function</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_layer_perceptron_xor</span><span class="params">(x, weights, biases)</span>:</span></span><br><span class="line"></span><br><span class="line">    hidden_layer1 = tf.add(tf.matmul(x, weights[<span class="string">'w_h1'</span>]), biases[<span class="string">'b_h1'</span>])</span><br><span class="line">    hidden_layer1 = tf.nn.sigmoid(hidden_layer1)</span><br><span class="line"></span><br><span class="line">    out_layer = tf.add(tf.matmul(hidden_layer1, weights[<span class="string">'w_out'</span>]), biases[<span class="string">'b_out'</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out_layer</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line">x = np.array([[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">1</span>, <span class="number">1</span>]], np.float32)  <span class="comment"># 4x2, input</span></span><br><span class="line">y = np.array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>], np.float32)                      <span class="comment"># 4, correct output, AND operation</span></span><br><span class="line">y = np.reshape(y, [<span class="number">4</span>,<span class="number">1</span>])                                    <span class="comment"># convert to 4x1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trainum_inputg data and labels</span></span><br><span class="line">X = tf.placeholder(<span class="string">'float'</span>, [<span class="keyword">None</span>, num_input])     <span class="comment"># training data</span></span><br><span class="line">Y = tf.placeholder(<span class="string">'float'</span>, [<span class="keyword">None</span>, num_output])    <span class="comment"># labels</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># weights and biases</span></span><br><span class="line">weights = &#123;</span><br><span class="line">    <span class="string">'w_h1'</span> : tf.Variable(tf.random_normal([num_input, num_hidden1])), <span class="comment"># w1, from input layer to hidden layer 1</span></span><br><span class="line">    <span class="string">'w_out'</span>: tf.Variable(tf.random_normal([num_hidden1, num_output])) <span class="comment"># w2, from hidden layer 1 to output layer</span></span><br><span class="line">&#125;</span><br><span class="line">biases = &#123;</span><br><span class="line">    <span class="string">'b_h1'</span> : tf.Variable(tf.zeros([num_hidden1])),</span><br><span class="line">    <span class="string">'b_out'</span>: tf.Variable(tf.zeros([num_output]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">model = multi_layer_perceptron_xor(X, weights, biases)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">- cost function and optimization</span></span><br><span class="line"><span class="string">- sigmoid cross entropy -- single output</span></span><br><span class="line"><span class="string">- softmax cross entropy -- multiple output, normalized</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">loss_func = tf.reduce_sum(tf.nn.sigmoid_cross_entropy_with_logits(logits=model, labels=Y))</span><br><span class="line">optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(loss_func)</span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(num_iter):</span><br><span class="line">    tmp_cost, _ = sess.run([loss_func, optimizer], feed_dict=&#123;X: x, Y: y&#125;)</span><br><span class="line">    <span class="keyword">if</span> k % display_step == <span class="number">0</span>:</span><br><span class="line">        <span class="comment">#print('output: ', sess.run(model, feed_dict=&#123;X:x&#125;))</span></span><br><span class="line">        print(<span class="string">'loss= '</span> + <span class="string">"&#123;:.5f&#125;"</span>.format(tmp_cost))</span><br><span class="line"></span><br><span class="line"><span class="comment"># separates the input space</span></span><br><span class="line">W = np.squeeze(sess.run(weights[<span class="string">'w_h1'</span>]))   <span class="comment"># 2x2</span></span><br><span class="line">b = np.squeeze(sess.run(biases[<span class="string">'b_h1'</span>]))    <span class="comment"># 2,</span></span><br><span class="line"></span><br><span class="line">sess.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#%%</span></span><br><span class="line"><span class="comment"># Now plot the fitted line. We need only two points to plot the line</span></span><br><span class="line">plot_x = np.array([np.min(x[:, <span class="number">0</span>] - <span class="number">0.2</span>), np.max(x[:, <span class="number">1</span>]+<span class="number">0.2</span>)])</span><br><span class="line">plot_y =  <span class="number">-1</span> / W[<span class="number">1</span>, <span class="number">0</span>] * (W[<span class="number">0</span>, <span class="number">0</span>] * plot_x + b[<span class="number">0</span>])</span><br><span class="line">plot_y = np.reshape(plot_y, [<span class="number">2</span>, <span class="number">-1</span>])</span><br><span class="line">plot_y = np.squeeze(plot_y)</span><br><span class="line"></span><br><span class="line">plot_y2 = <span class="number">-1</span> / W[<span class="number">1</span>, <span class="number">1</span>] * (W[<span class="number">0</span>, <span class="number">1</span>] * plot_x + b[<span class="number">1</span>])</span><br><span class="line">plot_y2 = np.reshape(plot_y2, [<span class="number">2</span>, <span class="number">-1</span>])</span><br><span class="line">plot_y2 = np.squeeze(plot_y2)</span><br><span class="line"></span><br><span class="line">plt.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=y, s=<span class="number">100</span>, cmap=<span class="string">'viridis'</span>)</span><br><span class="line">plt.plot(plot_x, plot_y, color=<span class="string">'k'</span>, linewidth=<span class="number">2</span>)    <span class="comment"># line 1</span></span><br><span class="line">plt.plot(plot_x, plot_y2, color=<span class="string">'k'</span>, linewidth=<span class="number">2</span>)   <span class="comment"># line 2</span></span><br><span class="line">plt.xlim([<span class="number">-0.2</span>, <span class="number">1.2</span>]); plt.ylim([<span class="number">-0.2</span>, <span class="number">1.25</span>]);</span><br><span class="line"><span class="comment">#plt.text(0.425, 1.05, 'XOR', fontsize=14)</span></span><br><span class="line">plt.xticks([<span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>]); plt.yticks([<span class="number">0.0</span>, <span class="number">0.5</span>, <span class="number">1.0</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p><strong>背后细节:</strong><br>我们已经看到了一个学习XOR的MLP模型。问题是，这个网络是怎样训练出两条可以很好地区分两种输入类型的线？让我们解码一个mlp的内幕。<br>遵照我们上面建立的XOR网络，我们可以解剖每个神经元的输出，如下面的逻辑表。这里有趣的一点是可以看到第一个隐藏层单元h1和h2学到了什么。</p><table><thead><tr><th>x1</th><th>x2</th><th>h1</th><th>h2</th><th>y</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>1</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>1</td><td>1</td><td>1</td></tr><tr><td>1</td><td>1</td><td>1</td><td>0</td><td>0</td></tr></tbody></table><p>在下面的图中，暗区显示1，而亮区意味着0。第一隐藏单元h1学习权重，以便如下图（红色超平面）所示，它将输入序列中x1和x2均为0的输入与其余的分开。<br>h2以同样的方式分隔输入，如图蓝色超平面。<br>这种方式网络提出了以下两种中间解决方案。</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/12/xor_41.png" width="300"><br></div><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/12/xor_52.png" width="300"><br></div><p>你会发现每个h1和h2实际上都是作为单层感知器工作的，其中每个单元实际上都学习了一个单独的线（或超平面）。</p><p><strong>Remark:</strong><br>你也可以把h1当作OR门，把h2当作NAND门。</p><p>再观察上面的逻辑表，这两个中间输出将作为输出神经元y的输入。输出单元在其两个输入（h1和h2）为1时响应1，否则保持沉默（或在生物学术语中不反应）。输出y组合了两个超平面，最后我们找到下面的图，它和我们已经看到的xor输出相同。其中，暗区指示1，亮区指示0。</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/12/xor_6.png" width="300"><br></div><h3 id="4-4-利用多层感知机训练MNIST数据集"><a href="#4-4-利用多层感知机训练MNIST数据集" class="headerlink" title="4.4. 利用多层感知机训练MNIST数据集"></a>4.4. 利用多层感知机训练MNIST数据集</h3><p>上面，我们了一个简单的两层MLP来求解XOR问题。为了看到mlp的实际潜力，我们应该设计一个具有两层以上的适度更大的MLP并且看看它在真实世界数据集上是如何工作的。</p><p>我们选择mnist作为数据集来实现我们的mlp。尽管mnist被认为是机器学习社区中非常简单的数据集之一，但我们仍然选择这个数据集，因为这将使我们清楚地了解多层感知器的工作原理，并有助于使我们做好使用其他大数据集的准备。后面，我们还可以用mnist数据集来做其他一些很酷的事情，比如使用一些降维技术将每个图像视为2D空间中的一个点。让我们来谈谈关于mnist数据集的一些问题，因为我们在机器学习研究中经常遇到这些数据。</p><p>MNIST是手写数字的数据库，由Yann Lecun，Corinna Cortes和Christopher.J.C. Burges创建。有大约60000次训练和10000个测试图像/示例。它是一个名为NIST的更大集合的子集。这些数字已经进行了尺寸标准化并以固定尺寸的图像为中心。图像是 $28\times 28$ 尺寸大小的。作为一个测试平台，我们可以在MNIST数据集上尝试各种学习算法和模式识别方法，同时保持很低的预处理和格式化方面的开销，这使得MNIST成为机器学习中使用最广泛的数据集之一。我们不必担心自己下载数据集，只需要TensorFlow里的一条命令<code>tensorflow.examples.tutorials.mnist</code>就可以获取。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'/path/to/MNIST/'</span>, one_hot=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>首先，我们来看几个样例：</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/12/mlp2_2.png" width="300"><br></div><p>图像是 $28\times 28$ 大小的并且随机的。训练数据由 $55,000$ 个样本组成，因此大小是 $55000\times 784$。训练的labels是 $55000\times 10$ 大小的（10是类别数量0到9）而不是 $55000\times 1$。这是因为它们采用one-hot向量的格式，其中只有相应的位置标签为1，其余为零。例如，如果训练样本是2，则相应的单热矢量将是[0,0,1,0,0,0,0,0,0,0]。</p><p>下图是MNIST样本在2d空间中的快照。</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/12/mlp2_mnist_vis.png" width="300"><br></div><p>我们看到10个集群，分别对应10位数字。一些集群相互交织在一起，这是因为有些数字看起来很相似。例如，数字“4”和数字“9”在手写中有时看起来相似。所以很可能这两个数字在像素空间中彼此靠近。<br>可视化是在将维数从784减少到2（使用t-SNE）之后创建的。后面有机会会讲一些维数降低技术。</p><p><strong>MLP模型:</strong><br>以下是我们要实施的mlp。我们有784个输入像素，用<code>x</code>表示，128个<code>h1</code>神经元，256个<code>h2</code>神经元和10个<code>y</code>或输出神经元。</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/12/mlp2_model.png" width="300"><br></div><p>我们在单层感知器中已经看到，输出 $\hat y$ 是通过将输入 $x$ 乘以权重 $W$，加上偏差 $b$ 并最终采用非线性sigmoid函数 $f$ 来计算的。这里我们有一个输入层，两个隐藏层和一个输出层，如上图所示，$W$ 中的上标依旧表示网络层数编号。</p><p>ANN的基本构件与单层感知器相似。我们将在所有层中进行相同的计算。最初我们有我们的输入到第一个隐藏层，然后第一个隐藏层的输出被输入到第二个隐藏层。<br>每次我们将当前输出视为下一层的输入并执行类似的计算。隐藏层输出公式如下</p><p>$$<br>h1 = g(W^{(1)} x + b^{(1)})<br>$$</p><p>现在隐藏层输出<code>h1</code>将作为第二隐藏层<code>h2</code>的输入，并且<code>h2</code>层的输出作为输入到输出层<code>y</code>的输入。</p><p>$$<br>h2 = g(W^{(2)} h1 + b^{(2)})<br>$$</p><p>结合上式，有</p><p>$$<br>h2 = g(W^{(2)} g(W^{(1)} x + b(1)) + b^{(2)})<br>$$</p><p>得最后的输出</p><p>$$<br>\hat y = f(W^{(3)} h2 + b^{(3)})<br>$$</p><p>这里没有将它们全部结合起来，用x，h1和h2表示y。因为看起来会很杂乱。实际上，我们在前面已经说过，无论MLP中有多少图层，数学表达式都可以是输出的单个方程，其中包括了从输入开始的所有隐藏层。简言之，每个多层感知器基于训练数据集学习单个函数 $f(\cdot)$，并且能够将相似的输入序列映射到适当的输出。</p><p><strong>Remark:</strong><br>依然作为附注，在任何层中，由于权重<code>W</code>用于将输入传递到输出，所以它通常被定义为前后神经元层数之间的矩阵。例如，在我们的mlp中，<code>W1</code>是<code>784x128</code>，<code>W2</code>是<code>128x256</code>，<code>W3</code>是<code>256x10</code>。</p><p><strong>多层神经网络:</strong><br>MLP能做的不只是学习一个简单的异或门。基于以上，我们可以非常轻松地插入新layer来完成更苛刻的分类。让我们再添加一层到目前为止实现的层。</p><p>在XOR中，我们在输出层只有一个神经元，输出0或1。MNIST是一个数字的数据库，所以现在我们有10个输出神经元表示从0到9。</p><p>假设我们在第一个隐藏层中有128个神经元，第二个中有256个神经元。<br>现在我们有10个输出神经元，输入是784维，它们是图像的每个像素。<br>我们在每次迭代中一次处理100个图像，这就是为什么我们将批量大小设置为100（可以是小于图像总数的任何其他数字）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">num_input = <span class="number">784</span>  </span><br><span class="line">num_hidden1 = <span class="number">128</span></span><br><span class="line">num_hidden2 = <span class="number">256</span></span><br><span class="line">num_output = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>以下我们定义神经网络的辅助函数。使用我们在上一篇文章中看到的相同的数学表达式，我们定义了1层，2层等等。你可以看到在另一个层增加一层很容易。这里我们在输出层之前添加了隐藏层2。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_layer_perceptron_mnist</span><span class="params">(x, weights, biases)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    MLP model with more than 2 hidden layers.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    hidden_layer1 = tf.add(tf.matmul(x, weights[<span class="string">'w_h1'</span>]), biases[<span class="string">'b_h1'</span>])</span><br><span class="line">    hidden_layer1 = tf.nn.relu(hidden_layer1)   <span class="comment"># apply ReLU non-linearity</span></span><br><span class="line">    hidden_layer2 = tf.add(tf.matmul(hidden_layer1, weights[<span class="string">'w_h2'</span>]), biases[<span class="string">'b_h2'</span>])</span><br><span class="line">    hidden_layer2 = tf.nn.relu(hidden_layer2)</span><br><span class="line"></span><br><span class="line">    out_layer = tf.add(tf.matmul(hidden_layer2, weights[<span class="string">'w_out'</span>]), biases[<span class="string">'b_out'</span>])  <span class="comment"># NO non-linearity in the output layer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out_layer</span><br></pre></td></tr></table></figure><p>对于我们的三层MLP，我们定义每个层的权重和偏差为python字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">weights = &#123;</span><br><span class="line">    <span class="string">'w_h1'</span> : tf.Variable(tf.random_normal([num_input, num_hidden1])),       <span class="comment"># w1, from input layer to hidden layer 1</span></span><br><span class="line">    <span class="string">'w_h2'</span> : tf.Variable(tf.random_normal([num_hidden1, num_hidden2])),     <span class="comment"># w2, from hidden layer 1 to hidden layer 2</span></span><br><span class="line">    <span class="string">'w_out'</span>: tf.Variable(tf.random_normal([num_hidden2, num_output]))       <span class="comment"># w3, from hidden layer 2 to output layer</span></span><br><span class="line">&#125;</span><br><span class="line">biases = &#123;</span><br><span class="line">    <span class="string">'b_h1'</span> : tf.Variable(tf.random_normal([num_hidden1])),                  <span class="comment"># b1, to hidden layer 1 units</span></span><br><span class="line">    <span class="string">'b_h2'</span> : tf.Variable(tf.random_normal([num_hidden2])),</span><br><span class="line">    <span class="string">'b_out'</span>: tf.Variable(tf.random_normal([num_output]))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，在这里我们使用了一个不同的损失函数，<code>softmax</code>带logits的交叉熵，我们用来学习异或操作的东西是sigmoid。原因是这个数据集有两个以上的类。S形交叉熵损失仅用于二元分类问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">loss_func = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=model, labels=y))</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(loss_func)</span><br></pre></td></tr></table></figure><p>您可能会注意到，不是使用梯度下降作为优化器，而是使用adam作为优化器。adam代表自适应动量估计。它是随机梯度下降算法的替代方法之一，它自己为每个参数自适应地更新学习速率。adam是类似adagrad，adadelta，rmsprop等其他优化算法的升级，它计算每个参数的自适应学习速率。除了存储过去平方梯度的指数衰减平均值之外，它还保持与动量相似的过去梯度的指数衰减平均值。</p><p>现在训练模型进行一些迭代。一起处理55000个图像，这被称为批处理，在计算的上下文中是低效的。另一方面，逐一处理每个图像，这被称为随机处理，也有不利的一面。由于每个梯度都是基于单个训练样例进行计算的，因此误差比噪声梯度下降更大。在这两个极端情况下，我们提出了一种小批量技术，我们在这里称之为batch_size，在此处处理一大块图像。小批量学习可以理解为将批量梯度下降应用于训练数据的较小子集，例如一次100个样本。与批量梯度下降相比，优势在于通过小批量更快地达到收敛，因为更频繁的权重更新。没有关于将多少图像用作批量大小的定义规则。</p><p>正如我们在上一篇文章中提到的，MLP利用监督式学习（因为我们提供了标签）技术，称为反向传播训练。<u>反向传播是任何人工神经网络设计的核心。简而言之，它是通过计算成本函数的梯度来调整神经元权重的一种方法。它从输出层开始，并将错误传播回第一层，以便神经元以减少前一次迭代错误的方式调整权重。</u>通过这种方式，整个网络以一组权重值来确定训练集（希望测试集也是如此）。tensorflow强在幕后处理所有这些梯度计算，反向传播和权重更新。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> iter <span class="keyword">in</span> range(num_iter):</span><br><span class="line">    avg_cost = <span class="number">0.0</span></span><br><span class="line">    num_batch = int(mnist.train.num_examples / batch_size)   <span class="comment"># total number of batches</span></span><br><span class="line">    <span class="keyword">for</span> nB <span class="keyword">in</span> range(num_batch):</span><br><span class="line">        trainData, trainLabels = mnist.train.next_batch(batch_size=batch_size)</span><br><span class="line">        tmp_cost, _ = sess.run([loss_func, optimizer], feed_dict=&#123;x: trainData, y: trainLabels&#125;)</span><br><span class="line"></span><br><span class="line">        avg_cost = avg_cost + tmp_cost / num_batch</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> iter % display_step == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Epoch: %04d'</span> %(iter+<span class="number">1</span>), <span class="string">'cost= '</span> + <span class="string">"&#123;:.5f&#125;"</span>.format(avg_cost), <span class="string">'accuracy: '</span> + <span class="string">"&#123;:.5f&#125;"</span>.format(acc))</span><br></pre></td></tr></table></figure><p>随着迭代的进行，您将看到损失函数在下降，如下图所示。左图显示损失按照迭代进行下降，并在某个点几乎达到饱和。在右侧，准确度从大约90％开始。最初准确性急剧增加，这基本上是损失函数大幅下降的原因。在某个点上，准确度也会在一个很小的范围内得到修正。</p><div align="center"><br><img src="https://nasirml.files.wordpress.com/2017/12/mlp2_loss.png" width="200"><br><img src="https://nasirml.files.wordpress.com/2017/12/mlp2_accuracy.png" width="200"><br></div><p>我们看到我们的MLP在找到10位数类的非线性分类方面做得非常好。准确度在95.45％左右。每次运行情况可能会有所不同。你可以改变不同层次的单元/神经元的数量，批量大小等，并查看网络的行为。</p><p>完整代码如下:<br><figure class="highlight python"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># %% data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># read mnist data. If the data is there, it will not download again.</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">'/path/to/MNIST/'</span>, one_hot=<span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># look at some of the images. randomly</span></span><br><span class="line">rand_img = np.array([<span class="number">2500</span>, <span class="number">1001</span>, <span class="number">100</span>, <span class="number">500</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(np.size(rand_img, <span class="number">0</span>)):</span><br><span class="line">    plt.subplot(<span class="number">1</span>, <span class="number">4</span>, i+<span class="number">1</span>)</span><br><span class="line">    plt.axis(<span class="string">'off'</span>)</span><br><span class="line">    plt.imshow(np.reshape(mnist.train.images[rand_img[i]], [<span class="number">28</span>, <span class="number">28</span>]), cmap=<span class="string">'gray'</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Training data size : '</span>, mnist.train.images.shape)</span><br><span class="line">print(<span class="string">'Training label size: '</span>, mnist.train.labels.shape)  <span class="comment"># labels are in one-hot vector</span></span><br><span class="line"><span class="comment"># print(mnist.train.labels[rand_img])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># %% create the MLP model</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi_layer_perceptron_mnist</span><span class="params">(x, weights, biases)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    MLP model with more than 2 hidden layers.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    hidden_layer1 = tf.add(tf.matmul(x, weights[<span class="string">'w_h1'</span>]), biases[<span class="string">'b_h1'</span>])</span><br><span class="line">    hidden_layer1 = tf.nn.relu(hidden_layer1)   <span class="comment"># apply ReLU non-linearity</span></span><br><span class="line">    hidden_layer2 = tf.add(tf.matmul(hidden_layer1, weights[<span class="string">'w_h2'</span>]), biases[<span class="string">'b_h2'</span>])</span><br><span class="line">    hidden_layer2 = tf.nn.relu(hidden_layer2)</span><br><span class="line"></span><br><span class="line">    out_layer = tf.add(tf.matmul(hidden_layer2, weights[<span class="string">'w_out'</span>]), biases[<span class="string">'b_out'</span>])  <span class="comment"># NO non-linearity in the output layer</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> out_layer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># %% construct the MLP model</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># hyper-parameters</span></span><br><span class="line">learning_rate = <span class="number">0.01</span></span><br><span class="line">num_iter = <span class="number">30</span></span><br><span class="line">batch_size = <span class="number">100</span></span><br><span class="line">display_step = <span class="number">10</span>       <span class="comment"># display the avg cost after this number of epochs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># variables</span></span><br><span class="line">num_input = <span class="number">784</span>         <span class="comment"># units in the input layer 28x28 images</span></span><br><span class="line">num_hidden1 = <span class="number">128</span>       <span class="comment"># units in the first hidden layer</span></span><br><span class="line">num_hidden2 = <span class="number">256</span></span><br><span class="line">num_output = <span class="number">10</span>         <span class="comment"># units in the output layer 0 to 9. OR nClasses</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># trainum_inputg data and labels</span></span><br><span class="line">x = tf.placeholder(<span class="string">'float'</span>, [<span class="keyword">None</span>, num_input])     <span class="comment"># training data</span></span><br><span class="line">y = tf.placeholder(<span class="string">'float'</span>, [<span class="keyword">None</span>, num_output])    <span class="comment"># labels</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># weights and biases</span></span><br><span class="line">weights = &#123;</span><br><span class="line">    <span class="string">'w_h1'</span>: tf.Variable(tf.random_normal([num_input, num_hidden1])),       <span class="comment"># w1, from input layer to hidden layer 1</span></span><br><span class="line">    <span class="string">'w_h2'</span>: tf.Variable(tf.random_normal([num_hidden1, num_hidden2])),     <span class="comment"># w2, from hidden layer 1 to hidden layer 2</span></span><br><span class="line">    <span class="string">'w_out'</span>: tf.Variable(tf.random_normal([num_hidden2, num_output]))       <span class="comment"># w3, from hidden layer 2 to output layer</span></span><br><span class="line">&#125;</span><br><span class="line">biases = &#123;</span><br><span class="line">    <span class="string">'b_h1'</span>: tf.Variable(tf.random_normal([num_hidden1])),                  <span class="comment"># b1, to hidden layer 1 units</span></span><br><span class="line">    <span class="string">'b_h2'</span>: tf.Variable(tf.random_normal([num_hidden2])),</span><br><span class="line">    <span class="string">'b_out'</span>: tf.Variable(tf.random_normal([num_output]))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># construct the model</span></span><br><span class="line">model = multi_layer_perceptron_mnist(x, weights, biases)</span><br><span class="line"></span><br><span class="line"><span class="comment"># cost function and optimization</span></span><br><span class="line">loss_func = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=model, labels=y))</span><br><span class="line">optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(loss_func)</span><br><span class="line"></span><br><span class="line"><span class="comment"># %% Train and test</span></span><br><span class="line"></span><br><span class="line">sess = tf.Session()</span><br><span class="line">init = tf.global_variables_initializer()</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line">cost_all = np.array([])</span><br><span class="line">acc_all = np.array([])</span><br><span class="line"><span class="comment"># Train the model</span></span><br><span class="line"><span class="keyword">for</span> iter <span class="keyword">in</span> range(num_iter):</span><br><span class="line">    avg_cost = <span class="number">0.0</span></span><br><span class="line">    num_batch = int(mnist.train.num_examples / batch_size)   <span class="comment"># total number of batches</span></span><br><span class="line">    <span class="keyword">for</span> nB <span class="keyword">in</span> range(num_batch):</span><br><span class="line">        trainData, trainLabels = mnist.train.next_batch(batch_size=batch_size)</span><br><span class="line">        tmp_cost, _ = sess.run([loss_func, optimizer], feed_dict=&#123;x: trainData, y: trainLabels&#125;)</span><br><span class="line"></span><br><span class="line">        avg_cost = avg_cost + tmp_cost / num_batch</span><br><span class="line"></span><br><span class="line">    correct_pred = tf.equal(tf.arg_max(model, <span class="number">1</span>), tf.arg_max(y, <span class="number">1</span>))</span><br><span class="line">    accuracy = tf.reduce_mean(tf.cast(correct_pred, <span class="string">'float'</span>))</span><br><span class="line">    acc = accuracy.eval(session=sess, feed_dict=&#123;x: mnist.test.images, y: mnist.test.labels&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> iter % display_step == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">'Epoch: %04d'</span> % (iter+<span class="number">1</span>), <span class="string">'cost= '</span> + <span class="string">"&#123;:.5f&#125;"</span>.format(avg_cost), <span class="string">'accuracy: '</span> + <span class="string">"&#123;:.5f&#125;"</span>.format(acc))</span><br><span class="line">    cost_all = np.append(cost_all, avg_cost)</span><br><span class="line">    acc_all = np.append(acc_all, acc)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'Optimization done...'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># plot the accuracy and loss</span></span><br><span class="line">x_data = range(num_iter)</span><br><span class="line">plt.plot(x_data, cost_all, color=<span class="string">'r'</span>)</span><br><span class="line">plt.xticks([<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])</span><br><span class="line">plt.yticks([<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>])</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">plt.plot(x_data, acc_all)</span><br><span class="line">plt.xticks([<span class="number">0</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])</span><br><span class="line">plt.yticks([<span class="number">0.9</span>, <span class="number">0.95</span>, <span class="number">1.0</span>])</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure></p><p>今天内容就止步于此，相信关于感知机大家还有很多问题，比如就刚才这个问题，对3层MLP的简单扩展将会增加一层，看看它是否会改变网络的结果。从理论上讲，如果将这4层MLP应用于MNIST数据，分类准确性应该更高，至少略高一点。不过事实情况建议大家自己尝试。</p><h2 id="5-Exercise"><a href="#5-Exercise" class="headerlink" title="5. Exercise:"></a>5. Exercise:</h2><ol><li>用简单神经网络训练逻辑与的运算，尝试不同的学习率</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputs = np.array([[<span class="number">1</span>, <span class="number">1</span>], [<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]])</span><br><span class="line">labels = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>])</span><br></pre></td></tr></table></figure><ol><li><p>将一组 $(x, y)$ 值划分为下面两类函数之一</p><ul><li>$2x+1=y$ 为第1类</li><li>$7x+1=y$ 为第2类</li></ul><p>训练数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputs = np.array([[<span class="number">1</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">8</span>], [<span class="number">2</span>, <span class="number">15</span>], [<span class="number">3</span>, <span class="number">7</span>], [<span class="number">4</span>, <span class="number">29</span>]])</span><br><span class="line">labels = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>由函数定义可知，$[9, 19]$ 属于第1类，$[9, 64]$ 属于第2类。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">9 19 =&gt; 1</span><br><span class="line">9 64 =&gt; -1</span><br></pre></td></tr></table></figure><p>输出训练之后的神经网络权值参数，最后用 $[9, 19]$ 和 $[3, 22]$ 对训练成功的网络进行测试</p></li><li><p><a href="https://onlookerliu.github.io/2018/02/26/Simple-Perceptron-using-Processing/">可视化感知机训练过程</a></p></li><li>验证如下数据集上，Rosenblatt感知机算法的局限性</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputs = np.array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">6</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">12</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">21</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">16</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">15</span>]])</span><br><span class="line">labels = np.array([<span class="number">1</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">-1</span>])</span><br></pre></td></tr></table></figure><p>Hint:</p><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/noLinearSep.png" width="300"><br></div><h2 id="6-Reference"><a href="#6-Reference" class="headerlink" title="6. Reference"></a>6. Reference</h2><ol><li><p><a href="http://p6xgwpfbb.bkt.clouddn.com/books/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%20%E6%9D%8E%E8%88%AA.pdf" target="_blank" rel="noopener">李航《统计学习方法》</a></p></li><li><p><a href="https://web.stanford.edu/~boyd/cvxbook/" target="_blank" rel="noopener">Stephen Boyd, Convex Optimization</a></p></li><li><p><a href="http://iamtrask.github.io/2015/07/12/basic-python-network/" target="_blank" rel="noopener">A bare bones neural network implementation to describe the inner workings of backpropagation</a></p></li><li><p><a href="http://natureofcode.com/book/chapter-10-neural-networks/" target="_blank" rel="noopener">The Nature of Code</a></p></li><li><p><a href="https://appliedgo.net/perceptron/" target="_blank" rel="noopener">Perceptrons - the most basic form of a neural network</a></p></li><li><p><a href="https://cognitivedemons.wordpress.com/2017/09/02/a-neural-network-in-10-lines-of-cuda-c-code/" target="_blank" rel="noopener">A Neural Network in 10 lines of CUDA C++ Code</a></p></li><li><p><a href="https://nasirml.wordpress.com/2017/11/19/single-layer-perceptron-in-tensorflow/" target="_blank" rel="noopener">Single-layer Perceptron in TensorFlow</a></p></li><li><p><a href="https://nasirml.wordpress.com/2017/12/08/multi-layer-perceptron-in-tensorflow-part-1-xor/" target="_blank" rel="noopener">Multilayer Perceptron in TensorFlow Part 1</a></p></li><li><p><a href="https://nasirml.wordpress.com/2017/12/16/multi-layer-perceptron-in-tensorflow-part-2-mnist/" target="_blank" rel="noopener">Multi-layer Perceptron in TensorFlow Part 2 MNIST</a></p></li><li><p><a href="https://github.com/serbanc94/mnist-perceptron" target="_blank" rel="noopener">mnist-perceptron</a></p></li><li><p><a href="https://aimatters.wordpress.com/2016/01/16/solving-xor-with-a-neural-network-in-tensorflow/#comments" target="_blank" rel="noopener">Solving XOR with a Neural Network in TensorFlow</a></p></li><li><p><a href="https://cseweb.ucsd.edu/~yfreund/papers/LargeMarginsUsingPerceptron.pdf" target="_blank" rel="noopener">Large Margin Classification Using the Perceptron Algorithm</a></p></li><li><p><a href="https://jizhi.im/blog/post/deep_learning_from_scratch_2" target="_blank" rel="noopener">土法神经网络Part II：感知机</a></p></li><li><p><a href="https://jizhi.im/blog/post/deep_learning_from_scratch_5" target="_blank" rel="noopener">土法神经网络Part V：多层感知机</a></p></li><li><p><a href="https://github.com/ClaudeCoulombe/GBC_book_DeepLearningBook" target="_blank" rel="noopener">https://github.com/ClaudeCoulombe/GBC_book_DeepLearningBook</a></p></li><li><p><a href="https://en.wikipedia.org/wiki/Feedforward_neural_network" target="_blank" rel="noopener">wiki - Feedforward neural network</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/21407711" target="_blank" rel="noopener">backpropagation</a></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;从感知机到简单神经网络&quot;&gt;&lt;a href=&quot;#从感知机到简单神经网络&quot; class=&quot;headerlink&quot; title=&quot;从感知机到简单神经网络&quot;&gt;&lt;/a&gt;从感知机到简单神经网络&lt;/h1&gt;&lt;p&gt;近年来，人工神经网络在深度学习的推动下获得了关注。什么是人造神经网络，它是由什么构成的？我想我们可能需要从感知器开始学起。&lt;/p&gt;
&lt;p&gt;在这个讲座中，我们将严格推导感知机学习算法及其对偶理论，掌握一般的人工神经网络，并对单层甚至多层感知器进行编码实现。在几个实战例子中，我们采用人工神经元的最基本版本——感知器，来在超平面上对我们的数据集进行分类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="machine learning" scheme="onlookerliu.github.io/tags/machine-learning/"/>
    
      <category term="deep learning" scheme="onlookerliu.github.io/tags/deep-learning/"/>
    
      <category term="python" scheme="onlookerliu.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-029</title>
    <link href="onlookerliu.github.io/2018/04/13/Project-Euler-029/"/>
    <id>onlookerliu.github.io/2018/04/13/Project-Euler-029/</id>
    <published>2018-04-12T16:47:59.000Z</published>
    <updated>2018-04-11T16:51:06.840Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Consider all integer combinations of $a^b$ for $2 \leq a \leq 5$ and $2 \leq b \leq 5$:</p><p>$$\begin{aligned}<br>&amp; 2^2 = 4\text{, } 2^3 = 8\text{, } 2^4 = 16\text{, } 2^5 = 32 \<br>&amp; 3^2 = 9\text{, } 3^3 = 27\text{, } 3^4 = 81\text{, } 3^5 = 243 \<br>&amp; 4^2 = 16\text{, } 4^3 = 64\text{, } 4^4 = 256\text{, } 4^5 = 1024 \<br>&amp; 5^2 = 25\text{, } 5^3 = 125\text{, } 5^4 = 625\text{, } 5^5 = 3125<br>\end{aligned}$$</p><p>If they are then placed in numerical order, with any repeats removed, we<br>get the following sequence of 15 distinct terms:</p><p>$$4\text{, } 8\text{, } 9\text{, } 16\text{, } 25\text{, } 27\text{, } 32\text{, } 64\text{, } 81\text{, } 125\text{, } 243\text{, } 256\text{, } 625\text{, } 1024\text{, } 3125$$</p><p>How many distinct terms are in the sequence generated by $a^b$ for<br>$2 \leq a \leq 100$ and $2 \leq b \leq 100$?</p><a id="more"></a><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">9183</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">print(len(set(a**b <span class="keyword">for</span> a,b <span class="keyword">in</span> itertools.product(list(range(<span class="number">2</span>,<span class="number">101</span>)), repeat=<span class="number">2</span>))))</span><br></pre></td></tr></table></figure><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">puts (<span class="number">2</span>..<span class="number">100</span>).to_a.product((<span class="number">2</span>..<span class="number">100</span>).to_a).map &#123; <span class="params">|a,n|</span> a**n &#125;.uniq.count</span><br></pre></td></tr></table></figure><h4 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.List (<span class="title">nub</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> ::  <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ length $ nub [a^n | a &lt;- [<span class="number">2.</span><span class="number">.100</span>], n &lt;- [<span class="number">2.</span><span class="number">.100</span>]]</span><br></pre></td></tr></table></figure><h4 id="Mathematica"><a href="#Mathematica" class="headerlink" title="Mathematica"></a>Mathematica</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * We generate all possible powers in the given range, put the values in a flat list,</span></span><br><span class="line"><span class="comment"> * delete the duplicates of any value, and count the length of the remaining list.</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line"><span class="keyword">Length</span>[<span class="keyword">Union</span>[<span class="keyword">Flatten</span>[<span class="keyword">Table</span>[a^b, &#123;a, 2, 100&#125;, &#123;b, 2, 100&#125;]]]]</span><br></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p029</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p029().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We generate all the possible powers in the given range, put each value</span></span><br><span class="line"><span class="comment"> * into a set, and let the set count the number of unique values present.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Set&lt;BigInteger&gt; generated = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">2</span>; a &lt;= <span class="number">100</span>; a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">2</span>; b &lt;= <span class="number">100</span>; b++)</span><br><span class="line">generated.add(BigInteger.valueOf(a).pow(b));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(generated.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;Consider all integer combinations of $a^b$ for $2 \leq a \leq 5$ and $2 \leq b \leq 5$:&lt;/p&gt;
&lt;p&gt;$$\begin{aligned}&lt;br&gt;&amp;amp; 2^2 = 4\text{, } 2^3 = 8\text{, } 2^4 = 16\text{, } 2^5 = 32 \&lt;br&gt;&amp;amp; 3^2 = 9\text{, } 3^3 = 27\text{, } 3^4 = 81\text{, } 3^5 = 243 \&lt;br&gt;&amp;amp; 4^2 = 16\text{, } 4^3 = 64\text{, } 4^4 = 256\text{, } 4^5 = 1024 \&lt;br&gt;&amp;amp; 5^2 = 25\text{, } 5^3 = 125\text{, } 5^4 = 625\text{, } 5^5 = 3125&lt;br&gt;\end{aligned}$$&lt;/p&gt;
&lt;p&gt;If they are then placed in numerical order, with any repeats removed, we&lt;br&gt;get the following sequence of 15 distinct terms:&lt;/p&gt;
&lt;p&gt;$$4\text{, } 8\text{, } 9\text{, } 16\text{, } 25\text{, } 27\text{, } 32\text{, } 64\text{, } 81\text{, } 125\text{, } 243\text{, } 256\text{, } 625\text{, } 1024\text{, } 3125$$&lt;/p&gt;
&lt;p&gt;How many distinct terms are in the sequence generated by $a^b$ for&lt;br&gt;$2 \leq a \leq 100$ and $2 \leq b \leq 100$?&lt;/p&gt;
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-028</title>
    <link href="onlookerliu.github.io/2018/04/12/Project-Euler-028/"/>
    <id>onlookerliu.github.io/2018/04/12/Project-Euler-028/</id>
    <published>2018-04-11T16:43:42.000Z</published>
    <updated>2018-04-13T17:39:14.471Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:</p><pre><code>21 22 23 24 2520  7  8  9 1019  6  1  2 1118  5  4  3 1217 16 15 14 13</code></pre><p>It can be verified that the sum of the numbers on the diagonals is 101.</p><p>What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?</p><a id="more"></a><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">669171001</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum_diagonals_of_spiral</span><span class="params">(size)</span>:</span></span><br><span class="line">    n = <span class="number">1</span></span><br><span class="line">    step = <span class="number">2</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    since_last = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt;= size**<span class="number">2</span>:</span><br><span class="line">        total += n</span><br><span class="line">        n += step</span><br><span class="line">        since_last += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> since_last == <span class="number">4</span>:</span><br><span class="line">            step += <span class="number">2</span></span><br><span class="line">            since_last = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line"></span><br><span class="line">print(sum_diagonals_of_spiral(<span class="number">1001</span>))</span><br></pre></td></tr></table></figure><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">sum = i</span><br><span class="line">step = <span class="number">2</span></span><br><span class="line"><span class="keyword">until</span> i &gt;= <span class="number">1001</span>**<span class="number">2</span></span><br><span class="line">  <span class="number">4</span>.times &#123; sum += i += step &#125;</span><br><span class="line">  step += <span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts sum</span><br></pre></td></tr></table></figure><h4 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ foldr (+) <span class="number">1</span> [<span class="number">4</span>*n^<span class="number">2</span> - <span class="number">6</span>*n + <span class="number">6</span> | n &lt;- [<span class="number">3</span>,<span class="number">5.</span><span class="number">.1001</span>]]</span><br></pre></td></tr></table></figure><h4 id="Mathematica"><a href="#Mathematica" class="headerlink" title="Mathematica"></a>Mathematica</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * From the diagram, let's observe the four corners of an n * n square (where n is odd).</span></span><br><span class="line"><span class="comment"> * It's not hard to convince yourself that the top right corner always has the value n^2.</span></span><br><span class="line"><span class="comment"> * Working counterclockwise (backwards), the top left corner has the value n^2 - (n - 1),</span></span><br><span class="line"><span class="comment"> * the bottom left corner has the value n^2 - 2(n - 1), and the bottom right is n^2 - 3(n - 1).</span></span><br><span class="line"><span class="comment"> * Putting it all together, this outermost ring contributes 4n^2 - 6(n - 1) to the final sum.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Incidentally, the closed form of this sum is (4m^3 + 3m^2 + 8m - 9) / 6, where m = size.</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line">size = <span class="number">1001</span>;  <span class="comment">(* Must be odd *)</span></span><br><span class="line"><span class="keyword">Sum</span>[<span class="keyword">Block</span>[&#123;n = 2k + 1&#125;, <span class="number">4</span> * n^<span class="number">2</span> - <span class="number">6</span> * (n - <span class="number">1</span>)], &#123;k, (size - 1) / 2&#125;] + <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p028</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p028().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * From the diagram, let's observe the four corners of an n * n square (where n is odd).</span></span><br><span class="line"><span class="comment"> * It's not hard to convince yourself that the top right corner always has the value n^2.</span></span><br><span class="line"><span class="comment"> * Working counterclockwise (backwards), the top left corner has the value n^2 - (n - 1),</span></span><br><span class="line"><span class="comment"> * the bottom left corner has the value n^2 - 2(n - 1), and the bottom right is n^2 - 3(n - 1).</span></span><br><span class="line"><span class="comment"> * Putting it all together, this outermost ring contributes 4n^2 - 6(n - 1) to the final sum.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Incidentally, the closed form of this sum is (4m^3 + 3m^2 + 8m - 9) / 6, where m = size.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">1001</span>;  <span class="comment">// Must be odd</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> sum = <span class="number">1</span>;  <span class="comment">// Special case for size 1</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> n = <span class="number">3</span>; n &lt;= SIZE; n += <span class="number">2</span>)</span><br><span class="line">sum += <span class="number">4</span> * n * n - <span class="number">6</span> * (n - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> Long.toString(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;Starting with the number 1 and moving to the right in a clockwise direction a 5 by 5 spiral is formed as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;21 22 23 24 25
20  7  8  9 10
19  6  1  2 11
18  5  4  3 12
17 16 15 14 13
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It can be verified that the sum of the numbers on the diagonals is 101.&lt;/p&gt;
&lt;p&gt;What is the sum of the numbers on the diagonals in a 1001 by 1001 spiral formed in the same way?&lt;/p&gt;
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-027</title>
    <link href="onlookerliu.github.io/2018/04/11/Project-Euler-027/"/>
    <id>onlookerliu.github.io/2018/04/11/Project-Euler-027/</id>
    <published>2018-04-11T00:38:38.000Z</published>
    <updated>2018-04-12T01:18:32.553Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>Euler published the remarkable quadratic formula:</p><p>$$<br>n^2 + n + 41<br>$$</p><p>It turns out that the formula will produce 40 primes for the consecutive values n = 0 to 39. However, when n = 40, $40^2 + 40 + 41 = 40(40 + 1) + 41$ is divisible by 41, and certainly when n = 41, $41^2 + 41 + 41$ is clearly divisible by 41.</p><p>Using computers, the incredible formula  $n^2 - 79n + 1601$ was discovered, which produces 80 primes for the consecutive values n = 0 to 79. The product of the coefficients, 79 and 1601, is 126479.</p><p>Considering quadratics of the form:</p><p>$$<br>n^2 + an + b, \text{ where } |a| \lt 1000 \text{ and } |b| \lt 1000<br>$$</p><p>Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.</p><a id="more"></a><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-59231</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorize</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'fact() argument should be &gt;= 1'</span>)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> []  <span class="comment"># special case</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="comment"># iterate over all even numbers first.</span></span><br><span class="line">    <span class="keyword">while</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        res.append(<span class="number">2</span>)</span><br><span class="line">        n //= <span class="number">2</span></span><br><span class="line">    <span class="comment"># try odd numbers up to sqrt(n)</span></span><br><span class="line">    limit = math.sqrt(n+<span class="number">1</span>)</span><br><span class="line">    i = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= limit:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            res.append(i)</span><br><span class="line">            n //= i</span><br><span class="line">            limit = math.sqrt(n+i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> n != <span class="number">1</span>:</span><br><span class="line">        res.append(n)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_divisors</span><span class="params">(n)</span>:</span></span><br><span class="line">    factors = sorted(factorize(n))</span><br><span class="line">    histogram = defaultdict(int)</span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> factors:</span><br><span class="line">        histogram[factor] += <span class="number">1</span></span><br><span class="line">    <span class="comment"># number of divisors is equal to product of </span></span><br><span class="line">    <span class="comment"># incremented exponents of prime factors</span></span><br><span class="line">    <span class="keyword">from</span> operator <span class="keyword">import</span> mul</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> reduce(mul, [exponent + <span class="number">1</span> <span class="keyword">for</span> exponent <span class="keyword">in</span> list(histogram.values())])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">num_primes</span><span class="params">(formula)</span>:</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">        res = formula(n)</span><br><span class="line">        <span class="keyword">if</span> res &lt; <span class="number">1</span> <span class="keyword">or</span> <span class="keyword">not</span> is_prime(res):</span><br><span class="line">            <span class="keyword">return</span> num</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span><span class="params">(num)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> num_divisors(num) == <span class="number">2</span> <span class="keyword">and</span> num &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    most = <span class="number">0</span></span><br><span class="line">    best = (<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> a, b <span class="keyword">in</span> product(list(range(<span class="number">-999</span>,<span class="number">1000</span>)), list(range(<span class="number">-999</span>, <span class="number">1000</span>))):</span><br><span class="line">        formula = <span class="keyword">lambda</span> n: n**<span class="number">2</span> + a*n + b</span><br><span class="line">        num = num_primes(formula) </span><br><span class="line">        <span class="keyword">if</span> num &gt; most:</span><br><span class="line">            most = num</span><br><span class="line">            best = (a, b)</span><br><span class="line">    print(mul(*best))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'mathn'</span></span><br><span class="line">puts (-<span class="number">999</span>..<span class="number">999</span>).to_a.product((-<span class="number">999</span>..<span class="number">999</span>).to_a).map &#123; <span class="params">|a, b|</span></span><br><span class="line">  [(<span class="number">0</span>..<span class="number">100</span>).take_while &#123; <span class="params">|n|</span> (n**<span class="number">2</span> + a*n + b).prime? &#125;.count, a * b]</span><br><span class="line">&#125;.max[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Function (<span class="title">on</span>)</span><br><span class="line"><span class="keyword">import</span> Data.List (<span class="title">maximumBy</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">isPrime</span> :: <span class="type">Int</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">isPrime</span> n | n &lt; <span class="number">1</span> = <span class="type">False</span></span><br><span class="line">          | otherwise = not $ or [n `rem` x == <span class="number">0</span> | x &lt;- [<span class="number">2.</span>.floor $ sqrt $ fromIntegral n]]</span><br><span class="line"> </span><br><span class="line"><span class="title">coefficients</span> :: [(<span class="type">Int</span>, <span class="type">Int</span>)]</span><br><span class="line"><span class="title">coefficients</span> = [(a, b) | a &lt;- [<span class="number">-999.</span><span class="number">.999</span>], b &lt;- filter isPrime [<span class="number">0.</span><span class="number">.999</span>]]</span><br><span class="line"></span><br><span class="line"><span class="title">primesProduced</span> :: (<span class="type">Int</span>, <span class="type">Int</span>) -&gt; <span class="type">Int</span></span><br><span class="line"><span class="title">primesProduced</span> (a, b) = length $ takeWhile isPrime [n^<span class="number">2</span> + a*n + b | n &lt;- [<span class="number">0.</span>.]]</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ uncurry (*) $ maximumBy (compare `on` primesProduced) coefficients</span><br></pre></td></tr></table></figure><h4 id="Mathematica"><a href="#Mathematica" class="headerlink" title="Mathematica"></a>Mathematica</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">CountConsecutivePrimes[a_, b_] := <span class="keyword">Block</span>[&#123;i&#125;, <span class="keyword">For</span>[i = <span class="number">0</span>, <span class="keyword">PrimeQ</span>[i^<span class="number">2</span> + a * i + b], i++]; i]</span><br><span class="line"></span><br><span class="line">maxConsecutive = <span class="number">0</span>;</span><br><span class="line">maxProduct = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">For</span>[a = <span class="number">-999</span>, a &lt; <span class="number">1000</span>, a++,</span><br><span class="line">  <span class="keyword">For</span>[b = <span class="number">-999</span>, b &lt; <span class="number">1000</span>, b++,</span><br><span class="line">    temp = CountConsecutivePrimes[a, b];</span><br><span class="line">    <span class="keyword">If</span>[temp &gt; maxConsecutive,</span><br><span class="line">      maxConsecutive = temp;</span><br><span class="line">      maxProduct = a * b]]]</span><br><span class="line">maxProduct</span><br></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p027</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p027().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> bestNum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> bestA = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> bestB = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = -<span class="number">1000</span>; a &lt;= <span class="number">1000</span>; a++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = -<span class="number">1000</span>; b &lt;= <span class="number">1000</span>; b++) &#123;</span><br><span class="line"><span class="keyword">int</span> num = numberOfConsecutivePrimesGenerated(a, b);</span><br><span class="line"><span class="keyword">if</span> (num &gt; bestNum) &#123;</span><br><span class="line">bestNum = num;</span><br><span class="line">bestA = a;</span><br><span class="line">bestB = b;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(bestA * bestB);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">numberOfConsecutivePrimesGenerated</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> n = i * i + i * a + b;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">0</span> || !Library.isPrime(n))</span><br><span class="line"><span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;Euler published the remarkable quadratic formula:&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;n^2 + n + 41&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;It turns out that the formula will produce 40 primes for the consecutive values n = 0 to 39. However, when n = 40, $40^2 + 40 + 41 = 40(40 + 1) + 41$ is divisible by 41, and certainly when n = 41, $41^2 + 41 + 41$ is clearly divisible by 41.&lt;/p&gt;
&lt;p&gt;Using computers, the incredible formula  $n^2 - 79n + 1601$ was discovered, which produces 80 primes for the consecutive values n = 0 to 79. The product of the coefficients, 79 and 1601, is 126479.&lt;/p&gt;
&lt;p&gt;Considering quadratics of the form:&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;n^2 + an + b, \text{ where } |a| \lt 1000 \text{ and } |b| \lt 1000&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;Find the product of the coefficients, a and b, for the quadratic expression that produces the maximum number of primes for consecutive values of n, starting with n = 0.&lt;/p&gt;
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-026</title>
    <link href="onlookerliu.github.io/2018/04/11/Project-Euler-026/"/>
    <id>onlookerliu.github.io/2018/04/11/Project-Euler-026/</id>
    <published>2018-04-10T16:50:12.000Z</published>
    <updated>2018-04-11T12:27:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:</p><p>$$<br>\begin{aligned}<br>\frac{1}{2}&amp;=0.5 \\<br>\frac{1}{3}&amp;=0.\overline{3} \\<br>\frac{1}{4}&amp;=0.25 \\<br>\frac{1}{5}&amp;=0.2 \\<br>\frac{1}{6}&amp;=0.1\overline{6} \\<br>\frac{1}{7}&amp;=0.\overline{142857} \\<br>\frac{1}{8}&amp;=0.125 \\<br>\frac{1}{9}&amp;=0.\overline{1} \\<br>\frac{1}{10}&amp;=0.1<br>\end{aligned}<br>$$</p><p>Where $0.1\overline{6}$ means $0.1666…$, and has a 1-digit recurring cycle. It can be seen that $\frac{1}{7}$ has a 6-digit recurring cycle.</p><p>Find the value of $d &lt; 1000$ for which $\frac{1}{d}$ contains the longest recurring cycle in its decimal fraction part.</p><a id="more"></a><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">983</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recurring_cycle</span><span class="params">(n, d)</span>:</span></span><br><span class="line">    <span class="comment"># solve 10^s % d == 10^(s+t) % d</span></span><br><span class="line">    <span class="comment"># where t is length and s is start</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(<span class="number">1</span>, d):</span><br><span class="line">        <span class="keyword">if</span> <span class="number">1</span> == <span class="number">10</span>**t % d:</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">longest = max(recurring_cycle(<span class="number">1</span>, i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">1001</span>))</span><br><span class="line">print([i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>,<span class="number">1001</span>) <span class="keyword">if</span> recurring_cycle(<span class="number">1</span>, i) == longest][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">puts (<span class="number">0</span>..<span class="number">1000</span>).map &#123; <span class="params">|d|</span> </span><br><span class="line">  (<span class="number">1</span>..d).detect(lambda&#123;<span class="number">0</span>&#125;) &#123; <span class="params">|t|</span> (<span class="number">10</span>**t % d) == <span class="number">1</span> &#125; </span><br><span class="line">&#125;.each_with_index.max[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h4 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.List (<span class="title">maximumBy</span>)</span><br><span class="line"><span class="keyword">import</span> Data.Function (<span class="title">on</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">cycleLength</span> :: <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">cycleLength</span> n | even n = <span class="number">0</span></span><br><span class="line">              | n `rem` <span class="number">5</span> == <span class="number">0</span> = <span class="number">0</span></span><br><span class="line">              | otherwise = head [p | p &lt;- [<span class="number">1.</span>.], (<span class="number">10</span>^p - <span class="number">1</span>) `rem` n == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ maximumBy (compare `on` cycleLength) [<span class="number">1</span>,<span class="number">3.</span><span class="number">.1000</span>]</span><br></pre></td></tr></table></figure><h4 id="Mathematica"><a href="#Mathematica" class="headerlink" title="Mathematica"></a>Mathematica</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CycleLength[x_] := <span class="keyword">Length</span>[<span class="keyword">Last</span>[<span class="keyword">First</span>[<span class="keyword">RealDigits</span>[x]]]]</span><br><span class="line">d = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">For</span>[i = <span class="number">1</span>, i &lt; <span class="number">1000</span>, i++,</span><br><span class="line">  <span class="keyword">If</span>[CycleLength[<span class="number">1</span> / i] &gt; CycleLength[<span class="number">1</span> / d], d = i]]</span><br><span class="line">d</span><br></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p026</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p026().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> bestNumber = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> bestLength = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> len = getCycleLength(i);</span><br><span class="line"><span class="keyword">if</span> (len &gt; bestLength) &#123;</span><br><span class="line">bestNumber = i;</span><br><span class="line">bestLength = len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(bestNumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCycleLength</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">Map&lt;Integer,Integer&gt; stateToIter = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">int</span> state = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> iter = <span class="number">0</span>; ; iter++) &#123;</span><br><span class="line"><span class="keyword">if</span> (stateToIter.containsKey(state))</span><br><span class="line"><span class="keyword">return</span> iter - stateToIter.get(state);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">stateToIter.put(state, iter);</span><br><span class="line">state = state * <span class="number">10</span> % n;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;\begin{aligned}&lt;br&gt;\frac{1}{2}&amp;amp;=0.5 \\&lt;br&gt;\frac{1}{3}&amp;amp;=0.\overline{3} \\&lt;br&gt;\frac{1}{4}&amp;amp;=0.25 \\&lt;br&gt;\frac{1}{5}&amp;amp;=0.2 \\&lt;br&gt;\frac{1}{6}&amp;amp;=0.1\overline{6} \\&lt;br&gt;\frac{1}{7}&amp;amp;=0.\overline{142857} \\&lt;br&gt;\frac{1}{8}&amp;amp;=0.125 \\&lt;br&gt;\frac{1}{9}&amp;amp;=0.\overline{1} \\&lt;br&gt;\frac{1}{10}&amp;amp;=0.1&lt;br&gt;\end{aligned}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;Where $0.1\overline{6}$ means $0.1666…$, and has a 1-digit recurring cycle. It can be seen that $\frac{1}{7}$ has a 6-digit recurring cycle.&lt;/p&gt;
&lt;p&gt;Find the value of $d &amp;lt; 1000$ for which $\frac{1}{d}$ contains the longest recurring cycle in its decimal fraction part.&lt;/p&gt;
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-025</title>
    <link href="onlookerliu.github.io/2018/04/09/Project-Euler-025/"/>
    <id>onlookerliu.github.io/2018/04/09/Project-Euler-025/</id>
    <published>2018-04-08T16:35:09.000Z</published>
    <updated>2018-04-12T01:17:42.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>The Fibonacci sequence is defined by the recurrence relation:</p><p>$$<br>F<em>n = F</em>{n-1} + F_{n-2} \text{ where } F_1 = 1 \text{ and } F_2 = 1<br>$$</p><p>Hence the first 12 terms will be:</p><p>$$<br>\begin{split}<br>F_1 &amp;= 1 \<br>F_2 &amp;= 1 \<br>F_3 &amp;= 2 \<br>F_4 &amp;= 3 \<br>F_5 &amp;= 5 \<br>F_6 &amp;= 8 \<br>F_7 &amp;= 13 \<br>F_8 &amp;= 21 \<br>F<em>9 &amp;= 34 \<br>F</em>{10} &amp;= 55 \<br>F<em>{11} &amp;= 89 \<br>F</em>{12} &amp;= 144<br>\end{split}<br>$$</p><p>The 12th term, $F_{12}$, is the first term to contain three digits.</p><p>What is the first term in the Fibonacci sequence to contain 1000 digits?</p><a id="more"></a><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4782</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Because the target number is relatively small, we simply compute each Fibonacci number starting</span></span><br><span class="line"><span class="comment"># from the beginning until we encounter one with exactly 1000 digits. The Fibonacci sequence grows</span></span><br><span class="line"><span class="comment"># exponentially with a base of about 1.618, so the numbers in base 10 will lengthen by one digit</span></span><br><span class="line"><span class="comment"># after every log10(1.618) ~= 4.78 steps on average. This means the answer is at index around 4780.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">()</span>:</span></span><br><span class="line">DIGITS = <span class="number">1000</span></span><br><span class="line">prev = <span class="number">1</span></span><br><span class="line">cur = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.count():</span><br><span class="line"><span class="comment"># At this point, prev = fibonacci(i - 1) and cur = fibonacci(i)</span></span><br><span class="line"><span class="keyword">if</span> len(str(cur)) &gt; DIGITS:</span><br><span class="line"><span class="keyword">raise</span> RuntimeError(<span class="string">"Not found"</span>)</span><br><span class="line"><span class="keyword">elif</span> len(str(cur)) == DIGITS:</span><br><span class="line"><span class="keyword">return</span> str(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Advance the Fibonacci sequence by one step</span></span><br><span class="line">prev, cur = cur, prev + cur</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">print(compute())</span><br></pre></td></tr></table></figure><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line">t1, t2 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> t2.to_s.length &lt; <span class="number">1000</span></span><br><span class="line">  t1, t2 = t2, t1 + t2</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts i</span><br></pre></td></tr></table></figure><h4 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">fibs</span> ::  [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">fibs</span> = <span class="number">0</span> : <span class="number">1</span> : zipWith (+) fibs (tail fibs)</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> ::  <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ head [i | i &lt;- [<span class="number">1.</span>.], (==<span class="number">1000</span>) . length . show $ fibs !! i]</span><br></pre></td></tr></table></figure><h4 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">def</span></span> fibs</span><br><span class="line">  (<span class="name">lazy-cat</span> [(<span class="name">BigInteger/ZERO</span>) (<span class="name">BigInteger/ONE</span>)] (<span class="name"><span class="builtin-name">map</span></span> + fibs (<span class="name"><span class="builtin-name">rest</span></span> fibs))))</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">count</span></span> (<span class="name"><span class="builtin-name">take-while</span></span> #(<span class="name"><span class="builtin-name">&lt;</span></span> % (<span class="name">.pow</span> (<span class="name">BigInteger/TEN</span>) <span class="number">999</span>)) fibs)))</span><br></pre></td></tr></table></figure><h4 id="Mathematica"><a href="#Mathematica" class="headerlink" title="Mathematica"></a>Mathematica</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * Because the target number is relatively small, we simply compute each Fibonacci number starting</span></span><br><span class="line"><span class="comment"> * from the beginning until we encounter one with exactly 1000 digits. The Fibonacci sequence grows</span></span><br><span class="line"><span class="comment"> * exponentially with a base of about 1.618, so the numbers in base 10 will lengthen by one digit</span></span><br><span class="line"><span class="comment"> * after every log10(1.618) ~= 4.78 steps on average. This means the answer is at index around 4780.</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line">digits = <span class="number">1000</span>;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">While</span>[<span class="keyword">Fibonacci</span>[i] &lt; <span class="number">10</span>^(digits<span class="number">-1</span>), i++]</span><br><span class="line">i</span><br></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p025</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p025().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Because the target number is relatively small, we simply compute each Fibonacci number starting</span></span><br><span class="line"><span class="comment"> * from the beginning until we encounter one with exactly 1000 digits. The Fibonacci sequence grows</span></span><br><span class="line"><span class="comment"> * exponentially with a base of about 1.618, so the numbers in base 10 will lengthen by one digit</span></span><br><span class="line"><span class="comment"> * after every log10(1.618) ~= 4.78 steps on average. This means the answer is at index around 4780.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DIGITS = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BigInteger lowerThres = BigInteger.TEN.pow(DIGITS - <span class="number">1</span>);</span><br><span class="line">BigInteger upperThres = BigInteger.TEN.pow(DIGITS);</span><br><span class="line">BigInteger prev = BigInteger.ONE;</span><br><span class="line">BigInteger cur = BigInteger.ZERO;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line"><span class="comment">// At this point, prev = fibonacci(i - 1) and cur = fibonacci(i)</span></span><br><span class="line"><span class="keyword">if</span> (cur.compareTo(upperThres) &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"Not found"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (cur.compareTo(lowerThres) &gt;= <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> Integer.toString(i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Advance the Fibonacci sequence by one step</span></span><br><span class="line">BigInteger temp = cur.add(prev);</span><br><span class="line">prev = cur;</span><br><span class="line">cur = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;The Fibonacci sequence is defined by the recurrence relation:&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;F&lt;em&gt;n = F&lt;/em&gt;{n-1} + F_{n-2} \text{ where } F_1 = 1 \text{ and } F_2 = 1&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;Hence the first 12 terms will be:&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;\begin{split}&lt;br&gt;F_1 &amp;amp;= 1 \&lt;br&gt;F_2 &amp;amp;= 1 \&lt;br&gt;F_3 &amp;amp;= 2 \&lt;br&gt;F_4 &amp;amp;= 3 \&lt;br&gt;F_5 &amp;amp;= 5 \&lt;br&gt;F_6 &amp;amp;= 8 \&lt;br&gt;F_7 &amp;amp;= 13 \&lt;br&gt;F_8 &amp;amp;= 21 \&lt;br&gt;F&lt;em&gt;9 &amp;amp;= 34 \&lt;br&gt;F&lt;/em&gt;{10} &amp;amp;= 55 \&lt;br&gt;F&lt;em&gt;{11} &amp;amp;= 89 \&lt;br&gt;F&lt;/em&gt;{12} &amp;amp;= 144&lt;br&gt;\end{split}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;The 12th term, $F_{12}$, is the first term to contain three digits.&lt;/p&gt;
&lt;p&gt;What is the first term in the Fibonacci sequence to contain 1000 digits?&lt;/p&gt;
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Perceptron with Margin</title>
    <link href="onlookerliu.github.io/2018/04/07/Perceptron-with-Margin/"/>
    <id>onlookerliu.github.io/2018/04/07/Perceptron-with-Margin/</id>
    <published>2018-04-07T09:09:56.000Z</published>
    <updated>2018-04-18T14:01:59.493Z</updated>
    
    <content type="html"><![CDATA[<p>It is a simple simulation of Perceptron Algorithm using <a href="https://p5js.org/" target="_blank" rel="noopener">p5.js</a>.</p><p>You can insert the data-points belonging to two classes as well as change the Learning Rate and Threshold(or Margin) on canvas at runtime using Sliders and simulate how the Linear Seperater converges to classify the given data.</p><p>You can interact on web browsers by simply click the <code>index.html</code> file on your browser.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">width</span>=<span class="string">device-width,</span> <span class="attr">initial-scale</span>=<span class="string">1.0,</span> <span class="attr">maximum-scale</span>=<span class="string">1.0,</span> <span class="attr">user-scalable</span>=<span class="string">0</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"> body &#123;padding: 0; margin: 0;&#125; </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../p5.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../addons/p5.dom.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../addons/p5.sound.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"sketch.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">      body &#123;</span></span><br><span class="line"><span class="undefined">        padding: 0;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      canvas &#123;</span></span><br><span class="line"><span class="undefined">        vertical-align: top;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      html &#123;</span></span><br><span class="line"><span class="undefined">        font-family: monospace;</span></span><br><span class="line"><span class="undefined">        color: #333;</span></span><br><span class="line"><span class="undefined">        font-size: 20px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>User can insert the data-points belonging to two classes as well as change the <strong>Learning Rate</strong> and <strong>Threshold or Margin</strong> on canvas at runtime using Sliders and simulate how the Linear Separater converges to classify the given data. <code>sketch.js</code> contains the core logic for the simulation.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line">instruction = <span class="string">"Tap on the Screen to Insert Data Points..."</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> epsilonSlider, epsilonSpan;</span><br><span class="line"><span class="keyword">var</span> minPointsSlider;</span><br><span class="line"><span class="keyword">var</span> changeColor;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Data</span></span><br><span class="line">X1 = [];</span><br><span class="line">X2 = [];</span><br><span class="line">Y  = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Hyperparameters</span></span><br><span class="line">b = <span class="number">0.0</span>;</span><br><span class="line">w1 = <span class="number">0.0</span>;</span><br><span class="line">w2 = <span class="number">0.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> threshold = <span class="number">100.0</span>;</span><br><span class="line"><span class="keyword">var</span> learning_rate = <span class="number">0.1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parameters</span></span><br><span class="line"><span class="keyword">var</span> x1, x2;</span><br><span class="line"><span class="keyword">var</span> y1, y2;</span><br><span class="line"><span class="keyword">var</span> m, b;</span><br><span class="line"><span class="keyword">var</span> type = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  createCanvas(windowWidth, windowHeight - <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">  createSpan(<span class="string">"Learning Rate: "</span>);</span><br><span class="line">  epsilonSlider = createSlider(<span class="number">0</span>, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">  epsilonSpan = createSpan(epsilonSlider.value());</span><br><span class="line">  createSpan(<span class="string">" | "</span>);</span><br><span class="line">  createSpan(<span class="string">"Threshold: "</span>);</span><br><span class="line">  minPointsSlider = createSlider(<span class="number">0</span>, <span class="number">300</span>, <span class="number">100</span>);</span><br><span class="line">  minPointsSpan = createSpan(epsilonSlider.value());</span><br><span class="line">  createSpan(<span class="string">" | "</span>);</span><br><span class="line">  changeColor = createButton(<span class="string">"Change Color"</span>);</span><br><span class="line">  changeColor.mousePressed(swap);</span><br><span class="line">  createSpan(<span class="string">" | "</span>);</span><br><span class="line">  train = createButton(<span class="string">"Start Training"</span>);</span><br><span class="line">  train.mousePressed(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  background(<span class="number">51</span>);</span><br><span class="line"></span><br><span class="line">  learning_rate = epsilonSlider.value() / <span class="number">1000</span>;</span><br><span class="line">  epsilonSpan.html(learning_rate.toString());</span><br><span class="line">  threshold = minPointsSlider.value();</span><br><span class="line">  minPointsSpan.html(threshold.toString());</span><br><span class="line"></span><br><span class="line">  fill(<span class="number">250</span>);</span><br><span class="line">  noStroke();</span><br><span class="line">  textFont(<span class="string">'monospace'</span>);</span><br><span class="line">  textSize(<span class="number">25</span>);</span><br><span class="line">  text(<span class="string">"Perceptron with Margin"</span>, <span class="number">15</span>, <span class="number">40</span>);</span><br><span class="line">  textSize(<span class="number">20</span>);</span><br><span class="line">  text(instruction, <span class="number">15</span>, windowHeight - <span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">  noStroke();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; X1.length; i++) &#123;</span><br><span class="line">    Y[i] == <span class="number">1</span> ? fill(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>) : fill(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">    ellipse(X1[i], X2[i], <span class="number">8</span>, <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    fit();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  drawLine();</span><br><span class="line">  stroke(<span class="number">255</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line">  line(x1, y1+threshold, x2, y2+threshold);</span><br><span class="line">  line(x1, y1-threshold, x2, y2-threshold);</span><br><span class="line"></span><br><span class="line">  stroke(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">  line(x1, y1, x2, y2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mouseClicked</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  X1.push(mouseX);</span><br><span class="line">  X2.push(mouseY);</span><br><span class="line">  Y.push(type);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  type = -type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">activate</span>(<span class="params">y, threshold</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (y &gt; threshold) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (y &lt;= -threshold) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; X1.length; i++) &#123;</span><br><span class="line">    y = w1 * X1[i] + w2 * X2[i] + b;</span><br><span class="line">    y = activate(y, threshold);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">" "</span> + y + <span class="string">" "</span> + Y[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (y != Y[i]) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"Here"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> x1 = map(X1[i], <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">var</span> x2 = map(X2[i], <span class="number">0</span>, height, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      w1 += learning_rate * Y[i] * x1;</span><br><span class="line">      w2 += learning_rate * Y[i] * x2;</span><br><span class="line">      b += learning_rate * Y[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">keyPressed</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (keyCode == ENTER) &#123;</span><br><span class="line">    swap();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (keyCode == ESCAPE) &#123;</span><br><span class="line">    flag = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawLine</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  x1 = <span class="number">0</span>;</span><br><span class="line">  x2 = width;</span><br><span class="line"></span><br><span class="line">  m = -(w1 / w2);</span><br><span class="line">  c = -(b / w2);</span><br><span class="line"></span><br><span class="line">  y1 = m * x1 + c;</span><br><span class="line">  y2 = m * x2 + c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://p6xgwpfbb.bkt.clouddn.com/perceptron/perceptron_with_margin.gif" width="60%"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;It is a simple simulation of Perceptron Algorithm using &lt;a href=&quot;https://p5js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;p5.js&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You 
      
    
    </summary>
    
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
      <category term="p5js" scheme="onlookerliu.github.io/tags/p5js/"/>
    
      <category term="perceptron" scheme="onlookerliu.github.io/tags/perceptron/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 025</title>
    <link href="onlookerliu.github.io/2018/04/06/LeetCode-Notes-025/"/>
    <id>onlookerliu.github.io/2018/04/06/LeetCode-Notes-025/</id>
    <published>2018-04-05T17:41:37.000Z</published>
    <updated>2018-04-18T14:06:43.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Find-All-Numbers-Disappeared-in-an-Array"><a href="#Find-All-Numbers-Disappeared-in-an-Array" class="headerlink" title="Find All Numbers Disappeared in an Array"></a>Find All Numbers Disappeared in an Array</h3><p>Given an array of integers where $1 ≤ a[i] ≤ n$ (n = size of array), some elements appear twice and others appear once.</p><p>Find all the elements of $[1, n]$ inclusive that do not appear in this array.</p><p>Could you do it without extra space and in $O(n)$ runtime? You may assume the returned list does not count as extra space.</p><a id="more"></a><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[5,6]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findDisappearedNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = nums.length;</span><br><span class="line">  <span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line"></span><br><span class="line">  nums.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    hash[item] = <span class="literal">true</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= len; i++)</span><br><span class="line">    !hash[i] &amp;&amp; (ans.push(i));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Find-Bottom-Left-Tree-Value"><a href="#Find-Bottom-Left-Tree-Value" class="headerlink" title="Find Bottom Left Tree Value"></a>Find Bottom Left Tree Value</h3><p>Given a binary tree, find the leftmost value in the last row of the tree.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line"></span><br><span class="line">    2</span><br><span class="line">   / \</span><br><span class="line">  1   3</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">1</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line"></span><br><span class="line">        1</span><br><span class="line">       / \</span><br><span class="line">      2   3</span><br><span class="line">     /   / \</span><br><span class="line">    4   5   6</span><br><span class="line">       /</span><br><span class="line">      7</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">7</span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong> You may assume the tree (i.e., the given root node) is not NULL.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findBottomLeftValue = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dfs = <span class="function">(<span class="params">node, step</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (res[step] === <span class="literal">undefined</span>)</span><br><span class="line">      res[step] = node.val;</span><br><span class="line"></span><br><span class="line">    node.left &amp;&amp; dfs(node.left, step + <span class="number">1</span>);</span><br><span class="line">    node.right &amp;&amp; dfs(node.right, step + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  dfs(root, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> res.pop();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Find-K-Pairs-with-Smallest-Sums"><a href="#Find-K-Pairs-with-Smallest-Sums" class="headerlink" title="Find K Pairs with Smallest Sums"></a>Find K Pairs with Smallest Sums</h3><p>You are given two integer arrays nums1 and nums2 sorted in ascending order and an integer k.</p><p>Define a pair (u,v) which consists of one element from the first array and one element from the second array.</p><p>Find the k pairs (u1,v1),(u2,v2) …(uk,vk) with the smallest sums.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Given nums1 = [1,7,11], nums2 = [2,4,6],  k = 3</span><br><span class="line"></span><br><span class="line">Return: [1,2],[1,4],[1,6]</span><br><span class="line"></span><br><span class="line">The first 3 pairs are returned from the sequence:</span><br><span class="line">[1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Given nums1 = [1,1,2], nums2 = [1,2,3],  k = 2</span><br><span class="line"></span><br><span class="line">Return: [1,1],[1,1]</span><br><span class="line"></span><br><span class="line">The first 2 pairs are returned from the sequence:</span><br><span class="line">[1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]</span><br></pre></td></tr></table></figure></p><p><strong>Example 3:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Given nums1 = [1,2], nums2 = [3],  k = 3 </span><br><span class="line"></span><br><span class="line">Return: [1,3],[2,3]</span><br><span class="line"></span><br><span class="line">All possible pairs are returned from the sequence:</span><br><span class="line">[1,3],[2,3]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums1</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums2</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> kSmallestPairs = <span class="function"><span class="keyword">function</span>(<span class="params">nums1, nums2, k</span>) </span>&#123;</span><br><span class="line">  k = <span class="built_in">Math</span>.min(nums1.length * nums2.length, k);</span><br><span class="line">  <span class="keyword">var</span> len = nums1.length;</span><br><span class="line">  <span class="keyword">var</span> a = [];</span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    a[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (k--) &#123;</span><br><span class="line">    <span class="keyword">var</span> minn = <span class="literal">Infinity</span>;</span><br><span class="line">    <span class="keyword">var</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (a[i] === nums2.length)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">var</span> sum = nums1[i] + nums2[a[i]];</span><br><span class="line">      <span class="keyword">if</span> (sum &lt; minn) &#123;</span><br><span class="line">        minn = sum;</span><br><span class="line">        index = i;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ans.push([nums1[index], nums2[a[index]]]);</span><br><span class="line">    a[index]++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Find-Largest-Value-in-Each-Tree-Row"><a href="#Find-Largest-Value-in-Each-Tree-Row" class="headerlink" title="Find Largest Value in Each Tree Row"></a>Find Largest Value in Each Tree Row</h3><p>You need to find the largest value in each row of a binary tree.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: </span><br><span class="line"></span><br><span class="line">          1</span><br><span class="line">         / \</span><br><span class="line">        3   2</span><br><span class="line">       / \   \  </span><br><span class="line">      5   3   9 </span><br><span class="line"></span><br><span class="line">Output: [1, 3, 9]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> largestValues = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> maxn = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> getMax = <span class="function">(<span class="params">a, b = -<span class="built_in">Number</span>.MAX_VALUE</span>) =&gt;</span> <span class="built_in">Math</span>.max(a, b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> dfs = <span class="function">(<span class="params">node, step</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) <span class="keyword">return</span>;</span><br><span class="line">    maxn[step] = getMax(node.val, maxn[step]);</span><br><span class="line">    dfs(node.left, step + <span class="number">1</span>);</span><br><span class="line">    dfs(node.right, step + <span class="number">1</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  dfs(root, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> maxn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Find-Median-from-Data-Stream"><a href="#Find-Median-from-Data-Stream" class="headerlink" title="Find Median from Data Stream"></a>Find Median from Data Stream</h3><p>Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.</p><p>Examples:<br><code>[2,3,4]</code> , the median is <code>3</code></p><p><code>[2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code></p><p>Design a data structure that supports the following two operations:</p><ul><li>void addNum(int num) - Add a integer number from the data stream to the data structure.</li><li>double findMedian() - Return the median of all elements so far.</li></ul><p>For example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addNum(1)</span><br><span class="line">addNum(2)</span><br><span class="line">findMedian() -&gt; 1.5</span><br><span class="line">addNum(3) </span><br><span class="line">findMedian() -&gt; 2</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">a, target</span>) </span>&#123;</span><br><span class="line">  target += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">    , end = a.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(start &lt;= end) &#123;</span><br><span class="line">    <span class="keyword">var</span> mid = ~~((start + end) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (a[mid] &gt;= target)</span><br><span class="line">      end = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      start = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> MedianFinder = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.num = [];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;integer&#125; word</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125;</span></span><br><span class="line"><span class="comment"> * Adds a num into the data structure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MedianFinder.prototype.addNum = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> index = binarySearch(<span class="keyword">this</span>.num, num);</span><br><span class="line">  <span class="keyword">this</span>.num.splice(index, <span class="number">0</span>, num);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @return &#123;double&#125;</span></span><br><span class="line"><span class="comment"> * Return median of current data stream</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MedianFinder.prototype.findMedian = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = <span class="keyword">this</span>.num.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (len &amp; <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.num[~~(len / <span class="number">2</span>)];</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> (<span class="keyword">this</span>.num[len / <span class="number">2</span>] + <span class="keyword">this</span>.num[len / <span class="number">2</span> - <span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MedianFinder object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var mf = new MedianFinder();</span></span><br><span class="line"><span class="comment"> * mf.addNum(1);</span></span><br><span class="line"><span class="comment"> * mf.findMedian();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Find-All-Numbers-Disappeared-in-an-Array&quot;&gt;&lt;a href=&quot;#Find-All-Numbers-Disappeared-in-an-Array&quot; class=&quot;headerlink&quot; title=&quot;Find All Numbers Disappeared in an Array&quot;&gt;&lt;/a&gt;Find All Numbers Disappeared in an Array&lt;/h3&gt;&lt;p&gt;Given an array of integers where $1 ≤ a[i] ≤ n$ (n = size of array), some elements appear twice and others appear once.&lt;/p&gt;
&lt;p&gt;Find all the elements of $[1, n]$ inclusive that do not appear in this array.&lt;/p&gt;
&lt;p&gt;Could you do it without extra space and in $O(n)$ runtime? You may assume the returned list does not count as extra space.&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-024</title>
    <link href="onlookerliu.github.io/2018/04/06/Project-Euler-024/"/>
    <id>onlookerliu.github.io/2018/04/06/Project-Euler-024/</id>
    <published>2018-04-05T16:29:08.000Z</published>
    <updated>2018-04-10T16:34:53.080Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:</p><p>$$012, 021, 102, 120, 201, 210$$</p><p>What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?</p><a id="more"></a><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2783915460</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> islice, permutations</span><br><span class="line">print(<span class="string">''</span>.join(next(islice(permutations(list(map(str, list(range(<span class="number">10</span>))))), <span class="number">999999</span>, <span class="keyword">None</span>))))</span><br></pre></td></tr></table></figure><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">puts (<span class="number">0</span>..<span class="number">9</span>).to_a.permutation(<span class="number">10</span>).to_a[<span class="number">999999</span>].join</span><br></pre></td></tr></table></figure><h4 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.List (<span class="title">sort</span>, <span class="title">permutations</span>)</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = putStrLn $ (sort $ permutations ['<span class="number">0</span>'..'<span class="number">9</span>']) !! <span class="number">999999</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">permutate</span>(<span class="params">n, array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> al = array.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> k, l</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; al - <span class="number">1</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[j] &lt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        k = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = k; j &lt; al; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[k] &lt; array[j]) &#123;</span><br><span class="line">        l = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> tmp = array[k]</span><br><span class="line">    array[k] = array[l]</span><br><span class="line">    array[l] = tmp</span><br><span class="line">    <span class="keyword">let</span> begin = k + <span class="number">1</span></span><br><span class="line">    <span class="keyword">let</span> end = al - <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (begin &lt; end) &#123;</span><br><span class="line">      tmp = array[begin]</span><br><span class="line">      array[begin] = array[end]</span><br><span class="line">      array[end] = tmp</span><br><span class="line">      begin += <span class="number">1</span></span><br><span class="line">      end -= <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(permutate(<span class="number">1000000</span>, [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]).join(<span class="string">""</span>))</span><br></pre></td></tr></table></figure><h4 id="Mathematica"><a href="#Mathematica" class="headerlink" title="Mathematica"></a>Mathematica</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * We generate all 10! permutations of the sequence (0,1,2,3,4,5,6,7,8,9)</span></span><br><span class="line"><span class="comment"> * into memory, and select the 1 000 000th element (1-based indexing).</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line"><span class="keyword">FromDigits</span>[<span class="keyword">Permutations</span>[<span class="keyword">Range</span>[<span class="number">0</span>, <span class="number">9</span>]][[<span class="number">1000000</span>]]]</span><br></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p024</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p024().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We initialize an array as the lowest permutation of the given digits, which is the sequence</span></span><br><span class="line"><span class="comment"> * (0,1,2,3,4,5,6,7,8,9). Then we call the next permutation algorithm on it 999 999 times</span></span><br><span class="line"><span class="comment"> * (because the index in the problem is 1-based), and stringify the resulting sequence.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * The next permutation algorithm is well-known and a bit long to explain.</span></span><br><span class="line"><span class="comment"> * See: https://www.nayuki.io/page/next-lexicographical-permutation-algorithm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// Initialize</span></span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)</span><br><span class="line">array[i] = i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Permute</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">999999</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!Library.nextPermutation(array))</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Format output</span></span><br><span class="line">String ans = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)</span><br><span class="line">ans += array[i];</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:&lt;/p&gt;
&lt;p&gt;$$012, 021, 102, 120, 201, 210$$&lt;/p&gt;
&lt;p&gt;What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?&lt;/p&gt;
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 024</title>
    <link href="onlookerliu.github.io/2018/04/05/LeetCode-Notes-024/"/>
    <id>onlookerliu.github.io/2018/04/05/LeetCode-Notes-024/</id>
    <published>2018-04-04T17:37:45.000Z</published>
    <updated>2018-04-18T14:05:22.953Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Excel-Sheet-Column-Number"><a href="#Excel-Sheet-Column-Number" class="headerlink" title="Excel Sheet Column Number"></a>Excel Sheet Column Number</h3><p>Related to question Excel <a href="https://leetcode.com/problems/excel-sheet-column-title/" target="_blank" rel="noopener">Sheet Column Title</a></p><p>Given a column title as appear in an Excel sheet, return its corresponding column number.</p><p>For example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; 1</span><br><span class="line">B -&gt; 2</span><br><span class="line">C -&gt; 3</span><br><span class="line">...</span><br><span class="line">Z -&gt; 26</span><br><span class="line">AA -&gt; 27</span><br><span class="line">AB -&gt; 28</span><br></pre></td></tr></table></figure></p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> titleToNumber = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = s.split(<span class="string">''</span>).reverse();</span><br><span class="line">  s = a.join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">var</span> ans = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre, item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pre + <span class="built_in">Math</span>.pow(<span class="number">26</span>, index) * (s.charCodeAt(index) - <span class="number">64</span>);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Excel-Sheet-Column-Title"><a href="#Excel-Sheet-Column-Title" class="headerlink" title="Excel Sheet Column Title"></a>Excel Sheet Column Title</h3><p>Given a positive integer, return its corresponding column title as appear in an Excel sheet.</p><p>For example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 -&gt; A</span><br><span class="line">2 -&gt; B</span><br><span class="line">3 -&gt; C</span><br><span class="line">...</span><br><span class="line">26 -&gt; Z</span><br><span class="line">27 -&gt; AA</span><br><span class="line">28 -&gt; AB</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> convertToTitle = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ans = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">26</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      ans += <span class="built_in">String</span>.fromCharCode(<span class="number">26</span> + <span class="number">64</span>);</span><br><span class="line">      n = (n / <span class="number">26</span>) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      ans += <span class="built_in">String</span>.fromCharCode(n % <span class="number">26</span> + <span class="number">64</span>);</span><br><span class="line">      n = ~~(n / <span class="number">26</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Factorial-Trailing-Zeroes"><a href="#Factorial-Trailing-Zeroes" class="headerlink" title="Factorial Trailing Zeroes"></a>Factorial Trailing Zeroes</h3><p>Given an integer n, return the number of trailing zeroes in n!.</p><p>Note: Your solution should be in logarithmic time complexity.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> trailingZeroes = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (n) &#123;</span><br><span class="line">  ans += ~~(n / <span class="number">5</span>);</span><br><span class="line">  n /= <span class="number">5</span>;</span><br><span class="line">  n = ~~n;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Find-All-Anagrams-in-a-String"><a href="#Find-All-Anagrams-in-a-String" class="headerlink" title="Find All Anagrams in a String"></a>Find All Anagrams in a String</h3><p>Given a string s and a non-empty string p, find all the start indices of p’s anagrams in s.</p><p>Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.</p><p>The order of output does not matter.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">s: &quot;cbaebabacd&quot; p: &quot;abc&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[0, 6]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The substring with start index = 0 is &quot;cba&quot;, which is an anagram of &quot;abc&quot;.</span><br><span class="line">The substring with start index = 6 is &quot;bac&quot;, which is an anagram of &quot;abc&quot;.</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">s: &quot;abab&quot; p: &quot;ab&quot;</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[0, 1, 2]</span><br><span class="line"></span><br><span class="line">Explanation:</span><br><span class="line">The substring with start index = 0 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.</span><br><span class="line">The substring with start index = 1 is &quot;ba&quot;, which is an anagram of &quot;ab&quot;.</span><br><span class="line">The substring with start index = 2 is &quot;ab&quot;, which is an anagram of &quot;ab&quot;.</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; p</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findAnagrams = <span class="function"><span class="keyword">function</span>(<span class="params">s, p</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = p.length;</span><br><span class="line">  <span class="keyword">let</span> hash = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> ans = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> ret = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = p.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = p.charCodeAt(i) - <span class="number">97</span>;</span><br><span class="line">    ans[index] = ~~ans[index] + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = s.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = s.charCodeAt(i) - <span class="number">97</span>;</span><br><span class="line">    hash[index] = ~~hash[index] + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &gt;= len) &#123; <span class="comment">// remove</span></span><br><span class="line">      <span class="keyword">let</span> index = s.charCodeAt(i - len) - <span class="number">97</span>;</span><br><span class="line">      hash[index] = ~~hash[index] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i + <span class="number">1</span> &gt;= len) &#123; <span class="comment">// can compare</span></span><br><span class="line">      help() &amp;&amp; ret.push(i - len + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">help</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (~~hash[i] !== ~~ans[i])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Find-All-Duplicates-in-an-Array"><a href="#Find-All-Duplicates-in-an-Array" class="headerlink" title="Find All Duplicates in an Array"></a>Find All Duplicates in an Array</h3><p>Given an array of integers, $1 ≤ a[i] ≤ n$ (n = size of array), some elements appear twice and others appear once.</p><p>Find all the elements that appear twice in this array.</p><p>Could you do it without extra space and in $O(n)$ runtime?</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[4,3,2,7,8,2,3,1]</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">[2,3]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findDuplicates = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = nums.length;</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = nums[i];</span><br><span class="line">    <span class="keyword">let</span> val = <span class="built_in">Math</span>.abs(item) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nums[val] &lt; <span class="number">0</span>)</span><br><span class="line">      ans.push(val + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      nums[val] *= <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Excel-Sheet-Column-Number&quot;&gt;&lt;a href=&quot;#Excel-Sheet-Column-Number&quot; class=&quot;headerlink&quot; title=&quot;Excel Sheet Column Number&quot;&gt;&lt;/a&gt;Excel Sheet Column Number&lt;/h3&gt;&lt;p&gt;Related to question Excel &lt;a href=&quot;https://leetcode.com/problems/excel-sheet-column-title/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sheet Column Title&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Given a column title as appear in an Excel sheet, return its corresponding column number.&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A -&amp;gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B -&amp;gt; 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;C -&amp;gt; 3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Z -&amp;gt; 26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AA -&amp;gt; 27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;AB -&amp;gt; 28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 023</title>
    <link href="onlookerliu.github.io/2018/04/04/LeetCode-Notes-023/"/>
    <id>onlookerliu.github.io/2018/04/04/LeetCode-Notes-023/</id>
    <published>2018-04-03T16:35:28.000Z</published>
    <updated>2018-04-18T14:05:32.414Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Diagonal-Traverse"><a href="#Diagonal-Traverse" class="headerlink" title="Diagonal Traverse"></a>Diagonal Traverse</h3><p>Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">[</span><br><span class="line"> [ 1, 2, 3 ],</span><br><span class="line"> [ 4, 5, 6 ],</span><br><span class="line"> [ 7, 8, 9 ]</span><br><span class="line">]</span><br><span class="line">Output:  [1,2,4,7,5,3,6,8,9]</span><br></pre></td></tr></table></figure></p><p>Explanation:</p><div align="center"><br><img src="https://leetcode.com/static/images/problemset/diagonal_traverse.png" width="200"><br></div><p><strong>Note:</strong></p><ol><li>The total number of elements of the given matrix will not exceed 10,000.</li></ol><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; matrix</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> findDiagonalOrder = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> M = matrix.length;</span><br><span class="line">  <span class="keyword">if</span> (!M) <span class="keyword">return</span> [];</span><br><span class="line">  <span class="keyword">let</span> N = matrix[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// first row</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">0</span></span><br><span class="line">      , y = i</span><br><span class="line">      , tmp = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      tmp.push(matrix[x][y]);</span><br><span class="line">      x++;</span><br><span class="line">      y--;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= M || y &lt; <span class="number">0</span> || y &gt;= N)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.push(tmp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// last column</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; M; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> x = i</span><br><span class="line">      , y = N - <span class="number">1</span></span><br><span class="line">      , tmp = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      tmp.push(matrix[x][y]);</span><br><span class="line">      x++;</span><br><span class="line">      y--;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (x &lt; <span class="number">0</span> || x &gt;= M || y &lt; <span class="number">0</span> || y &gt;= N)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    res.push(tmp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line">  res.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(index &amp; <span class="number">1</span>)) &#123;</span><br><span class="line">      ans.push(...item.reverse());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ans.push(...item);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Diameter-of-Binary-Tree"><a href="#Diameter-of-Binary-Tree" class="headerlink" title="Diameter of Binary Tree"></a>Diameter of Binary Tree</h3><p>Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.</p><p><strong>Example:</strong></p><p>Given a binary tree<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    1</span><br><span class="line">   / \</span><br><span class="line">  2   3</span><br><span class="line"> / \     </span><br><span class="line">4   5</span><br></pre></td></tr></table></figure></p><p>Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].</p><p><strong>Note:</strong> The length of path between two nodes is represented by the number of edges between them.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">diameterOfBinaryTree</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: int</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">getHeight</span><span class="params">(node, depth)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> node == <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                left = getHeight(node.left, depth) + <span class="number">1</span></span><br><span class="line">                right = getHeight(node.right, depth) + <span class="number">1</span></span><br><span class="line">                getHeight.ans = max(getHeight.ans, left + right)</span><br><span class="line">                <span class="keyword">return</span> max(left, right)</span><br><span class="line"></span><br><span class="line">        getHeight.ans = <span class="number">0</span></span><br><span class="line">        getHeight(root, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> getHeight.ans</span><br></pre></td></tr></table></figure><h3 id="Differrent-Ways-to-Add-Parentheses"><a href="#Differrent-Ways-to-Add-Parentheses" class="headerlink" title="Differrent Ways to Add Parentheses"></a>Differrent Ways to Add Parentheses</h3><p>Given a string of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. The valid operators are <code>+</code>, <code>-</code> and <code>*</code>.</p><p><strong>Example 1:</strong><br>Input: <code>&quot;2-1-1&quot;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">((2-1)-1) = 0</span><br><span class="line">(2-(1-1)) = 2</span><br></pre></td></tr></table></figure></p><p>Output: <code>[0, 2]</code></p><p><strong>Example 2:</strong><br>Input: <code>&quot;2*3-4*5&quot;</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(2*(3-(4*5))) = -34</span><br><span class="line">((2*3)-(4*5)) = -14</span><br><span class="line">((2*(3-4))*5) = -10</span><br><span class="line">(2*((3-4)*5)) = -10</span><br><span class="line">(((2*3)-4)*5) = 10</span><br></pre></td></tr></table></figure></p><p>Output: <code>[-34, -14, -10, -10, 10]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; input</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> diffWaysToCompute = <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 暴力递归求解</span></span><br><span class="line">  dfs([], [], <span class="number">0</span>, <span class="number">0</span>, input);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">numStack, symStack, num, index, input</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index === input.length) &#123;</span><br><span class="line">      numStack.push(num);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span> (symStack.length) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = numStack.pop();</span><br><span class="line">        <span class="keyword">var</span> a = numStack.pop();</span><br><span class="line">        <span class="keyword">var</span> sym = symStack.pop();</span><br><span class="line"></span><br><span class="line">        numStack.push(<span class="built_in">eval</span>(<span class="string">'('</span> + a + <span class="string">')'</span> + sym + <span class="string">'('</span> + b + <span class="string">')'</span> ));</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ans.push(numStack[<span class="number">0</span>]);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> item = input[index];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'-+*'</span>.indexOf(item) !== <span class="number">-1</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 不处理</span></span><br><span class="line">      <span class="keyword">var</span> _numStack = numStack.concat();</span><br><span class="line">      <span class="keyword">var</span> _symStack = symStack.concat();</span><br><span class="line">      _numStack.push(num);</span><br><span class="line">      _symStack.push(item);</span><br><span class="line">      dfs(_numStack, _symStack, <span class="number">0</span>, index + <span class="number">1</span>, input);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 处理</span></span><br><span class="line">      _numStack = numStack.concat();</span><br><span class="line">      _numStack.push(num);</span><br><span class="line">      _symStack = symStack.concat();</span><br><span class="line">      <span class="keyword">while</span> (_symStack.length) &#123;</span><br><span class="line">        <span class="keyword">var</span> b = _numStack.pop();</span><br><span class="line">        <span class="keyword">var</span> a = _numStack.pop();</span><br><span class="line">        <span class="keyword">var</span> sym = _symStack.pop();</span><br><span class="line"></span><br><span class="line">        _numStack.push(<span class="built_in">eval</span>(<span class="string">'('</span> + a + <span class="string">')'</span> + sym + <span class="string">'('</span> + b + <span class="string">')'</span> ));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> newNumStack = _numStack.concat();</span><br><span class="line">        <span class="keyword">var</span> newSymStack = _symStack.concat();</span><br><span class="line">        newSymStack.push(item);</span><br><span class="line">        dfs(newNumStack, newSymStack, <span class="number">0</span>, index + <span class="number">1</span>, input);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dfs(numStack.concat(), symStack.concat(), num * <span class="number">10</span> + +item, index + <span class="number">1</span>, input);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; input</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> diffWaysToCompute = <span class="function"><span class="keyword">function</span>(<span class="params">input</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// save the possible values from the string input</span></span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = input.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = input[i];</span><br><span class="line">    <span class="keyword">if</span> (~<span class="string">'+-*'</span>.indexOf(item)) &#123;</span><br><span class="line">      <span class="keyword">var</span> left = diffWaysToCompute(input.substring(<span class="number">0</span>, i));</span><br><span class="line">      <span class="keyword">var</span> right = diffWaysToCompute(input.substring(i + <span class="number">1</span>));</span><br><span class="line">      left.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">        right.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">          ans.push(<span class="built_in">eval</span>(<span class="string">'('</span> + a + <span class="string">')'</span> + item + <span class="string">'('</span> + b + <span class="string">')'</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  !ans.length &amp;&amp; ans.push(+input);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Divide-Two-Integers"><a href="#Divide-Two-Integers" class="headerlink" title="Divide Two Integers"></a>Divide Two Integers</h3><p>Divide two integers without using multiplication, division and mod operator.</p><p>If it is overflow, return MAX_INT.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; dividend</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; divisor</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> divide = <span class="function"><span class="keyword">function</span>(<span class="params">dividend, divisor</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> MAX_POSITIVE_INT = ~(<span class="number">1</span> &lt;&lt; <span class="number">31</span>);</span><br><span class="line">  <span class="keyword">var</span> MAX_NEGATIVE_INT = (<span class="number">1</span> &lt;&lt; <span class="number">31</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ans = <span class="built_in">Math</span>.floor(dividend / divisor);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ans &lt; MAX_NEGATIVE_INT)</span><br><span class="line">    ans = MAX_NEGATIVE_INT;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ans &gt; MAX_POSITIVE_INT)</span><br><span class="line">    ans = MAX_POSITIVE_INT;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Encode-and-Decode-TinyURL"><a href="#Encode-and-Decode-TinyURL" class="headerlink" title="Encode and Decode TinyURL"></a>Encode and Decode TinyURL</h3><p>TinyURL is a URL shortening service where you enter a URL such as <code>https://leetcode.com/problems/design-tinyurl</code> and it returns a short URL such as <code>http://tinyurl.com/4e9iAk</code>.</p><p>Design the <code>encode</code> and <code>decode</code> methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [p, index] = [<span class="keyword">new</span> <span class="built_in">Map</span>(), <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> base62 = <span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="string">'0123456789abcdefghigklmnopqrstuvwxyzABCDEFGHIGKLMNOPQRSTUVWXYZ'</span>;</span><br><span class="line">  <span class="keyword">let</span> len = str.length;</span><br><span class="line">  <span class="keyword">let</span> ret = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    ret += str[n % len];</span><br><span class="line">    n = ~~(n / len);</span><br><span class="line">  &#125; <span class="keyword">while</span> (n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ret;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Encodes a URL to a shortened URL.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; longUrl</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> encode = <span class="function"><span class="keyword">function</span>(<span class="params">longUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> shortUrl = base62(index++);</span><br><span class="line">  p.set(shortUrl, longUrl);</span><br><span class="line">  <span class="keyword">return</span> shortUrl;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Decodes a shortened URL to its original URL.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; shortUrl</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> decode = <span class="function"><span class="keyword">function</span>(<span class="params">shortUrl</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> p.get(shortUrl);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Diagonal-Traverse&quot;&gt;&lt;a href=&quot;#Diagonal-Traverse&quot; class=&quot;headerlink&quot; title=&quot;Diagonal Traverse&quot;&gt;&lt;/a&gt;Diagonal Traverse&lt;/h3&gt;&lt;p&gt;Given a matrix of M x N elements (M rows, N columns), return all elements of the matrix in diagonal order as shown in the below image.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Input:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [ 1, 2, 3 ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [ 4, 5, 6 ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; [ 7, 8, 9 ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Output:  [1,2,4,7,5,3,6,8,9]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Explanation:&lt;/p&gt;
&lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;https://leetcode.com/static/images/problemset/diagonal_traverse.png&quot; width=&quot;200&quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The total number of elements of the given matrix will not exceed 10,000.&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-023</title>
    <link href="onlookerliu.github.io/2018/04/03/Project-Euler-023/"/>
    <id>onlookerliu.github.io/2018/04/03/Project-Euler-023/</id>
    <published>2018-04-02T16:23:19.000Z</published>
    <updated>2018-04-11T01:32:12.945Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.</p><p>A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.</p><p>As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.</p><p>Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.</p><a id="more"></a><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4179871</span><br></pre></td></tr></table></figure><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">factorize</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">'fact() argument should be &gt;= 1'</span>)</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> []  <span class="comment"># special case</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="comment"># iterate over all even numbers first.</span></span><br><span class="line">    <span class="keyword">while</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        res.append(<span class="number">2</span>)</span><br><span class="line">        n //= <span class="number">2</span></span><br><span class="line">    <span class="comment"># try odd numbers up to sqrt(n)</span></span><br><span class="line">    limit = math.sqrt(n+<span class="number">1</span>)</span><br><span class="line">    i = <span class="number">3</span></span><br><span class="line">    <span class="keyword">while</span> i &lt;= limit:</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            res.append(i)</span><br><span class="line">            n //= i</span><br><span class="line">            limit = math.sqrt(n+i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            i += <span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> n != <span class="number">1</span>:</span><br><span class="line">        res.append(n)</span><br><span class="line">    factors = sorted(res)</span><br><span class="line">    histogram = defaultdict(int)</span><br><span class="line">    <span class="keyword">for</span> factor <span class="keyword">in</span> factors:</span><br><span class="line">        histogram[factor] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list(histogram.items())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">divisors</span><span class="params">(n)</span>:</span></span><br><span class="line">    factors = factorize(n)</span><br><span class="line">    nfactors = len(factors)</span><br><span class="line">    f = [<span class="number">0</span>] * nfactors</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> reduce(<span class="keyword">lambda</span> x, y: x*y, [factors[x][<span class="number">0</span>]**f[x] <span class="keyword">for</span> x <span class="keyword">in</span> range(nfactors)], <span class="number">1</span>)</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            f[i] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> f[i] &lt;= factors[i][<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            f[i] = <span class="number">0</span></span><br><span class="line">            i += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i &gt;= nfactors:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proper_divisors</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> list(divisors(n))[:<span class="number">-1</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify</span><span class="params">(n)</span>:</span></span><br><span class="line">    total = sum(proper_divisors(n))</span><br><span class="line">    <span class="keyword">if</span> total == n:</span><br><span class="line">        <span class="comment"># perfect</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">elif</span> total &gt; n:</span><br><span class="line">        <span class="comment"># abundant</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># deficient</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    abundant = set(number <span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">30000</span>) <span class="keyword">if</span> classify(number) == <span class="number">1</span>)</span><br><span class="line">    sums = sorted(set(sum(c) <span class="keyword">for</span> c <span class="keyword">in</span> combinations_with_replacement(abundant, <span class="number">2</span>)))</span><br><span class="line">    print((sum(number <span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">30000</span>) <span class="keyword">if</span> number <span class="keyword">not</span> <span class="keyword">in</span> sums)))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'mathn'</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span> </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">divisors</span></span></span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>] <span class="keyword">if</span> <span class="keyword">self</span> == <span class="number">1</span></span><br><span class="line">    primes, powers = <span class="keyword">self</span>.prime_division.transpose </span><br><span class="line">    exponents = powers.map&#123;<span class="params">|i|</span> (<span class="number">0</span>..i).to_a&#125; </span><br><span class="line">    divisors = exponents.shift.product(*exponents).map <span class="keyword">do</span> <span class="params">|powers|</span> </span><br><span class="line">      primes.zip(powers).map&#123;<span class="params">|prime, power|</span> prime ** power&#125;.inject(<span class="symbol">:*</span>) </span><br><span class="line">    <span class="keyword">end</span> </span><br><span class="line">    divisors.take divisors.length - <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">abundant?</span></span></span><br><span class="line">    <span class="keyword">self</span>.divisors.reduce(<span class="symbol">:+</span>) &gt; <span class="keyword">self</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">abundants = (<span class="number">1</span>..<span class="number">28213</span>).select &#123; <span class="params">|n|</span> n.abundant? &#125;</span><br><span class="line">i = <span class="number">0</span></span><br><span class="line">sums = []</span><br><span class="line">abundants.each <span class="keyword">do</span> <span class="params">|x|</span></span><br><span class="line">  abundants[i..abundants.length].each <span class="keyword">do</span> <span class="params">|y|</span></span><br><span class="line">    sum = x + y</span><br><span class="line">    sums &lt;&lt; sum <span class="keyword">unless</span> sum &gt; <span class="number">28213</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">sums.uniq!</span><br><span class="line">puts (<span class="number">1</span>..<span class="number">28213</span>).reject &#123; <span class="params">|n|</span> sums.<span class="keyword">include</span>? n &#125;.reduce(<span class="symbol">:+</span>)</span><br></pre></td></tr></table></figure><h4 id="Haskell"><a href="#Haskell" class="headerlink" title="Haskell"></a>Haskell</h4><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.List (<span class="title">sort</span>, <span class="title">group</span>, <span class="title">union</span>)</span><br><span class="line"><span class="keyword">import</span> Data.Array</span><br><span class="line"></span><br><span class="line"><span class="title">pairwise</span> :: (a -&gt; a -&gt; a) -&gt; [a] -&gt; [a]</span><br><span class="line"><span class="title">pairwise</span> f (xs:ys:t) = f xs ys : pairwise f t</span><br><span class="line"><span class="title">pairwise</span> _ t = t</span><br><span class="line"></span><br><span class="line"><span class="title">primes</span> :: [<span class="type">Int</span>]</span><br><span class="line"><span class="title">primes</span> = <span class="number">2</span> : _Y ((<span class="number">3</span> :) . gaps <span class="number">5</span> . _U . map (\p-&gt; [p*p, p*p+<span class="number">2</span>*p..]))</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">        _Y g = g (_Y g)                      <span class="comment">-- recursion, Y combinator</span></span><br><span class="line">        _U ((x:xs):t) = x : (union xs . _U . pairwise union) t   <span class="comment">-- ~= nub.sort.concat</span></span><br><span class="line">        gaps k s@(x:xs) </span><br><span class="line">            | k &lt; x     = k : gaps (k+<span class="number">2</span>) s    <span class="comment">-- ~= [k,k+2..]\\s, when</span></span><br><span class="line">            | otherwise =     gaps (k+<span class="number">2</span>) xs   <span class="comment">--  k &lt;= head s &amp;&amp; null(s\\[k,k+2..])</span></span><br><span class="line"></span><br><span class="line"><span class="title">factorize</span> :: <span class="type">Int</span> -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">factorize</span> n = primeFactors n primes <span class="keyword">where</span></span><br><span class="line">    primeFactors <span class="number">1</span> _ = []</span><br><span class="line">    primeFactors _ [] = []</span><br><span class="line">    primeFactors m (p:ps) | m &lt; p * p = [m]</span><br><span class="line">                          | r == <span class="number">0</span> = p : primeFactors q (p:ps)</span><br><span class="line">                          | otherwise = primeFactors m ps</span><br><span class="line">                          <span class="keyword">where</span> (q, r) = quotRem m p</span><br><span class="line"></span><br><span class="line"><span class="title">primePowers</span> :: <span class="type">Int</span> -&gt; [(<span class="type">Int</span>, <span class="type">Int</span>)]</span><br><span class="line"><span class="title">primePowers</span> n = [(head x, length x) | x &lt;- group $ factorize n]</span><br><span class="line"></span><br><span class="line"><span class="title">divisors</span> :: <span class="type">Int</span> -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">divisors</span> n = filter (&lt;n) $ map product $ sequence</span><br><span class="line">    [take (k+<span class="number">1</span>) $ iterate (p*) <span class="number">1</span> | (p, k) &lt;- primePowers n]</span><br><span class="line"></span><br><span class="line"><span class="title">upperBound</span> :: <span class="type">Int</span></span><br><span class="line"><span class="title">upperBound</span> = <span class="number">20161</span></span><br><span class="line"></span><br><span class="line"><span class="title">abundant</span> :: <span class="type">Int</span> -&gt; <span class="type">Bool</span></span><br><span class="line"><span class="title">abundant</span> n = (sum . divisors) n &gt; n</span><br><span class="line"></span><br><span class="line"><span class="title">abundantsArray</span> :: <span class="type">Array</span> <span class="type">Int</span> <span class="type">Bool</span></span><br><span class="line"><span class="title">abundantsArray</span> = listArray (<span class="number">1</span>, upperBound) $ map abundant [<span class="number">1.</span>.upperBound]</span><br><span class="line"></span><br><span class="line"><span class="title">abundants</span> :: [<span class="type">Int</span>]</span><br><span class="line"><span class="title">abundants</span> = filter (abundantsArray !) [<span class="number">1.</span>.upperBound]</span><br><span class="line"></span><br><span class="line"><span class="title">remainders</span> :: <span class="type">Int</span> -&gt; [<span class="type">Int</span>]</span><br><span class="line"><span class="title">remainders</span> x = map (x-) $ takeWhile (&lt;= x `quot` <span class="number">2</span>) abundants</span><br><span class="line"></span><br><span class="line"><span class="title">sums</span> :: [<span class="type">Int</span>]</span><br><span class="line"><span class="title">sums</span> = filter (any (abundantsArray !) . remainders) [<span class="number">1.</span>.upperBound]</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ sum [<span class="number">1.</span>.upperBound] - sum sums</span><br></pre></td></tr></table></figure><h4 id="Clojure"><a href="#Clojure" class="headerlink" title="Clojure"></a>Clojure</h4><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> divisors [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">filter</span></span> #(<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">rem</span></span> n %) <span class="number">0</span>) (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> n)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> perfect? [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">reduce</span></span> + (<span class="name">divisors</span> n)) n))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> abundant? [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">&gt;</span></span> (<span class="name"><span class="builtin-name">reduce</span></span> + (<span class="name">divisors</span> n)) n))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> deficient? [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">&lt;</span></span> (<span class="name"><span class="builtin-name">reduce</span></span> + (<span class="name">divisors</span> n)) n))</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">filter</span></span> abundant? (<span class="name"><span class="builtin-name">range</span></span> <span class="number">15000</span>)))</span><br></pre></td></tr></table></figure><h4 id="Mathematica"><a href="#Mathematica" class="headerlink" title="Mathematica"></a>Mathematica</h4><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lim = <span class="number">28123</span>;</span><br><span class="line"></span><br><span class="line">isAbundant = <span class="keyword">Table</span>[<span class="keyword">DivisorSigma</span>[<span class="number">1</span>, n] - n &gt; n, &#123;n, lim&#125;];</span><br><span class="line">abundants = <span class="keyword">Pick</span>[<span class="keyword">Range</span>[lim], isAbundant];</span><br><span class="line">NotSumOfTwoAbundantsQ[n_] := <span class="keyword">Block</span>[&#123;i&#125;,</span><br><span class="line">  <span class="keyword">For</span>[i = <span class="number">1</span>, i &lt; <span class="keyword">Length</span>[abundants] &amp;&amp; abundants[[i]] &lt; n, i++,</span><br><span class="line">    <span class="keyword">If</span>[isAbundant[[n - abundants[[i]]]],</span><br><span class="line">      <span class="keyword">Return</span>[<span class="keyword">False</span>]]];</span><br><span class="line">  <span class="keyword">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Total</span>[<span class="keyword">Select</span>[<span class="keyword">Range</span>[lim], NotSumOfTwoAbundantsQ]]</span><br></pre></td></tr></table></figure><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p023</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p023().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LIMIT = <span class="number">28123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span>[] isAbundant = <span class="keyword">new</span> <span class="keyword">boolean</span>[LIMIT + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// Compute look-up table</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; isAbundant.length; i++)</span><br><span class="line">isAbundant[i] = isAbundant(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= LIMIT; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isSumOf2Abundants(i))</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSumOf2Abundants</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (isAbundant[i] &amp;&amp; isAbundant[n - i])</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isAbundant</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n &lt; <span class="number">1</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">1</span>;  <span class="comment">// Sum of factors less than n</span></span><br><span class="line"><span class="keyword">int</span> end = Library.sqrt(n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= end; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (n % i == <span class="number">0</span>)</span><br><span class="line">sum += i + n / i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (end * end == n)</span><br><span class="line">sum -= end;</span><br><span class="line"><span class="keyword">return</span> sum &gt; n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.&lt;/p&gt;
&lt;p&gt;A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.&lt;/p&gt;
&lt;p&gt;As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.&lt;/p&gt;
&lt;p&gt;Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.&lt;/p&gt;
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 022</title>
    <link href="onlookerliu.github.io/2018/04/02/LeetCode-Notes-022/"/>
    <id>onlookerliu.github.io/2018/04/02/LeetCode-Notes-022/</id>
    <published>2018-04-01T16:54:04.000Z</published>
    <updated>2018-04-18T14:17:57.174Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Decode-String"><a href="#Decode-String" class="headerlink" title="Decode String"></a>Decode String</h3><p>Given an encoded string, return it’s decoded string.</p><p>The encoding rule is: <code>k[encoded_string]</code>, where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p><p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p><p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like <code>3a</code> or <code>2[4]</code>.</p><a id="more"></a><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;3[a]2[bc]&quot;, return &quot;aaabcbc&quot;.</span><br><span class="line">s = &quot;3[a2[c]]&quot;, return &quot;accaccacc&quot;.</span><br><span class="line">s = &quot;2[abc]3[cd]ef&quot;, return &quot;abcabccdcdcdef&quot;.</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> decodeString = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> nums = []; <span class="comment">// 保存数字</span></span><br><span class="line">  <span class="keyword">let</span> ss   = []; <span class="comment">// 保存需要 repeat 的字符串</span></span><br><span class="line">  <span class="keyword">let</span> str  = <span class="string">''</span>; <span class="comment">// 当前字符串</span></span><br><span class="line">  <span class="keyword">let</span> ans  = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = s.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = s[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/[0-9]/</span>.test(item)) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === <span class="number">0</span> || <span class="regexp">/[0-9]/</span>.test(s[i - <span class="number">1</span>])) &#123;</span><br><span class="line">        str += item;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// s =&gt; 2[2[b]]</span></span><br><span class="line">        <span class="keyword">if</span> (str || s[i - <span class="number">1</span>] === <span class="string">'['</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (nums.length)</span><br><span class="line">            ss.push(str);</span><br><span class="line">          <span class="keyword">else</span></span><br><span class="line">            ans += str;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        str = item;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item === <span class="string">'['</span>) &#123;</span><br><span class="line">      nums.push(+str);</span><br><span class="line">      str = <span class="string">''</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item === <span class="string">']'</span>) &#123;</span><br><span class="line">      str &amp;&amp; ss.push(str);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> count = nums.pop();</span><br><span class="line">      <span class="keyword">let</span> a     = ss.pop();</span><br><span class="line">      <span class="keyword">let</span> tmp   = a.repeat(count);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (ss.length) &#123;  <span class="comment">// 当前有 ss[] 栈</span></span><br><span class="line">        <span class="keyword">let</span> last = ss.pop();</span><br><span class="line">        ss.push(last + tmp);</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">        ans += tmp;</span><br><span class="line"></span><br><span class="line">      str = <span class="string">''</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      str += item;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans + str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Decode-Ways"><a href="#Decode-Ways" class="headerlink" title="Decode Ways"></a>Decode Ways</h3><p>A message containing letters from <code>A-Z</code> is being encoded to numbers using the following mapping:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&apos;A&apos; -&gt; 1</span><br><span class="line">&apos;B&apos; -&gt; 2</span><br><span class="line">...</span><br><span class="line">&apos;Z&apos; -&gt; 26</span><br></pre></td></tr></table></figure><p>Given an encoded message containing digits, determine the total number of ways to decode it.</p><p>For example,<br>Given encoded message <code>&quot;12&quot;</code>, it could be decoded as <code>&quot;AB&quot;</code> (1 2) or <code>&quot;L&quot;</code> (12).</p><p>The number of ways decoding <code>&quot;12&quot;</code> is 2.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; s</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> numDecodings = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!s.length) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (s[<span class="number">0</span>] === <span class="string">'0'</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = s.length</span><br><span class="line">    , dp = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    dp[i] = [];</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">      dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">      dp[i][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      dp[i][<span class="number">0</span>] = dp[i - <span class="number">1</span>][<span class="number">1</span>],</span><br><span class="line">      dp[i][<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (s[i] !== <span class="string">'0'</span>)</span><br><span class="line">        dp[i][<span class="number">1</span>] += dp[i - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (s[i - <span class="number">1</span>] !== <span class="string">'0'</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> num = <span class="built_in">Number</span>(s[i - <span class="number">1</span>] + s[i]);</span><br><span class="line">        <span class="keyword">if</span> (num &gt;= <span class="number">1</span> &amp;&amp; num &lt;= <span class="number">26</span>)</span><br><span class="line">          dp[i][<span class="number">1</span>] += dp[i - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dp[len - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Delete-Node-in-a-Linked-List"><a href="#Delete-Node-in-a-Linked-List" class="headerlink" title="Delete Node in a Linked List"></a>Delete Node in a Linked List</h3><p>Write a function to delete a node (except the tail) in a singly linked list, given only access to that node.</p><p>Supposed the linked list is <code>1 -&gt; 2 -&gt; 3 -&gt; 4</code> and you are given the third node with value <code>3</code>, the linked list should become <code>1 -&gt; 2 -&gt; 4</code> after calling your function.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; node</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125; Do not return anything, modify node in-place instead.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> deleteNode = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  node.val = node.next.val;</span><br><span class="line">  <span class="keyword">var</span> tmp = node.next;</span><br><span class="line">  node.next = node.next.next;</span><br><span class="line">  tmp = <span class="literal">null</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Detect-Capital"><a href="#Detect-Capital" class="headerlink" title="Detect Capital"></a>Detect Capital</h3><p>Given a word, you need to judge whether the usage of capitals in it is right or not.</p><p>We define the usage of capitals in a word to be right when one of the following cases holds:</p><ol><li>All letters in this word are capitals, like “USA”.</li><li>All letters in this word are not capitals, like “leetcode”.</li><li>Only the first letter in this word is capital if it has more than one letter, like “Google”.</li></ol><p>Otherwise, we define that this word doesn’t use capitals in a right way.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;USA&quot;</span><br><span class="line">Output: True</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;FlaG&quot;</span><br><span class="line">Output: False</span><br></pre></td></tr></table></figure></p><p>Note: The input will be a non-empty word consisting of uppercase and lowercase latin letters.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; word</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> detectCapitalUse = <span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="regexp">/^([a-z]+|[A-Z]+|[A-Z]&#123;1&#125;[a-z]+)$/</span>;</span><br><span class="line">  <span class="keyword">return</span> p.test(word);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Decode-String&quot;&gt;&lt;a href=&quot;#Decode-String&quot; class=&quot;headerlink&quot; title=&quot;Decode String&quot;&gt;&lt;/a&gt;Decode String&lt;/h3&gt;&lt;p&gt;Given an encoded string, return it’s decoded string.&lt;/p&gt;
&lt;p&gt;The encoding rule is: &lt;code&gt;k[encoded_string]&lt;/code&gt;, where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.&lt;/p&gt;
&lt;p&gt;You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.&lt;/p&gt;
&lt;p&gt;Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like &lt;code&gt;3a&lt;/code&gt; or &lt;code&gt;2[4]&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
