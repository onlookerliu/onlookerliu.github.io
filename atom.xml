<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code@浮生记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="onlookerliu.github.io/"/>
  <updated>2018-04-01T16:15:35.037Z</updated>
  <id>onlookerliu.github.io/</id>
  
  <author>
    <name>Monad Kai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Project-Euler-020</title>
    <link href="onlookerliu.github.io/2018/03/29/Project-Euler-020/"/>
    <id>onlookerliu.github.io/2018/03/29/Project-Euler-020/</id>
    <published>2018-03-29T11:19:17.000Z</published>
    <updated>2018-04-01T16:15:35.037Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><br>$n!$ means $n \times (n - 1) \times … \times 3 \times 2 \times 1$.<br><br>Find the sum of the digits in the number $100!$.<br></p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">648</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># We do a straightforward computation thanks to Python's built-in arbitrary precision integer type.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compute</span><span class="params">()</span>:</span></span><br><span class="line">n = math.factorial(<span class="number">100</span>)</span><br><span class="line">ans = sum(int(c) <span class="keyword">for</span> c <span class="keyword">in</span> str(n))</span><br><span class="line"><span class="keyword">return</span> str(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">print(compute())</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">puts <span class="number">100</span>.downto(<span class="number">1</span>).inject(<span class="symbol">:*</span>).to_s.each_char.inject(<span class="number">0</span>) &#123;<span class="params">|s,v|</span>s+v.to_i&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sumDigits</span> ::  <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">sumDigits</span> n = sumDigits' n <span class="number">0</span></span><br><span class="line">    <span class="keyword">where</span> sumDigits' <span class="number">0</span> acc = acc</span><br><span class="line">          sumDigits' n acc = sumDigits' (div n <span class="number">10</span>) (acc + (mod n <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="title">factorial</span> ::  <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">factorial</span> n = foldr (*) <span class="number">1</span> [<span class="number">1.</span>.n]</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = print $ sumDigits $ factorial <span class="number">100</span></span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">reduce</span></span> + (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name"><span class="builtin-name">-</span></span> (<span class="name"><span class="builtin-name">int</span></span> %) <span class="number">48</span>) (<span class="name"><span class="builtin-name">str</span></span> (<span class="name"><span class="builtin-name">reduce</span></span> * (<span class="name"><span class="builtin-name">range</span></span> BigInteger/ONE <span class="number">100</span>))))))</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p020</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p020().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We do a straightforward product with help from Java's BigInteger type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String temp = Library.factorial(<span class="number">100</span>).toString();</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length(); i++)</span><br><span class="line">sum += temp.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * We do a straightforward computation thanks to Mathematica's built-in arbitrary precision integer type.</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line"><span class="keyword">Total</span>[<span class="keyword">IntegerDigits</span>[<span class="number">100</span>!]]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;&lt;br&gt;$n!$ means $n \times (n - 1) \times … \times 3
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 020</title>
    <link href="onlookerliu.github.io/2018/03/25/LeetCode-Notes-020/"/>
    <id>onlookerliu.github.io/2018/03/25/LeetCode-Notes-020/</id>
    <published>2018-03-24T16:45:22.000Z</published>
    <updated>2018-04-01T17:03:21.438Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Count-of-Range-Sum"><a href="#Count-of-Range-Sum" class="headerlink" title="Count of Range Sum"></a>Count of Range Sum</h3><p>Given an integer array <code>nums</code>, return the number of range sums that lie in <code>[lower, upper]</code> inclusive.<br>Range sum <code>S(i, j)</code> is defined as the sum of the elements in <code>nums</code> between indices <code>i</code> and <code>j</code> (<code>i</code> ≤ <code>j</code>), inclusive.</p><p><strong>Note:</strong><br>A naive algorithm of $O(n^2)$ is trivial. You MUST do better than that.</p><p><strong>Example:</strong><br>Given <code>nums = [-2, 5, -1]</code>, <code>lower = -2</code>, <code>upper = 2</code>,</p><p>Return <code>3</code>.<br>The three ranges are : <code>[0, 0], [2, 2], [0, 2]</code> and their respective sums are: <code>-2, -1, 2</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> wlower, wupper;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  ans += getAns(left, right);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> tmp = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>])</span><br><span class="line">      tmp.push(left.shift());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      tmp.push(right.shift());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> tmp.concat(left, right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a.length === <span class="number">1</span>) </span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> mid = ~~(a.length / <span class="number">2</span>)</span><br><span class="line">    , left = a.slice(<span class="number">0</span>, mid)</span><br><span class="line">    , right = a.slice(mid);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; lower</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; upper</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countRangeSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, lower, upper</span>) </span>&#123;</span><br><span class="line">  wlower = lower;</span><br><span class="line">  wupper = upper;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line">  arr.push(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  nums.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> last = arr[arr.length - <span class="number">1</span>];</span><br><span class="line">    arr.push(last + item);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  mergeSort(arr);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 b[j] - a[i] 值在 [wlower, wupper] 范围内组数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAns</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> lena = a.length; </span><br><span class="line">  <span class="keyword">var</span> lenb = b.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> end = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lenb; i++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// to get start</span></span><br><span class="line">    <span class="keyword">while</span> (b[i] - a[start] &gt;= wlower) &#123;</span><br><span class="line">      start++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// to get end</span></span><br><span class="line">    <span class="keyword">while</span> (b[i] - a[end] &gt; wupper) &#123;</span><br><span class="line">      end++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sum += start - end;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Count-of-Smaller-Numbers-After-Self"><a href="#Count-of-Smaller-Numbers-After-Self" class="headerlink" title="Count of Smaller Numbers After Self"></a>Count of Smaller Numbers After Self</h3><p>You are given an integer array nums and you have to return a new counts array. The counts array has the property where <code>counts[i]</code> is the number of smaller elements to the right of <code>nums[i]</code>.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Given nums = [5, 2, 6, 1]</span><br><span class="line"></span><br><span class="line">To the right of 5 there are 2 smaller elements (2 and 1).</span><br><span class="line">To the right of 2 there is only 1 smaller element (1).</span><br><span class="line">To the right of 6 there is 1 smaller element (1).</span><br><span class="line">To the right of 1 there is 0 smaller element.</span><br></pre></td></tr></table></figure></p><p>Return the array <code>[2, 1, 1, 0]</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countSmaller = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// binary search</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bSearch</span>(<span class="params">target, a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">      , end = a.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(start &lt;= end) &#123;</span><br><span class="line">      <span class="keyword">var</span> mid = ~~((start + end) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (a[mid] &gt;= target)</span><br><span class="line">        end = mid - <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (a[mid] &lt; target)</span><br><span class="line">        start = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> tmp = []  <span class="comment">// store </span></span><br><span class="line">    , ans = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = nums.length; i--; ) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = nums[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> index = bSearch(item, tmp);</span><br><span class="line"></span><br><span class="line">    ans.unshift(index);</span><br><span class="line">    tmp.splice(index, <span class="number">0</span>, item);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countSmaller = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> arr = []</span><br><span class="line">    , len = nums.length;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// array to object</span></span><br><span class="line">  <span class="comment">// 增加 index 属性，以便离散化</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = &#123;&#125;;</span><br><span class="line">    tmp.index = i;</span><br><span class="line">    tmp.value = nums[i];</span><br><span class="line">    arr.push(tmp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.value - b.value;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 离散化</span></span><br><span class="line">  <span class="keyword">var</span> maxn = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!i) &#123;</span><br><span class="line">      arr[i].nValue = maxn;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      arr[i].nValue = arr[i].value === arr[i - <span class="number">1</span>].value ? maxn : ++maxn;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.index - b.index;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 逆序树状数组</span></span><br><span class="line">  <span class="keyword">var</span> ans = []</span><br><span class="line">    , sum = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= maxn; i++)</span><br><span class="line">    sum[i] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">lowbit</span>(<span class="params">x</span>) </span>&#123; <span class="keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params">index, val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt;= maxn; i += lowbit(i))</span><br><span class="line">      sum[i] += val;</span><br><span class="line">  &#125; </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getSum</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i; i -= lowbit(i))</span><br><span class="line">      ans += sum[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">var</span> nValue = arr[i].nValue;</span><br><span class="line">    ans.unshift(getSum(nValue - <span class="number">1</span>));</span><br><span class="line">    update(nValue, <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Count-Primes"><a href="#Count-Primes" class="headerlink" title="Count Primes"></a>Count Primes</h3><p>Count the number of prime numbers less than a non-negative number, $n$.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countPrimes = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// if modified to 'var hash = []'</span></span><br><span class="line">  <span class="comment">// it will be Memory Limit Exceeded</span></span><br><span class="line">  <span class="comment">// I don't know why</span></span><br><span class="line">  <span class="comment">// I think both are the same</span></span><br><span class="line">  <span class="keyword">var</span> hash = <span class="keyword">new</span> <span class="built_in">Array</span>(n)</span><br><span class="line">    , a = <span class="built_in">Math</span>.sqrt(n);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= a; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!hash[i])</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i * i; j &lt; n; j += i)</span><br><span class="line">        hash[j] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; n; i++)</span><br><span class="line">    <span class="keyword">if</span> (!hash[i])</span><br><span class="line">      ans ++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Count-of-Range-Sum&quot;&gt;&lt;a href=&quot;#Count-of-Range-Sum&quot; class=&quot;headerlink&quot; title=&quot;Count of Range Sum&quot;&gt;&lt;/a&gt;Count of Range Sum&lt;/h3&gt;&lt;p&gt;Given 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 019</title>
    <link href="onlookerliu.github.io/2018/03/24/LeetCode-Notes-019/"/>
    <id>onlookerliu.github.io/2018/03/24/LeetCode-Notes-019/</id>
    <published>2018-03-23T16:35:32.000Z</published>
    <updated>2018-04-01T16:43:54.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Count-And-Say"><a href="#Count-And-Say" class="headerlink" title="Count And Say"></a>Count And Say</h3><p>The count-and-say sequence is the sequence of integers with the first five terms as following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.     1</span><br><span class="line">2.     11</span><br><span class="line">3.     21</span><br><span class="line">4.     1211</span><br><span class="line">5.     111221</span><br></pre></td></tr></table></figure><p><code>1</code> is read off as <code>&quot;one 1&quot;</code> or <code>11</code>.<br><code>11</code> is read off as <code>&quot;two 1s&quot;</code> or <code>21</code>.<br><code>21</code> is read off as <code>&quot;one 2</code>, then <code>one 1&quot;</code> or <code>1211</code>.</p><p>Given an integer $n$, generate the $n^th$ term of the count-and-say sequence.</p><p>Note: Each term of the sequence of integers will be represented as a string.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 1</span><br><span class="line">Output: &quot;1&quot;</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: &quot;1211&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// hash answer</span></span><br><span class="line"><span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line">hash[<span class="number">1</span>] = <span class="string">'1'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countAndSay = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hashPos;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = n; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hash[i]) hashPos = i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> str = hash[hashPos];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = hashPos + <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> _str = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>, len = str.length; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (target === <span class="string">''</span>) </span><br><span class="line">        target = str[j], num = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (str[j] === target)</span><br><span class="line">        num++;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        _str += num + target;</span><br><span class="line">        target = str[j];</span><br><span class="line">        num = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (num)</span><br><span class="line">      _str += num + target;</span><br><span class="line">    str = _str;</span><br><span class="line"></span><br><span class="line">    hash[i] = str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Count-Complete-Tree-Nodes"><a href="#Count-Complete-Tree-Nodes" class="headerlink" title="Count Complete Tree Nodes"></a>Count Complete Tree Nodes</h3><p>Given a complete binary tree, count the number of nodes.</p><p>In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between $1$ and $2^h$ nodes inclusive at the last level h.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countNodes = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> depth = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// find the depth of the tree</span></span><br><span class="line">  <span class="keyword">var</span> node = root;</span><br><span class="line">  <span class="keyword">while</span> (node) &#123;</span><br><span class="line">    depth++;</span><br><span class="line">    node = node.left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> minn = <span class="number">1</span> &lt;&lt; (depth - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">var</span> maxn = (<span class="number">1</span> &lt;&lt; depth) - <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> start = minn;</span><br><span class="line">  <span class="keyword">var</span> end = maxn;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// binary search</span></span><br><span class="line">  <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">    <span class="keyword">var</span> mid = (start + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (isExisting(mid, minn, maxn, root))</span><br><span class="line">      start = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      end = mid - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> end;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isExisting</span>(<span class="params">num, left, right, node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left === right)</span><br><span class="line">      <span class="keyword">return</span> !!node;</span><br><span class="line">    <span class="keyword">var</span> tmp = (left + right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (num &lt;= tmp)</span><br><span class="line">      <span class="keyword">return</span> isExisting(num, left, tmp, node.left);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="keyword">return</span> isExisting(num, tmp + <span class="number">1</span>, right, node.right);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countNodes = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> l = findDepth(root.left)</span><br><span class="line">    , r = findDepth(root.right);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (l === r)</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; l) + countNodes(root.right);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; r) + countNodes(root.left);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">findDepth</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node ? <span class="number">1</span> + findDepth(node.left) : <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countNodes = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (root) &#123;</span><br><span class="line">    <span class="keyword">var</span> l = findDepth(root.left)</span><br><span class="line">      , r = findDepth(root.right);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (l === r) &#123;</span><br><span class="line">      ans += (<span class="number">1</span> &lt;&lt; l);</span><br><span class="line">      root = root.right;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      ans += (<span class="number">1</span> &lt;&lt; r);</span><br><span class="line">      root = root.left;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">findDepth</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (node) &#123;</span><br><span class="line">      num++;</span><br><span class="line">      node = node.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Count-Numbers-With-Unique-Digits"><a href="#Count-Numbers-With-Unique-Digits" class="headerlink" title="Count Numbers With Unique Digits"></a>Count Numbers With Unique Digits</h3><p>Given a non-negative integer n, count all numbers with unique digits, x, where 0 ≤ x &lt; 10n.</p><p><strong>Example:</strong><br>Given n = 2, return 91. (The answer should be the total numbers in the range of 0 ≤ x &lt; 100, excluding <code>[11,22,33,44,55,66,77,88,99]</code>)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countNumbersWithUniqueDigits = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!n)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ans = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">1</span>)</span><br><span class="line">      ans += <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (i &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">      ans += A(<span class="number">10</span>, i);</span><br><span class="line">      ans -= A(<span class="number">9</span>, i - <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ans = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = a; i &gt;= a - b + <span class="number">1</span>; i--)</span><br><span class="line">    ans *= i;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Count-And-Say&quot;&gt;&lt;a href=&quot;#Count-And-Say&quot; class=&quot;headerlink&quot; title=&quot;Count And Say&quot;&gt;&lt;/a&gt;Count And Say&lt;/h3&gt;&lt;p&gt;The count-and-say sequence
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 018</title>
    <link href="onlookerliu.github.io/2018/03/23/LeetCode-Notes-018/"/>
    <id>onlookerliu.github.io/2018/03/23/LeetCode-Notes-018/</id>
    <published>2018-03-22T16:28:13.000Z</published>
    <updated>2018-04-01T16:33:17.074Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="Convert Sorted Array to Binary Search Tree"></a>Convert Sorted Array to Binary Search Tree</h3><p>Given an array where elements are sorted in ascending order, convert it to a height balanced BST.</p><p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Given the sorted array: [-10,-3,0,5,9],</span><br><span class="line"></span><br><span class="line">One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     / \</span><br><span class="line">   -3   9</span><br><span class="line">   /   /</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortedArrayToBST = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dfs(<span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mid = (start + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">    node.left = dfs(start, mid - <span class="number">1</span>);</span><br><span class="line">    node.right = dfs(mid + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Convert-Sorted-List-to-Binary-Search-Tree"><a href="#Convert-Sorted-List-to-Binary-Search-Tree" class="headerlink" title="Convert Sorted List to Binary Search Tree"></a>Convert Sorted List to Binary Search Tree</h3><p>Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.</p><p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Given the sorted linked list: [-10,-3,0,5,9],</span><br><span class="line"></span><br><span class="line">One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:</span><br><span class="line"></span><br><span class="line">      0</span><br><span class="line">     / \</span><br><span class="line">   -3   9</span><br><span class="line">   /   /</span><br><span class="line"> -10  5</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortedArrayToBST = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dfs(<span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">start, end</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt; end)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mid = (start + end) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">    node.left = dfs(start, mid - <span class="number">1</span>);</span><br><span class="line">    node.right = dfs(mid + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.next = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;ListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> sortedListToBST = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line">  <span class="keyword">while</span> (head) &#123;</span><br><span class="line">    ans.push(head.val);</span><br><span class="line">    head = head.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sortedArrayToBST(ans);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Copy-List-with-Random-Pointer"><a href="#Copy-List-with-Random-Pointer" class="headerlink" title="Copy List with Random Pointer"></a>Copy List with Random Pointer</h3><p>A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.</p><p>Return a deep copy of the list.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list with a random pointer.</span></span><br><span class="line"><span class="comment"> * function RandomListNode(label) &#123;</span></span><br><span class="line"><span class="comment"> *     this.label = label;</span></span><br><span class="line"><span class="comment"> *     this.next = this.random = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;RandomListNode&#125; head</span></span><br><span class="line"><span class="comment"> * @return &#123;RandomListNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> copyRandomList = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!head)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> hash = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  <span class="keyword">let</span> node = head;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (node) &#123;</span><br><span class="line">    hash.set(node, newArr.length);</span><br><span class="line">    newArr.push(<span class="keyword">new</span> RandomListNode(node.label));</span><br><span class="line">    node = node.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  node = head;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = newArr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i !== len - <span class="number">1</span>)</span><br><span class="line">      newArr[i].next = newArr[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> random = node.random;</span><br><span class="line">    <span class="keyword">let</span> index = hash.get(random);</span><br><span class="line">    <span class="keyword">if</span> (index !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      newArr[i].random = newArr[index];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    node = node.next;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newArr[<span class="number">0</span>];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Convert-Sorted-Array-to-Binary-Search-Tree&quot;&gt;&lt;a href=&quot;#Convert-Sorted-Array-to-Binary-Search-Tree&quot; class=&quot;headerlink&quot; title=&quot;Convert 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 017</title>
    <link href="onlookerliu.github.io/2018/03/22/LeetCode-Notes-017/"/>
    <id>onlookerliu.github.io/2018/03/22/LeetCode-Notes-017/</id>
    <published>2018-03-21T16:18:55.000Z</published>
    <updated>2018-04-01T16:28:06.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Continuous-Subarray-Sum"><a href="#Continuous-Subarray-Sum" class="headerlink" title="Continuous Subarray Sum"></a>Continuous Subarray Sum</h3><p>Given a list of non-negative numbers and a target integer k, write a function to check if the array has a continuous subarray of size at least 2 that sums up to the multiple of k, that is, sums up to n*k where n is also an integer.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [23, 2, 4, 6, 7],  k=6</span><br><span class="line">Output: True</span><br><span class="line">Explanation: Because [2, 4] is a continuous subarray of size 2 and sums up to 6.</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: [23, 2, 6, 4, 7],  k=6</span><br><span class="line">Output: True</span><br><span class="line">Explanation: Because [23, 2, 6, 4, 7] is an continuous subarray of size 5 and sums up to 42.</span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong></p><ol><li>The length of the array won’t exceed 10,000.</li><li>You may assume the sum of all the numbers is in the range of a signed 32-bit integer.</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkSubarraySum</span><span class="params">(self, nums, k)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type nums: List[int]</span></span><br><span class="line"><span class="string">        :type k: int</span></span><br><span class="line"><span class="string">        :rtype: bool</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        sum, pre, s = <span class="number">0</span>, <span class="number">0</span>, set()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> nums:</span><br><span class="line">            sum += item</span><br><span class="line">            <span class="keyword">if</span> (k):</span><br><span class="line">                sum %= k</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (sum <span class="keyword">in</span> s):</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">            s.add(pre)</span><br><span class="line">            pre = sum</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure><h3 id="Convert-a-Number-to-Hexadecimal"><a href="#Convert-a-Number-to-Hexadecimal" class="headerlink" title="Convert a Number to Hexadecimal"></a>Convert a Number to Hexadecimal</h3><p>Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two’s complement method is used.</p><p><strong>Note:</strong></p><ol><li>All letters in hexadecimal (<code>a-f</code>) must be in lowercase.</li><li>The hexadecimal string must not contain extra leading <code>0</code>s. If the number is zero, it is represented by a single zero character <code>&#39;0&#39;</code>; otherwise, the first character in the hexadecimal string will not be the zero character.</li><li>The given number is guaranteed to fit within the range of a 32-bit signed integer.</li><li>You must not use any method provided by the library which converts/formats the number to hex directly.</li></ol><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">26</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&quot;1a&quot;</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Input:</span><br><span class="line">-1</span><br><span class="line"></span><br><span class="line">Output:</span><br><span class="line">&quot;ffffffff&quot;</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> toHex = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &gt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> help(num);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (num === <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'0'</span>;</span><br><span class="line">  <span class="keyword">else</span> &#123;</span><br><span class="line">    num = -num;</span><br><span class="line">    <span class="keyword">return</span> help(<span class="number">0xffffffff</span> - num + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">help</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [<span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>, <span class="string">'6'</span>, <span class="string">'7'</span>, <span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line">    <span class="keyword">let</span> ans = <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (num) &#123;</span><br><span class="line">      <span class="keyword">let</span> mod = num % <span class="number">16</span>;</span><br><span class="line">      ans = arr[mod] + ans;</span><br><span class="line">      num = ~~(num / <span class="number">16</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Convert-BST-to-Greater-Tree"><a href="#Convert-BST-to-Greater-Tree" class="headerlink" title="Convert BST to Greater Tree"></a>Convert BST to Greater Tree</h3><p>Given a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Input: The root of a Binary Search Tree like this:</span><br><span class="line">              5</span><br><span class="line">            /   \</span><br><span class="line">           2     13</span><br><span class="line"></span><br><span class="line">Output: The root of a Greater Tree like this:</span><br><span class="line">             18</span><br><span class="line">            /   \</span><br><span class="line">          20     13</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode(object):</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.left = None</span></span><br><span class="line"><span class="comment">#         self.right = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertBST</span><span class="params">(self, root)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type root: TreeNode</span></span><br><span class="line"><span class="string">        :rtype: TreeNode</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">dfs</span><span class="params">(node)</span>:</span></span><br><span class="line">            <span class="keyword">if</span> node == <span class="keyword">None</span>:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dfs(node.right)</span><br><span class="line">                node.val += dfs.total</span><br><span class="line">                dfs.total = node.val</span><br><span class="line">                dfs(node.left)</span><br><span class="line"></span><br><span class="line">        dfs.total = <span class="number">0</span></span><br><span class="line">        dfs(root)</span><br><span class="line">        <span class="keyword">return</span> root</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Continuous-Subarray-Sum&quot;&gt;&lt;a href=&quot;#Continuous-Subarray-Sum&quot; class=&quot;headerlink&quot; title=&quot;Continuous Subarray Sum&quot;&gt;&lt;/a&gt;Continuous Subarr
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 016</title>
    <link href="onlookerliu.github.io/2018/03/21/LeetCode-Notes-016/"/>
    <id>onlookerliu.github.io/2018/03/21/LeetCode-Notes-016/</id>
    <published>2018-03-21T15:39:32.000Z</published>
    <updated>2018-04-01T16:35:26.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Container-With-Most-Water"><a href="#Container-With-Most-Water" class="headerlink" title="Container With Most Water"></a>Container With Most Water</h3><p>Given $n$ non-negative integers $a_1, a_2, …, a_n$, where each represents a point at coordinate $(i, a_i)$. $n$ vertical lines are drawn such that the two endpoints of line $i$ is at $(i, a_i)$ and $(i, 0)$. Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p><p>Note: You may not slant the container and $n$ is at least 2.</p><p>O(nlogn) Version<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; height</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(fn(height), fn(height.concat().reverse()));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = height.length;</span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line">  <span class="keyword">var</span> index = [];</span><br><span class="line">  <span class="keyword">var</span> maxn = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!i) &#123;</span><br><span class="line">      ans.push(height[i]);</span><br><span class="line">      index.push(i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 找到 ans 数组中刚好 &gt;= height[i] 的元素位置</span></span><br><span class="line">      <span class="comment">// 返回其下标</span></span><br><span class="line">      <span class="keyword">var</span> pos = binarySearch(ans, height[i]);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (pos !== ans.length)</span><br><span class="line">        maxn = <span class="built_in">Math</span>.max(maxn, height[i] * (i - index[pos]));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (height[i] &gt; ans[ans.length - <span class="number">1</span>]) &#123;</span><br><span class="line">        ans.push(height[i]);</span><br><span class="line">        index.push(i);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> maxn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">a, target</span>) </span>&#123;</span><br><span class="line">  target += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">    , end = a.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(start &lt;= end) &#123;</span><br><span class="line">    <span class="keyword">var</span> mid = ~~((start + end) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (a[mid] &gt;= target)</span><br><span class="line">      end = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      start = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (a[start - <span class="number">1</span>] === target - <span class="number">1</span>)</span><br><span class="line">    start -= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>O(n) Version<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; height</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> maxArea = <span class="function"><span class="keyword">function</span>(<span class="params">height</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">    , end = height.length - <span class="number">1</span></span><br><span class="line">    , maxn = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">    maxn = <span class="built_in">Math</span>.max(maxn, <span class="built_in">Math</span>.min(height[end], height[start]) * (end - start));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (height[end] &lt; height[start])</span><br><span class="line">      end --;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      start ++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> maxn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="Contains-Duplicates"><a href="#Contains-Duplicates" class="headerlink" title="Contains Duplicates"></a>Contains Duplicates</h3><p>Given an array of integers, find if the array contains any duplicates. Your function should return true if any value appears at least twice in the array, and it should return false if every element is distinct.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> containsDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = nums.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (hash[nums[i]]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    hash[nums[i]] = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Contains-Duplicate-II"><a href="#Contains-Duplicate-II" class="headerlink" title="Contains Duplicate II"></a>Contains Duplicate II</h3><p>Given an array of integers and an integer $k$, find out whether there are two distinct indices $i$ and $j$ in the array such that $nums[i] = nums[j]$ and the absolute difference between $i$ and $j$ is at most $k$.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> containsNearbyDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pos = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = nums.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pos[nums[i]] === <span class="literal">undefined</span>) </span><br><span class="line">      pos[nums[i]] = i;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (i - pos[nums[i]] &lt;= k) </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      pos[nums[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Contains-Duplicate-III"><a href="#Contains-Duplicate-III" class="headerlink" title="Contains Duplicate III"></a>Contains Duplicate III</h3><p>Given an array of integers, find out whether there are two distinct indices $i$ and $j$ in the array such that the absolute difference between $nums[i]$ and $nums[j]$ is at most t and the absolute difference between $i$ and $j$ is at most $k$.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; t</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> containsNearbyAlmostDuplicate = <span class="function"><span class="keyword">function</span>(<span class="params">nums, k, t</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = nums.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt;= <span class="built_in">Math</span>.min(i + k, len - <span class="number">1</span>); j++)</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(nums[i] - nums[j]) &lt;= t) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Container-With-Most-Water&quot;&gt;&lt;a href=&quot;#Container-With-Most-Water&quot; class=&quot;headerlink&quot; title=&quot;Container With Most Water&quot;&gt;&lt;/a&gt;Container W
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 015</title>
    <link href="onlookerliu.github.io/2018/03/20/LeetCode-Notes-015/"/>
    <id>onlookerliu.github.io/2018/03/20/LeetCode-Notes-015/</id>
    <published>2018-03-20T15:27:23.000Z</published>
    <updated>2018-04-01T15:38:22.756Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal"><a href="#Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal" class="headerlink" title="Construct Binary Tree from Inorder and Postorder Traversal"></a>Construct Binary Tree from Inorder and Postorder Traversal</h3><p>Given inorder and postorder traversal of a tree, construct the binary tree.</p><p><strong>Note:</strong><br>You may assume that duplicates do not exist in the tree.</p><p>For example, given<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inorder = [9,3,15,20,7]</span><br><span class="line">postorder = [9,15,7,20,3]</span><br></pre></td></tr></table></figure></p><p>Return the following binary tree:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; inorder</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; postorder</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span>(<span class="params">inorder, postorder</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dfs(inorder.length - <span class="number">1</span>, <span class="number">0</span>, inorder.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">index, startPos, endPos</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (startPos &gt; endPos)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> TreeNode(postorder[index]);</span><br><span class="line">    <span class="keyword">var</span> pos = inorder.indexOf(postorder[index], startPos);</span><br><span class="line"></span><br><span class="line">    node.left = dfs(index - (endPos - pos) - <span class="number">1</span>, startPos, pos - <span class="number">1</span>);</span><br><span class="line">    node.right = dfs(index - <span class="number">1</span>, pos + <span class="number">1</span>, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal-1"><a href="#Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal-1" class="headerlink" title="Construct Binary Tree from Inorder and Postorder Traversal"></a>Construct Binary Tree from Inorder and Postorder Traversal</h3><p>Given preorder and inorder traversal of a tree, construct the binary tree.</p><p><strong>Note:</strong><br>You may assume that duplicates do not exist in the tree.</p><p>For example, given<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">preorder = [3,9,20,15,7]</span><br><span class="line">inorder = [9,3,15,20,7]</span><br></pre></td></tr></table></figure></p><p>Return the following binary tree:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; preorder</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; inorder</span></span><br><span class="line"><span class="comment"> * @return &#123;TreeNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> buildTree = <span class="function"><span class="keyword">function</span>(<span class="params">preorder, inorder</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dfs(<span class="number">0</span>, <span class="number">0</span>, preorder.length - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// the subTree values whose node value is preorder[index]</span></span><br><span class="line">  <span class="comment">// inorder[startPos] - inorder[endPos]</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">index, startPos, endPos</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (startPos &gt; endPos)</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> TreeNode(preorder[index]);</span><br><span class="line">    <span class="keyword">var</span> pos = inorder.indexOf(preorder[index], startPos);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// node's left subNode's value is preorder[index + 1]</span></span><br><span class="line">    <span class="comment">// node's right subNode's value is preorder[index + pos - startPos + 1]</span></span><br><span class="line">    node.left = dfs(index + <span class="number">1</span>, startPos, pos - <span class="number">1</span>);</span><br><span class="line">    node.right = dfs(index + pos - startPos + <span class="number">1</span>, pos + <span class="number">1</span>, endPos);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Construct-the-Rectangle"><a href="#Construct-the-Rectangle" class="headerlink" title="Construct the Rectangle"></a>Construct the Rectangle</h3><p>For a web developer, it is very important to know how to design a web page’s size. So, given a specific rectangular web page’s area, your job by now is to design a rectangular web page, whose length L and width W satisfy the following requirements:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. The area of the rectangular web page you designed must equal to the given target area.</span><br><span class="line"></span><br><span class="line">2. The width W should not be larger than the length L, which means L &gt;= W.</span><br><span class="line"></span><br><span class="line">3. The difference between length L and width W should be as small as possible.</span><br></pre></td></tr></table></figure><p>You need to output the length L and the width W of the web page you designed in sequence.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Input: 4</span><br><span class="line">Output: [2, 2]</span><br><span class="line">Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. </span><br><span class="line">But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.</span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong></p><ol><li>The given area won’t exceed 10,000,000 and is a positive integer</li><li>The web page’s width and length you designed must be positive integers.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal&quot;&gt;&lt;a href=&quot;#Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal&quot; cl
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 014</title>
    <link href="onlookerliu.github.io/2018/03/19/LeetCode-Notes-014/"/>
    <id>onlookerliu.github.io/2018/03/19/LeetCode-Notes-014/</id>
    <published>2018-03-19T15:08:38.000Z</published>
    <updated>2018-04-01T15:24:53.502Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Combinations"><a href="#Combinations" class="headerlink" title="Combinations"></a>Combinations</h3><p>Given two integers $n$ and $k$, return all possible combinations of $k$ numbers out of 1 … $n$.</p><p>For example:<br>If n = 4 and k = 2, a solution is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [2,4],</span><br><span class="line">  [3,4],</span><br><span class="line">  [2,3],</span><br><span class="line">  [1,2],</span><br><span class="line">  [1,3],</span><br><span class="line">  [1,4],</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// return an array of k numbers with 1 ~ n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ans = []</span><br><span class="line">  , tmp = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">next, n, num, k</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num === k) &#123;</span><br><span class="line">    <span class="keyword">var</span> res = tmp.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ans.push(res);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = next; i &lt;= n; i++) &#123;</span><br><span class="line">    tmp.push(i);</span><br><span class="line">    dfs(i + <span class="number">1</span>, n, num + <span class="number">1</span>, k);</span><br><span class="line">    tmp.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> combine = <span class="function"><span class="keyword">function</span>(<span class="params">n, k</span>) </span>&#123;</span><br><span class="line">  ans = []; </span><br><span class="line">  <span class="comment">// select the 1st number</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    tmp[<span class="number">0</span>] = i;</span><br><span class="line">    dfs(i + <span class="number">1</span>, n, <span class="number">1</span>, k);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Compare-Version-Numbers"><a href="#Compare-Version-Numbers" class="headerlink" title="Compare Version Numbers"></a>Compare Version Numbers</h3><p>Compare two version numbers version1 and version2.<br>If version1 &gt; version2 return 1, if version1 &lt; version2 return -1, otherwise return 0.</p><p>You may assume that the version strings are non-empty and contain only digits and the <code>.</code> character.<br>The <code>.</code> character does not represent a decimal point and is used to separate number sequences.<br>For instance, <code>2.5</code> is not “two and a half” or “half way to version three”, it is the fifth second-level revision of the second first-level revision.</p><p>Here is an example of version numbers ordering:</p><p>0.1 &lt; 1.1 &lt; 1.2 &lt; 13.37</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; version1</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; version2</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> compareVersion = <span class="function"><span class="keyword">function</span>(<span class="params">version1, version2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = version1.split(<span class="string">'.'</span>);</span><br><span class="line">  <span class="keyword">var</span> b = version2.split(<span class="string">'.'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len1 = a.length;</span><br><span class="line">  <span class="keyword">var</span> len2 = b.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">Math</span>.max(len1, len2); i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item1 = i &lt; len1 ? +a[i] : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> item2 = i &lt; len2 ? +b[i] : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (item1 &gt; item2)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (item1 &lt; item2)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Complex-Number-Multiplication"><a href="#Complex-Number-Multiplication" class="headerlink" title="Complex Number Multiplication"></a>Complex Number Multiplication</h3><p>Given two strings representing two complex numbers.</p><p>You need to return a string representing their multiplication. Note $i^2 = -1$ according to the definition.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;1+1i&quot;, &quot;1+1i&quot;</span><br><span class="line">Output: &quot;0+2i&quot;</span><br><span class="line">Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: &quot;1+-1i&quot;, &quot;1+-1i&quot;</span><br><span class="line">Output: &quot;0+-2i&quot;</span><br><span class="line">Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.</span><br></pre></td></tr></table></figure></p><p><strong>Note</strong></p><ul><li>The input strings will not have extra blank.</li><li>The input strings will be given in the form of a+bi, where the integer a and b will both belong to the range of [-100, 100]. And the output should be also in this form.</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">complexNumberMultiply</span><span class="params">(self, a, b)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        :type a: str</span></span><br><span class="line"><span class="string">        :type b: str</span></span><br><span class="line"><span class="string">        :rtype: str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        a = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> a[:<span class="number">-1</span>].split(<span class="string">'+'</span>)]</span><br><span class="line">        b = [int(i) <span class="keyword">for</span> i <span class="keyword">in</span> b[:<span class="number">-1</span>].split(<span class="string">'+'</span>)]</span><br><span class="line">        c = a[<span class="number">0</span>] * b[<span class="number">0</span>] - a[<span class="number">1</span>] * b[<span class="number">1</span>]</span><br><span class="line">        d = a[<span class="number">0</span>] * b[<span class="number">1</span>] + a[<span class="number">1</span>] * b[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> str(c) + <span class="string">'+'</span> + str(d) + <span class="string">'i'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Combinations&quot;&gt;&lt;a href=&quot;#Combinations&quot; class=&quot;headerlink&quot; title=&quot;Combinations&quot;&gt;&lt;/a&gt;Combinations&lt;/h3&gt;&lt;p&gt;Given two integers $n$ and $k$
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 013</title>
    <link href="onlookerliu.github.io/2018/03/18/LeetCode-Notes-013/"/>
    <id>onlookerliu.github.io/2018/03/18/LeetCode-Notes-013/</id>
    <published>2018-03-18T14:13:47.000Z</published>
    <updated>2018-04-01T15:08:24.184Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Combination-Sum-II"><a href="#Combination-Sum-II" class="headerlink" title="Combination Sum II"></a>Combination Sum II</h3><p>Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.</p><p>Each number in C may only be used once in the combination.</p><p><strong>Note:</strong></p><ul><li>All numbers (including target) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><p>For example, given candidate set <code>[10, 1, 2, 7, 6, 1, 5]</code> and target <code>8</code>,<br>A solution set is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [1, 7],</span><br><span class="line">  [1, 2, 5],</span><br><span class="line">  [2, 6],</span><br><span class="line">  [1, 1, 6]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; candidates</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combinationSum2 = <span class="function"><span class="keyword">function</span>(<span class="params">candidates, target</span>) </span>&#123;</span><br><span class="line">  candidates.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = candidates.length;</span><br><span class="line">  <span class="keyword">var</span> res = [];</span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line"></span><br><span class="line">  dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">index, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sum &gt; target)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">      ans.push(res.concat());</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="comment">// Point!</span></span><br><span class="line">      <span class="comment">// remove the duplicate combinations</span></span><br><span class="line">      <span class="keyword">if</span> (i &gt; index &amp;&amp; candidates[i] === candidates[i - <span class="number">1</span>])</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      res.push(candidates[i]);</span><br><span class="line">      dfs(i + <span class="number">1</span>, sum + candidates[i]);</span><br><span class="line">      res.pop();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Combination-Sum-III"><a href="#Combination-Sum-III" class="headerlink" title="Combination Sum III"></a>Combination Sum III</h3><p>Find all possible combinations of $k$ numbers that add up to a number $n$, given that only numbers from 1 to 9 can be used and each combination should be a unique set of numbers.</p><p><strong>Example 1:</strong><br>Input: k = 3, n = 7</p><p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[1,2,4]]</span><br></pre></td></tr></table></figure></p><p>Input: k = 3, n = 9</p><p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[[1,2,6], [1,3,5], [2,3,4]]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; k</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">arr, last, num, k, sum, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num === k &amp;&amp; sum === n) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ans.push(tmp);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (num &gt; k || sum &gt; n ) </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = last + <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++) &#123;</span><br><span class="line">    arr[arr.length] = i;</span><br><span class="line">    dfs(arr, i, num + <span class="number">1</span>, k, sum + i, n);</span><br><span class="line">    arr.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> combinationSum3 = <span class="function"><span class="keyword">function</span>(<span class="params">k, n</span>) </span>&#123;</span><br><span class="line">  ans = [];</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">    dfs([i], i, <span class="number">1</span>, k, i, n);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Combination-Sum-IV"><a href="#Combination-Sum-IV" class="headerlink" title="Combination Sum IV"></a>Combination Sum IV</h3><p>Given an integer array with all positive numbers and no duplicates, find the number of possible combinations that add up to a positive integer target.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">nums = [1, 2, 3]</span><br><span class="line">target = 4</span><br><span class="line"></span><br><span class="line">The possible combination ways are:</span><br><span class="line">(1, 1, 1, 1)</span><br><span class="line">(1, 1, 2)</span><br><span class="line">(1, 2, 1)</span><br><span class="line">(1, 3)</span><br><span class="line">(2, 1, 1)</span><br><span class="line">(2, 2)</span><br><span class="line">(3, 1)</span><br><span class="line"></span><br><span class="line">Note that different sequences are counted as different combinations.</span><br><span class="line"></span><br><span class="line">Therefore the output is 7.</span><br></pre></td></tr></table></figure></p><p><strong>Follow up:</strong><br>What if negative numbers are allowed in the given array?<br>How does it change the problem?<br>What limitation we need to add to the question to allow negative numbers?</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> combinationSum4 = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ans[i] 表示组成 i 的方案数</span></span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line">  ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= target; i++) &#123;</span><br><span class="line">    ans[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, len = nums.length; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> item = nums[j];</span><br><span class="line">      <span class="keyword">if</span> (i - item &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="comment">// (i - item) + item = i</span></span><br><span class="line">      ans[i] += ans[i - item];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans[target];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Combination-Sum-II&quot;&gt;&lt;a href=&quot;#Combination-Sum-II&quot; class=&quot;headerlink&quot; title=&quot;Combination Sum II&quot;&gt;&lt;/a&gt;Combination Sum II&lt;/h3&gt;&lt;p&gt;Given 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 012</title>
    <link href="onlookerliu.github.io/2018/03/17/LeetCode-Notes-012/"/>
    <id>onlookerliu.github.io/2018/03/17/LeetCode-Notes-012/</id>
    <published>2018-03-16T17:16:09.000Z</published>
    <updated>2018-03-31T17:30:00.501Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Clone-Graph"><a href="#Clone-Graph" class="headerlink" title="Clone Graph"></a>Clone Graph</h3><p>Clone an undirected graph. Each node in the graph contains a label and a list of its neighbors.</p><p><strong>OJ’s undirected graph serialization:</strong><br>Nodes are labeled uniquely.</p><p>We use <code>#</code> as a separator for each node, and <code>,</code> as a separator for node label and each neighbor of the node.<br>As an example, consider the serialized graph <code>{0,1,2#1,2#2,2}</code>.</p><p>The graph has a total of three nodes, and therefore contains three parts as separated by <code>#</code>.</p><ul><li>First node is labeled as <code>0</code>. Connect node <code>0</code> to both nodes <code>1</code> and <code>2</code>.</li><li>Second node is labeled as <code>1</code>. Connect node <code>1</code> to node <code>2</code>.</li><li>Third node is labeled as <code>2</code>. Connect node <code>2</code> to node <code>2</code> (itself), thus forming a self-cycle.</li></ul><p>Visually, the graph looks like the following:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   1</span><br><span class="line">  / \</span><br><span class="line"> /   \</span><br><span class="line">0 --- 2</span><br><span class="line">     / \</span><br><span class="line">     \_/</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for undirected graph.</span></span><br><span class="line"><span class="comment"> * function UndirectedGraphNode(label) &#123;</span></span><br><span class="line"><span class="comment"> *     this.label = label;</span></span><br><span class="line"><span class="comment"> *     this.neighbors = [];   // Array of UndirectedGraphNode</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;UndirectedGraphNode&#125; graph</span></span><br><span class="line"><span class="comment"> * @return &#123;UndirectedGraphNode&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> cloneGraph = <span class="function"><span class="keyword">function</span>(<span class="params">graph</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!graph)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dfs(graph);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> label = node.label;</span><br><span class="line">    <span class="keyword">var</span> newNode = <span class="keyword">new</span> UndirectedGraphNode(label);</span><br><span class="line">    hash[label] = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = node.neighbors.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> item = node.neighbors[i];</span><br><span class="line">      <span class="keyword">if</span> (hash[item.label] !== <span class="literal">undefined</span>)</span><br><span class="line">        newNode.neighbors.push(hash[item.label]);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        newNode.neighbors.push(dfs(item));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> newNode;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Coin-Change"><a href="#Coin-Change" class="headerlink" title="Coin Change"></a>Coin Change</h3><p>You are given coins of different denominations and a total amount of money amount. Write a function to compute the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p><p><strong>Example 1:</strong><br>coins = <code>[1, 2, 5]</code>, amount = <code>11</code><br>return <code>3</code> (11 = 5 + 5 + 1)</p><p><strong>Example 2:</strong><br>coins = <code>[2]</code>, amount = <code>3</code><br>return <code>-1</code>.</p><p><strong>Note:</strong><br>You may assume that you have an infinite number of each kind of coin.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; coins</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; amount</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> coinChange = <span class="function"><span class="keyword">function</span>(<span class="params">coins, amount</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line">  ans[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = coins.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = coins[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j + item &lt;= amount; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (ans[j] === <span class="literal">undefined</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">if</span> (ans[j + item] === <span class="literal">undefined</span>)</span><br><span class="line">        ans[j + item] = ans[j] + <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        ans[j + item] = <span class="built_in">Math</span>.min(ans[j + item], ans[j] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans[amount] === <span class="literal">undefined</span> ? <span class="number">-1</span> : ans[amount];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Combination-Sum"><a href="#Combination-Sum" class="headerlink" title="Combination Sum"></a>Combination Sum</h3><p>Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.</p><p>The same repeated number may be chosen from C unlimited number of times.</p><p><strong>Note:</strong></p><ul><li>All numbers (including target) will be positive integers.</li><li>The solution set must not contain duplicate combinations.</li></ul><p>For example, given candidate set <code>[2, 3, 6, 7]</code> and target <code>7</code>,<br>A solution set is:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [7],</span><br><span class="line">  [2, 2, 3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; candidates</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> ans, res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">index, sum, candidates, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (sum === target) &#123;</span><br><span class="line">    <span class="keyword">var</span> tmp = res.map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> item;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ans.push(tmp);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = index, len = candidates.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sum + candidates[i] &gt; target) <span class="keyword">continue</span>;</span><br><span class="line">    res.push(candidates[i]);</span><br><span class="line">    dfs(i, sum + candidates[i], candidates, target);</span><br><span class="line">    res.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> combinationSum = <span class="function"><span class="keyword">function</span>(<span class="params">candidates, target</span>) </span>&#123;</span><br><span class="line">  ans = [];</span><br><span class="line">  candidates.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// choose the first number</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = candidates.length; i &lt; len; i++) &#123;</span><br><span class="line">    res = [candidates[i]];</span><br><span class="line">    dfs(i, candidates[i], candidates, target);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Clone-Graph&quot;&gt;&lt;a href=&quot;#Clone-Graph&quot; class=&quot;headerlink&quot; title=&quot;Clone Graph&quot;&gt;&lt;/a&gt;Clone Graph&lt;/h3&gt;&lt;p&gt;Clone an undirected graph. Each no
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 011</title>
    <link href="onlookerliu.github.io/2018/03/16/LeetCode-Notes-011/"/>
    <id>onlookerliu.github.io/2018/03/16/LeetCode-Notes-011/</id>
    <published>2018-03-16T06:22:16.000Z</published>
    <updated>2018-03-30T06:45:53.474Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Bulb-Switcher"><a href="#Bulb-Switcher" class="headerlink" title="Bulb Switcher"></a>Bulb Switcher</h3><p>There are n bulbs that are initially off. You first turn on all the bulbs. Then, you turn off every second bulb. On the third round, you toggle every third bulb (turning on if it’s off or turning off if it’s on). For the ith round, you toggle every i bulb. For the nth round, you only toggle the last bulb. Find how many bulbs are on after n rounds.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Given n = 3. </span><br><span class="line"></span><br><span class="line">At first, the three bulbs are [off, off, off].</span><br><span class="line">After first round, the three bulbs are [on, on, on].</span><br><span class="line">After second round, the three bulbs are [on, off, on].</span><br><span class="line">After third round, the three bulbs are [on, off, off]. </span><br><span class="line"></span><br><span class="line">So you should return 1, because there is only one bulb is on.</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打表</span></span><br><span class="line"><span class="keyword">var</span> bulbSwitch = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ans = <span class="number">-1</span> + <span class="built_in">Math</span>.sqrt(<span class="number">1</span> + n);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.ceil(ans);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Bull-and-Cows"><a href="#Bull-and-Cows" class="headerlink" title="Bull and Cows"></a>Bull and Cows</h3><p>You are playing the following Bulls and Cows game with your friend: You write down a number and ask your friend to guess what the number is. Each time your friend makes a guess, you provide a hint that indicates how many digits in said guess match your secret number exactly in both digit and position (called “bulls”) and how many digits match the secret number but locate in the wrong position (called “cows”). Your friend will use successive guesses and hints to eventually derive the secret number.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Secret number:  &quot;1807&quot;</span><br><span class="line">Friend&apos;s guess: &quot;7810&quot;</span><br></pre></td></tr></table></figure></p><p>Hint: <code>1</code> bull and <code>3</code> cows. (The bull is <code>8</code>, the cows are <code>0</code>, <code>1</code> and <code>7</code>.)<br>Write a function to return a hint according to the secret number and friend’s guess, use <code>A</code> to indicate the bulls and <code>B</code> to indicate the cows. In the above example, your function should return <code>&quot;1A3B&quot;</code>.</p><p>Please note that both secret number and friend’s guess may contain duplicate digits, for example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Secret number:  &quot;1123&quot;</span><br><span class="line">Friend&apos;s guess: &quot;0111&quot;</span><br></pre></td></tr></table></figure></p><p>In this case, the 1st <code>1</code> in friend’s guess is a bull, the 2nd or 3rd <code>1</code> is a cow, and your function should return <code>&quot;1A1B&quot;</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; secret</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; guess</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> getHint = <span class="function"><span class="keyword">function</span>(<span class="params">secret, guess</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = secret.split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">var</span> b = guess.split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">var</span> len = a.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> bullNum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> cowBum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = len; i--; ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a[i] === b[i]) &#123;</span><br><span class="line">      a.splice(i, <span class="number">1</span>);</span><br><span class="line">      b.splice(i, <span class="number">1</span>);</span><br><span class="line">      bullNum++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!hash[a[i]])</span><br><span class="line">        hash[a[i]] = <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        hash[a[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; b.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = b[i];</span><br><span class="line">    <span class="keyword">if</span> (hash[item]) &#123;</span><br><span class="line">      cowBum++;</span><br><span class="line">      hash[item]--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> bullNum + <span class="string">'A'</span> + cowBum + <span class="string">'B'</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Climbing-Stairs"><a href="#Climbing-Stairs" class="headerlink" title="Climbing Stairs"></a>Climbing Stairs</h3><p>You are climbing a stair case. It takes n steps to reach to the top.</p><p>Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?</p><p><strong>Note</strong>: Given n will be a positive integer.</p><p><strong>Example 1:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Input: 2</span><br><span class="line">Output:  2</span><br><span class="line">Explanation:  There are two ways to climb to the top.</span><br><span class="line"></span><br><span class="line">1. 1 step + 1 step</span><br><span class="line">2. 2 steps</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Input: 3</span><br><span class="line">Output:  3</span><br><span class="line">Explanation:  There are three ways to climb to the top.</span><br><span class="line"></span><br><span class="line">1. 1 step + 1 step + 1 step</span><br><span class="line">2. 1 step + 2 steps</span><br><span class="line">3. 2 steps + 1 step</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> climbStairs = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = [];</span><br><span class="line">  a[<span class="number">0</span>] = <span class="number">1</span>, a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= n; i++)</span><br><span class="line">    a[i] = a[i - <span class="number">1</span>] + a[i - <span class="number">2</span>];</span><br><span class="line">  <span class="keyword">return</span> a[n];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Bulb-Switcher&quot;&gt;&lt;a href=&quot;#Bulb-Switcher&quot; class=&quot;headerlink&quot; title=&quot;Bulb Switcher&quot;&gt;&lt;/a&gt;Bulb Switcher&lt;/h3&gt;&lt;p&gt;There are n bulbs that are
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 010</title>
    <link href="onlookerliu.github.io/2018/03/15/LeetCode-Notes-010/"/>
    <id>onlookerliu.github.io/2018/03/15/LeetCode-Notes-010/</id>
    <published>2018-03-15T06:10:46.000Z</published>
    <updated>2018-03-30T06:18:32.601Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="Binary Tree Zigzag Level Order Traversal"></a>Binary Tree Zigzag Level Order Traversal</h3><p>Given a binary tree, return the zigzag level order traversal of its nodes’ values. (ie, from left to right, then right to left for the next level and alternate between).</p><p>For example:<br>Given binary tree <code>[3,9,20,null,null,15,7]</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its zigzag level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [20,9],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> zigzagLevelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> maxn = <span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line"></span><br><span class="line">  dfs(root, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">node, step</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    maxn = step &gt; maxn ? step : maxn;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ans[step])</span><br><span class="line">      ans[step] = [];</span><br><span class="line"></span><br><span class="line">    ans[step].push(node.val);</span><br><span class="line"></span><br><span class="line">    dfs(node.left, step + <span class="number">1</span>);</span><br><span class="line">    dfs(node.right, step + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= maxn; i++)</span><br><span class="line">    (i &amp; <span class="number">1</span>) &amp;&amp; (ans[i].reverse());</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Binary-Watch"><a href="#Binary-Watch" class="headerlink" title="Binary Watch"></a>Binary Watch</h3><p>A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).</p><p>Each LED represents a zero or one, with the least significant bit on the right.</p><div align="center"><br><img src="https://upload.wikimedia.org/wikipedia/commons/8/8b/Binary_clock_samui_moon.jpg"><br></div><p>For example, the above binary watch reads “3:25”.</p><p>Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.</p><p><strong>Example:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: n = 1</span><br><span class="line">Return: [&quot;1:00&quot;, &quot;2:00&quot;, &quot;4:00&quot;, &quot;8:00&quot;, &quot;0:01&quot;, &quot;0:02&quot;, &quot;0:04&quot;, &quot;0:08&quot;, &quot;0:16&quot;, &quot;0:32&quot;]</span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong></p><ul><li>The order of output does not matter.</li><li>The hour must not contain a leading zero, for example “01:00” is not valid, it should be “1:00”.</li><li>The minute must be consist of two digits and may contain a leading zero, for example “10:2” is not valid, it should be “10:02”.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> readBinaryWatch = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> hours = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>];</span><br><span class="line">  <span class="keyword">let</span> minutes = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>];</span><br><span class="line">  <span class="keyword">let</span> ans = [];</span><br><span class="line"></span><br><span class="line">  dfs(num, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">left, a, b, hoursTotal, minutesTotal</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (hoursTotal &gt;= <span class="number">12</span> || minutesTotal &gt;= <span class="number">60</span>)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> str = hoursTotal + <span class="string">":"</span>;</span><br><span class="line">      str += minutesTotal &lt; <span class="number">10</span> ? <span class="string">'0'</span> + minutesTotal : minutesTotal;</span><br><span class="line">      ans.push(str);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add i to hour</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = a; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      dfs(left - <span class="number">1</span>, i + <span class="number">1</span>, b, hoursTotal + hours[i], minutesTotal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// add i to minute</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = b; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">      dfs(left - <span class="number">1</span>, a, i + <span class="number">1</span>, hoursTotal, minutesTotal + minutes[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(ans));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Bitwise-AND-of-Numbers-Range"><a href="#Bitwise-AND-of-Numbers-Range" class="headerlink" title="Bitwise AND of Numbers Range"></a>Bitwise AND of Numbers Range</h3><p>Given a range [m, n] where 0 &lt;= m &lt;= n &lt;= 2147483647, return the bitwise AND of all numbers in this range, inclusive.</p><p>For example, given the range [5, 7], you should return 4.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; m</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; n</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBitNum</span>(<span class="params">a, pos</span>) </span>&#123;</span><br><span class="line">  a++;</span><br><span class="line">  <span class="keyword">var</span> res = <span class="built_in">Math</span>.pow(<span class="number">2</span>, pos)</span><br><span class="line">    , loop = ~~(a / res)</span><br><span class="line">    , num = loop * (res / <span class="number">2</span>) + <span class="built_in">Math</span>.max(a % res - res / <span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rangeBitwiseAnd = <span class="function"><span class="keyword">function</span>(<span class="params">m, n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ans = <span class="number">0</span></span><br><span class="line">    , tmp = n</span><br><span class="line">    , digits = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (tmp) &#123;</span><br><span class="line">    digits++;</span><br><span class="line">    tmp &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; digits; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> num = getBitNum(n, i + <span class="number">1</span>) - getBitNum(m - <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (num === n - m + <span class="number">1</span>)</span><br><span class="line">      ans += <span class="built_in">Math</span>.pow(<span class="number">2</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Binary-Tree-Zigzag-Level-Order-Traversal&quot;&gt;&lt;a href=&quot;#Binary-Tree-Zigzag-Level-Order-Traversal&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 009</title>
    <link href="onlookerliu.github.io/2018/03/14/LeetCode-Notes-009/"/>
    <id>onlookerliu.github.io/2018/03/14/LeetCode-Notes-009/</id>
    <published>2018-03-14T03:19:26.000Z</published>
    <updated>2018-03-30T06:10:23.208Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Binary-Tree-Postorder-Traversal"><a href="#Binary-Tree-Postorder-Traversal" class="headerlink" title="Binary Tree Postorder Traversal"></a>Binary Tree Postorder Traversal</h3><p>Given a binary tree, return the postorder traversal of its nodes’ values.</p><p>For example:<br>Given binary tree <code>[1,null,2,3]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> /</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>return <code>[3,2,1]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">root, ans</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  dfs(root.left, ans);</span><br><span class="line">  dfs(root.right, ans);</span><br><span class="line"></span><br><span class="line">  ans.push(root.val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line">  dfs(root, ans);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Binary-Tree-Preorder-Traversal"><a href="#Binary-Tree-Preorder-Traversal" class="headerlink" title="Binary Tree Preorder Traversal"></a>Binary Tree Preorder Traversal</h3><p>Given a binary tree, return the preorder traversal of its nodes’ values.</p><p>For example:<br>Given binary tree <code>[1,null,2,3]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line"> \</span><br><span class="line">  2</span><br><span class="line"> /</span><br><span class="line">3</span><br></pre></td></tr></table></figure><p>return <code>[1,2,3]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">root, ans</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line">  ans.push(root.val);</span><br><span class="line"></span><br><span class="line">  dfs(root.left, ans);</span><br><span class="line">  dfs(root.right, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> preorderTraversal = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line">  dfs(root, ans);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Binary-Tree-Right-Side-View"><a href="#Binary-Tree-Right-Side-View" class="headerlink" title="Binary Tree Right Side View"></a>Binary Tree Right Side View</h3><p>Given a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.</p><p>For example:<br>Given the following binary tree,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   1            &lt;---</span><br><span class="line"> /   \</span><br><span class="line">2     3         &lt;---</span><br><span class="line"> \     \</span><br><span class="line">  5     4       &lt;---</span><br></pre></td></tr></table></figure><p>You should return <code>[1, 3, 4]</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> rightSideView = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ans = []</span><br><span class="line">    , tmp = [root];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (tmp.length) &#123;</span><br><span class="line">    <span class="keyword">var</span> res = []</span><br><span class="line">      , a = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tmp.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!tmp[i]) <span class="keyword">continue</span>;</span><br><span class="line">      res.push(tmp[i].val);</span><br><span class="line">      a.push(tmp[i].left);</span><br><span class="line">      a.push(tmp[i].right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tmp = a.concat();</span><br><span class="line">    <span class="keyword">if</span> (res.length)</span><br><span class="line">      ans.push(res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> a = [];</span><br><span class="line">  ans.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">    a.push(item.pop());</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Binary-Tree-Postorder-Traversal&quot;&gt;&lt;a href=&quot;#Binary-Tree-Postorder-Traversal&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree Postorder Traversa
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-019</title>
    <link href="onlookerliu.github.io/2018/03/13/Project-Euler-019/"/>
    <id>onlookerliu.github.io/2018/03/13/Project-Euler-019/</id>
    <published>2018-03-13T14:01:49.000Z</published>
    <updated>2018-03-19T14:05:45.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>You are given the following information,<br>but you may prefer to do some research for yourself.</p><pre><code>1 Jan 1900 was a Monday.Thirty days has September,April, June and November.All the rest have thirty-one,Saving February alone,Which has twenty-eight, rain or shine.And on leap years, twenty-nine.A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.</code></pre><p>How many Sundays fell on the first of the month during<br>the twentieth century (1 Jan 1901 to 31 Dec 2000)?</p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">171</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> calendar <span class="keyword">import</span> monthrange; <span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line">print(len([(year, month) <span class="keyword">for</span> year, month <span class="keyword">in</span> product(list(range(<span class="number">1901</span>, <span class="number">2001</span>)), list(range(<span class="number">1</span>, <span class="number">13</span>))) <span class="keyword">if</span> monthrange(year, month)[<span class="number">0</span>] == <span class="number">6</span>]))</span><br></pre></td></tr></table></figure></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">months = [</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">28</span>,</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">30</span>,</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">30</span>,</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">30</span>,</span><br><span class="line">    <span class="number">31</span>,</span><br><span class="line">    <span class="number">30</span>,</span><br><span class="line">    <span class="number">31</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">week = [<span class="string">'sun'</span>,</span><br><span class="line">        <span class="string">'mon'</span>,</span><br><span class="line">        <span class="string">'tue'</span>,</span><br><span class="line">        <span class="string">'wed'</span>,</span><br><span class="line">        <span class="string">'thu'</span>,</span><br><span class="line">        <span class="string">'fri'</span>,</span><br><span class="line">        <span class="string">'sat'</span></span><br><span class="line">       ]</span><br><span class="line"></span><br><span class="line">leapyears = [year <span class="keyword">for</span> year <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">101</span>) <span class="keyword">if</span> year % <span class="number">4</span> == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">day = <span class="number">0</span> <span class="comment"># 1 Jan 1901</span></span><br><span class="line">month = <span class="number">0</span> <span class="comment"># January</span></span><br><span class="line">year = <span class="number">1</span> <span class="comment"># 1901</span></span><br><span class="line">weekday = <span class="number">2</span> <span class="comment"># Tuesday</span></span><br><span class="line"></span><br><span class="line">days = &#123;day: week[weekday]&#125; </span><br><span class="line"></span><br><span class="line">since_last_month = <span class="number">0</span></span><br><span class="line">since_last_year = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">first_of_months = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> year &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="comment">#print "%s/%s/%s - %s" % (month+1, since_last_month+1, year+1900, week[weekday])</span></span><br><span class="line">    <span class="comment"># if it's the first of the month, make a note </span></span><br><span class="line">    <span class="comment"># of the weekday.</span></span><br><span class="line">    <span class="keyword">if</span> since_last_month == <span class="number">0</span>:</span><br><span class="line">        first_of_months[<span class="string">"%s/%s/%s"</span> % (month+<span class="number">1</span>, since_last_month+<span class="number">1</span>, year+<span class="number">1900</span>)] = week[weekday]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># increment the counters..</span></span><br><span class="line">    day += <span class="number">1</span></span><br><span class="line">    since_last_month += <span class="number">1</span></span><br><span class="line">    since_last_year += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># check what year it is</span></span><br><span class="line">    days_of_year = <span class="number">365</span></span><br><span class="line">    <span class="keyword">if</span> year <span class="keyword">in</span> leapyears:</span><br><span class="line">        days_of_year += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> since_last_year &gt;= days_of_year:</span><br><span class="line">        year += <span class="number">1</span></span><br><span class="line">        since_last_year = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check what month it is</span></span><br><span class="line">    days_of_month = months[month]</span><br><span class="line">    <span class="keyword">if</span> month == <span class="number">1</span> <span class="keyword">and</span> year <span class="keyword">in</span> leapyears: <span class="comment"># february</span></span><br><span class="line">        days_of_month += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> since_last_month &gt;= days_of_month:</span><br><span class="line">        month += <span class="number">1</span></span><br><span class="line">        since_last_month = <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> month &gt; len(months)<span class="number">-1</span>:</span><br><span class="line">            month = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># check what day of the week it is</span></span><br><span class="line">    weekday += <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> weekday &gt; len(week)<span class="number">-1</span>:</span><br><span class="line">        weekday = <span class="number">0</span></span><br><span class="line">    days[day] = week[weekday]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">date_sort</span><span class="params">(date)</span>:</span></span><br><span class="line">    date_str = date[<span class="number">0</span>]</span><br><span class="line">    month,day,year = date_str.split(<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">return</span> int(month)*int(day)*int(year)</span><br><span class="line"></span><br><span class="line">print(len([weekday <span class="keyword">for</span> weekday <span class="keyword">in</span> list(first_of_months.values()) <span class="keyword">if</span> weekday == <span class="string">'sun'</span>]))</span><br></pre></td></tr></table></figure><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'date'</span></span><br><span class="line">puts Date.new(<span class="number">1901</span>,<span class="number">1</span>,<span class="number">1</span>).upto(Date.new(<span class="number">2000</span>,<span class="number">12</span>,<span class="number">31</span>)).find_all &#123; <span class="params">|d|</span> d.mday == <span class="number">1</span> &amp;&amp; d.wday == <span class="number">0</span> &#125;.count</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p019</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p019().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We use Zeller's congruence to compute the day of week when given the year, month, and day.</span></span><br><span class="line"><span class="comment"> * Then we simply check the first day of all the months in the given range by brute force.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Zeller's congruence is well-known and a bit long to explain.</span></span><br><span class="line"><span class="comment"> * See: https://en.wikipedia.org/wiki/Zeller%27s_congruence</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">1901</span>; y &lt;= <span class="number">2000</span>; y++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> m = <span class="number">1</span>; m &lt;= <span class="number">12</span>; m++) &#123;</span><br><span class="line"><span class="keyword">if</span> (dayOfWeek(y, m, <span class="number">1</span>) == <span class="number">0</span>)  <span class="comment">// Sunday</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Return value: 0 = Sunday, 1 = Monday, ..., 6 = Saturday.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">dayOfWeek</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (year &lt; <span class="number">0</span> || year &gt; <span class="number">10000</span> || month &lt; <span class="number">1</span> || month &gt; <span class="number">12</span> || day &lt; <span class="number">1</span> || day &gt; <span class="number">31</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Zeller's congruence algorithm</span></span><br><span class="line"><span class="keyword">int</span> m = (month - <span class="number">3</span> + <span class="number">4800</span>) % <span class="number">4800</span>;</span><br><span class="line"><span class="keyword">int</span> y = (year + m / <span class="number">12</span>) % <span class="number">400</span>;</span><br><span class="line">m %= <span class="number">12</span>;</span><br><span class="line"><span class="keyword">return</span> (y + y/<span class="number">4</span> - y/<span class="number">100</span> + (<span class="number">13</span> * m + <span class="number">2</span>) / <span class="number">5</span> + day + <span class="number">2</span>) % <span class="number">7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * We simply use Mathematica's built-in date library to compute the answer by brute force.</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line">&lt;&lt; Miscellaneous`Calendar`</span><br><span class="line"><span class="keyword">Sum</span>[<span class="keyword">Boole</span>[DayOfWeek[&#123;y, m, 1&#125;] === <span class="keyword">Sunday</span>], &#123;y, 1901, 2000&#125;, &#123;m, 1, 12&#125;]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;You are given the following information,&lt;br&gt;but yo
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-018</title>
    <link href="onlookerliu.github.io/2018/03/13/Project-Euler-018/"/>
    <id>onlookerliu.github.io/2018/03/13/Project-Euler-018/</id>
    <published>2018-03-13T13:50:28.000Z</published>
    <updated>2018-03-19T13:57:53.854Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><br>By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.<br></p><pre><code>37 42 4 68 5 9 3</code></pre><p><br>That is, $3 + 7 + 4 + 9 = 23$.<br></p><p><br>Find the maximum total from top to bottom of the triangle below:<br></p><pre><code>7595 6417 47 8218 35 87 1020 04 82 47 6519 01 23 75 03 3488 02 77 73 07 63 6799 65 04 28 06 16 70 9241 41 26 56 83 40 80 70 3341 48 72 33 47 32 37 16 94 2953 71 44 65 25 43 91 52 97 51 1470 11 33 28 77 73 17 78 39 68 17 5791 71 52 38 17 14 91 43 58 50 27 29 4863 66 04 68 89 53 67 30 73 16 69 87 40 3104 62 98 27 23 09 70 98 73 93 38 53 60 04 23</code></pre><p><br>NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)<br></p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1074</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_sum</span><span class="params">(triangle)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_options</span><span class="params">(row, index)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> triangle[row+<span class="number">1</span>][index], triangle[row+<span class="number">1</span>][index+<span class="number">1</span>]</span><br><span class="line">    row = len(triangle) - <span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">for</span> index, node <span class="keyword">in</span> enumerate(triangle[row]):</span><br><span class="line">                best = max([node + option <span class="keyword">for</span> option <span class="keyword">in</span> get_options(row, index)])</span><br><span class="line">                triangle[row][index] = best</span><br><span class="line">            row -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> triangle[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    triangle_str = <span class="string">'''\</span></span><br><span class="line"><span class="string">    75</span></span><br><span class="line"><span class="string">    95 64</span></span><br><span class="line"><span class="string">    17 47 82</span></span><br><span class="line"><span class="string">    18 35 87 10</span></span><br><span class="line"><span class="string">    20 04 82 47 65</span></span><br><span class="line"><span class="string">    19 01 23 75 03 34</span></span><br><span class="line"><span class="string">    88 02 77 73 07 63 67</span></span><br><span class="line"><span class="string">    99 65 04 28 06 16 70 92</span></span><br><span class="line"><span class="string">    41 41 26 56 83 40 80 70 33</span></span><br><span class="line"><span class="string">    41 48 72 33 47 32 37 16 94 29</span></span><br><span class="line"><span class="string">    53 71 44 65 25 43 91 52 97 51 14</span></span><br><span class="line"><span class="string">    70 11 33 28 77 73 17 78 39 68 17 57</span></span><br><span class="line"><span class="string">    91 71 52 38 17 14 91 43 58 50 27 29 48</span></span><br><span class="line"><span class="string">    63 66 04 68 89 53 67 30 73 16 69 87 40 31</span></span><br><span class="line"><span class="string">    04 62 98 27 23 09 70 98 73 93 38 53 60 04 23'''</span></span><br><span class="line"></span><br><span class="line">    triangle = [[int(digit) <span class="keyword">for</span> digit <span class="keyword">in</span> line.strip().split()] <span class="keyword">for</span> line <span class="keyword">in</span> triangle_str.splitlines()]</span><br><span class="line">    print(find_sum(triangle))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">triangle_str = <span class="string">&lt;&lt;EOS</span></span><br><span class="line"><span class="string">75</span></span><br><span class="line"><span class="number">95</span> <span class="number">64</span></span><br><span class="line"><span class="number">17</span> <span class="number">47</span> <span class="number">82</span></span><br><span class="line"><span class="number">18</span> <span class="number">35</span> <span class="number">87</span> <span class="number">10</span></span><br><span class="line"><span class="number">20</span> <span class="number">04</span> <span class="number">82</span> <span class="number">47</span> <span class="number">65</span></span><br><span class="line"><span class="number">19</span> <span class="number">01</span> <span class="number">23</span> <span class="number">75</span> <span class="number">03</span> <span class="number">34</span></span><br><span class="line"><span class="number">88</span> <span class="number">02</span> <span class="number">77</span> <span class="number">73</span> <span class="number">07</span> <span class="number">63</span> <span class="number">67</span></span><br><span class="line"><span class="number">99</span> <span class="number">65</span> <span class="number">04</span> <span class="number">28</span> <span class="number">06</span> <span class="number">16</span> <span class="number">70</span> <span class="number">92</span></span><br><span class="line"><span class="number">41</span> <span class="number">41</span> <span class="number">26</span> <span class="number">56</span> <span class="number">83</span> <span class="number">40</span> <span class="number">80</span> <span class="number">70</span> <span class="number">33</span></span><br><span class="line"><span class="number">41</span> <span class="number">48</span> <span class="number">72</span> <span class="number">33</span> <span class="number">47</span> <span class="number">32</span> <span class="number">37</span> <span class="number">16</span> <span class="number">94</span> <span class="number">29</span></span><br><span class="line"><span class="number">53</span> <span class="number">71</span> <span class="number">44</span> <span class="number">65</span> <span class="number">25</span> <span class="number">43</span> <span class="number">91</span> <span class="number">52</span> <span class="number">97</span> <span class="number">51</span> <span class="number">14</span></span><br><span class="line"><span class="number">70</span> <span class="number">11</span> <span class="number">33</span> <span class="number">28</span> <span class="number">77</span> <span class="number">73</span> <span class="number">17</span> <span class="number">78</span> <span class="number">39</span> <span class="number">68</span> <span class="number">17</span> <span class="number">57</span></span><br><span class="line"><span class="number">91</span> <span class="number">71</span> <span class="number">52</span> <span class="number">38</span> <span class="number">17</span> <span class="number">14</span> <span class="number">91</span> <span class="number">43</span> <span class="number">58</span> <span class="number">50</span> <span class="number">27</span> <span class="number">29</span> <span class="number">48</span></span><br><span class="line"><span class="number">63</span> <span class="number">66</span> <span class="number">04</span> <span class="number">68</span> <span class="number">89</span> <span class="number">53</span> <span class="number">67</span> <span class="number">30</span> <span class="number">73</span> <span class="number">16</span> <span class="number">69</span> <span class="number">87</span> <span class="number">40</span> <span class="number">31</span></span><br><span class="line"><span class="number">04</span> <span class="number">62</span> <span class="number">98</span> <span class="number">27</span> <span class="number">23</span> 09 <span class="number">70</span> <span class="number">98</span> <span class="number">73</span> <span class="number">93</span> <span class="number">38</span> <span class="number">53</span> <span class="number">60</span> <span class="number">04</span> <span class="number">23</span></span><br><span class="line">EOS</span><br><span class="line"></span><br><span class="line">triangle = triangle_str.each_line.map &#123; <span class="params">|line|</span> line.split.map(&amp;<span class="symbol">:to_i</span>) &#125;</span><br><span class="line"></span><br><span class="line">(triangle.length - <span class="number">2</span>).downto(<span class="number">0</span>) <span class="keyword">do</span> <span class="params">|y|</span></span><br><span class="line">  triangle[y].length.times <span class="keyword">do</span> <span class="params">|x|</span> </span><br><span class="line">    triangle[y][x] += [triangle[y+<span class="number">1</span>][x], triangle[y+<span class="number">1</span>][x+<span class="number">1</span>]].max</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts triangle[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">parse</span> :: <span class="type">String</span> -&gt; [[<span class="type">Integer</span>]]</span><br><span class="line"><span class="title">parse</span> = map (map read . words) . lines</span><br><span class="line"></span><br><span class="line"><span class="title">best</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">best</span> row = map maximum choices <span class="keyword">where</span></span><br><span class="line">    choices = zipWith (\a b -&gt; a : [b]) row (tail row)</span><br><span class="line"></span><br><span class="line"><span class="title">maxStep</span> :: [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>] -&gt; [<span class="type">Integer</span>]</span><br><span class="line"><span class="title">maxStep</span> current next = zipWith (+) next (best current)</span><br><span class="line"></span><br><span class="line"><span class="title">maxPath</span> :: [[<span class="type">Integer</span>]] -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">maxPath</span> [[x]] = x</span><br><span class="line"><span class="title">maxPath</span> (current:next:rest) = maxPath $ (maxStep current next) : rest</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> :: <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">        str &lt;- readFile <span class="string">"/home/zach/code/euler/018/triangle.txt"</span></span><br><span class="line">        print $ maxPath $ reverse $ parse str</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p018</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p018().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We create a new blank triangle with the same dimensions as the original big triangle.</span></span><br><span class="line"><span class="comment"> * For each cell of the big triangle, we consider the sub-triangle whose top is at this cell,</span></span><br><span class="line"><span class="comment"> * calculate the maximum path sum when starting from this cell, and store the result</span></span><br><span class="line"><span class="comment"> * in the corresponding cell of the blank triangle.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * If we start at a particular cell, what is the maximum path total? If the cell is at the</span></span><br><span class="line"><span class="comment"> * bottom of the big triangle, then it is simply the cell's value. Otherwise the answer is</span></span><br><span class="line"><span class="comment"> * the cell's value plus either &#123;the maximum path total of the cell down and to the left&#125;</span></span><br><span class="line"><span class="comment"> * or &#123;the maximum path total of the cell down and to the right&#125;, whichever is greater.</span></span><br><span class="line"><span class="comment"> * By computing the blank triangle's values from bottom up, the dependent values are always</span></span><br><span class="line"><span class="comment"> * computed before they are utilized. This technique is known as dynamic programming.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = triangle.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; triangle[i].length; j++)</span><br><span class="line">triangle[i][j] += Math.max(triangle[i + <span class="number">1</span>][j], triangle[i + <span class="number">1</span>][j + <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(triangle[<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[][] triangle = &#123;  <span class="comment">// Mutable</span></span><br><span class="line">&#123;<span class="number">75</span>&#125;,</span><br><span class="line">&#123;<span class="number">95</span>,<span class="number">64</span>&#125;,</span><br><span class="line">&#123;<span class="number">17</span>,<span class="number">47</span>,<span class="number">82</span>&#125;,</span><br><span class="line">&#123;<span class="number">18</span>,<span class="number">35</span>,<span class="number">87</span>,<span class="number">10</span>&#125;,</span><br><span class="line">&#123;<span class="number">20</span>, <span class="number">4</span>,<span class="number">82</span>,<span class="number">47</span>,<span class="number">65</span>&#125;,</span><br><span class="line">&#123;<span class="number">19</span>, <span class="number">1</span>,<span class="number">23</span>,<span class="number">75</span>, <span class="number">3</span>,<span class="number">34</span>&#125;,</span><br><span class="line">&#123;<span class="number">88</span>, <span class="number">2</span>,<span class="number">77</span>,<span class="number">73</span>, <span class="number">7</span>,<span class="number">63</span>,<span class="number">67</span>&#125;,</span><br><span class="line">&#123;<span class="number">99</span>,<span class="number">65</span>, <span class="number">4</span>,<span class="number">28</span>, <span class="number">6</span>,<span class="number">16</span>,<span class="number">70</span>,<span class="number">92</span>&#125;,</span><br><span class="line">&#123;<span class="number">41</span>,<span class="number">41</span>,<span class="number">26</span>,<span class="number">56</span>,<span class="number">83</span>,<span class="number">40</span>,<span class="number">80</span>,<span class="number">70</span>,<span class="number">33</span>&#125;,</span><br><span class="line">&#123;<span class="number">41</span>,<span class="number">48</span>,<span class="number">72</span>,<span class="number">33</span>,<span class="number">47</span>,<span class="number">32</span>,<span class="number">37</span>,<span class="number">16</span>,<span class="number">94</span>,<span class="number">29</span>&#125;,</span><br><span class="line">&#123;<span class="number">53</span>,<span class="number">71</span>,<span class="number">44</span>,<span class="number">65</span>,<span class="number">25</span>,<span class="number">43</span>,<span class="number">91</span>,<span class="number">52</span>,<span class="number">97</span>,<span class="number">51</span>,<span class="number">14</span>&#125;,</span><br><span class="line">&#123;<span class="number">70</span>,<span class="number">11</span>,<span class="number">33</span>,<span class="number">28</span>,<span class="number">77</span>,<span class="number">73</span>,<span class="number">17</span>,<span class="number">78</span>,<span class="number">39</span>,<span class="number">68</span>,<span class="number">17</span>,<span class="number">57</span>&#125;,</span><br><span class="line">&#123;<span class="number">91</span>,<span class="number">71</span>,<span class="number">52</span>,<span class="number">38</span>,<span class="number">17</span>,<span class="number">14</span>,<span class="number">91</span>,<span class="number">43</span>,<span class="number">58</span>,<span class="number">50</span>,<span class="number">27</span>,<span class="number">29</span>,<span class="number">48</span>&#125;,</span><br><span class="line">&#123;<span class="number">63</span>,<span class="number">66</span>, <span class="number">4</span>,<span class="number">68</span>,<span class="number">89</span>,<span class="number">53</span>,<span class="number">67</span>,<span class="number">30</span>,<span class="number">73</span>,<span class="number">16</span>,<span class="number">69</span>,<span class="number">87</span>,<span class="number">40</span>,<span class="number">31</span>&#125;,</span><br><span class="line">&#123; <span class="number">4</span>,<span class="number">62</span>,<span class="number">98</span>,<span class="number">27</span>,<span class="number">23</span>, <span class="number">9</span>,<span class="number">70</span>,<span class="number">98</span>,<span class="number">73</span>,<span class="number">93</span>,<span class="number">38</span>,<span class="number">53</span>,<span class="number">60</span>, <span class="number">4</span>,<span class="number">23</span>&#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * If we start at a particular cell in the triangle, what is the maximum path total?</span></span><br><span class="line"><span class="comment"> * If the cell is in the bottom row, then it is simply the cell's value. Otherwise the answer</span></span><br><span class="line"><span class="comment"> * is the cell's value plus either &#123;the maximum path total of the cell down and to the left&#125;</span></span><br><span class="line"><span class="comment"> * or &#123;the maximum path total of the cell down and to the right&#125;, whichever is greater.</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line"></span><br><span class="line">triangle = &#123;</span><br><span class="line">  &#123;75&#125;,</span><br><span class="line">  &#123;95,64&#125;,</span><br><span class="line">  &#123;17,47,82&#125;,</span><br><span class="line">  &#123;18,35,87,10&#125;,</span><br><span class="line">  &#123;20,04,82,47,65&#125;,</span><br><span class="line">  &#123;19,01,23,75,03,34&#125;,</span><br><span class="line">  &#123;88,02,77,73,07,63,67&#125;,</span><br><span class="line">  &#123;99,65,04,28,06,16,70,92&#125;,</span><br><span class="line">  &#123;41,41,26,56,83,40,80,70,33&#125;,</span><br><span class="line">  &#123;41,48,72,33,47,32,37,16,94,29&#125;,</span><br><span class="line">  &#123;53,71,44,65,25,43,91,52,97,51,14&#125;,</span><br><span class="line">  &#123;70,11,33,28,77,73,17,78,39,68,17,57&#125;,</span><br><span class="line">  &#123;91,71,52,38,17,14,91,43,58,50,27,29,48&#125;,</span><br><span class="line">  &#123;63,66,04,68,89,53,67,30,73,16,69,87,40,31&#125;,</span><br><span class="line">  &#123;04,62,98,27,23,09,70,98,73,93,38,53,60,04,23&#125;&#125;;</span><br><span class="line"></span><br><span class="line">MaxPath[i_, j_] := triangle[[i, j]] +</span><br><span class="line">  <span class="keyword">If</span>[i &lt; <span class="keyword">Length</span>[triangle], <span class="keyword">Max</span>[MaxPath[i + <span class="number">1</span>, j], MaxPath[i + <span class="number">1</span>, j + <span class="number">1</span>]], <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">MaxPath[<span class="number">1</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;&lt;br&gt;By starting at the top of the triangle below a
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 008</title>
    <link href="onlookerliu.github.io/2018/03/12/LeetCode-Notes-008/"/>
    <id>onlookerliu.github.io/2018/03/12/LeetCode-Notes-008/</id>
    <published>2018-03-12T13:43:39.000Z</published>
    <updated>2018-03-19T16:22:16.687Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Binary-Tree-Level-Order-Traversal"><a href="#Binary-Tree-Level-Order-Traversal" class="headerlink" title="Binary Tree Level Order Traversal"></a>Binary Tree Level Order Traversal</h3><p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [3],</span><br><span class="line">  [9,20],</span><br><span class="line">  [15,7]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrder = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ans = []</span><br><span class="line">    , tmp = [root];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (tmp.length) &#123;</span><br><span class="line">    <span class="keyword">var</span> res = []</span><br><span class="line">      , a = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = tmp.length; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!tmp[i]) <span class="keyword">continue</span>;</span><br><span class="line">      res.push(tmp[i].val);</span><br><span class="line">      a.push(tmp[i].left);</span><br><span class="line">      a.push(tmp[i].right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tmp = a.concat();</span><br><span class="line">    <span class="keyword">if</span> (res.length)</span><br><span class="line">      ans.push(res);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Binary-Tree-Level-Order-Traversal-II"><a href="#Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="Binary Tree Level Order Traversal II"></a>Binary Tree Level Order Traversal II</h3><p>Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).</p><p>For example:<br>Given binary tree [3,9,20,null,null,15,7],<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3</span><br><span class="line"> / \</span><br><span class="line">9  20</span><br><span class="line">  /  \</span><br><span class="line"> 15   7</span><br></pre></td></tr></table></figure></p><p>return its bottom-up level order traversal as:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  [15,7],</span><br><span class="line">  [9,20],</span><br><span class="line">  [3]</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> levelOrderBottom = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!root) <span class="keyword">return</span> [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ans = [], tmp = [root];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (tmp.length) &#123;</span><br><span class="line">  <span class="keyword">var</span> res = [], _tmp = [];</span><br><span class="line"></span><br><span class="line">  tmp.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  res.push(item.val);</span><br><span class="line">  <span class="keyword">if</span> (item.left)</span><br><span class="line">  _tmp.push(item.left);</span><br><span class="line">  <span class="keyword">if</span> (item.right)</span><br><span class="line">  _tmp.push(item.right);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  ans.push(res);</span><br><span class="line">  tmp = _tmp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans.reverse();</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Binary-Tree-Paths"><a href="#Binary-Tree-Paths" class="headerlink" title="Binary Tree Paths"></a>Binary Tree Paths</h3><p>Given a binary tree, return all root-to-leaf paths.</p><p>For example, given the following binary tree:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   1</span><br><span class="line"> /   \</span><br><span class="line">2     3</span><br><span class="line"> \</span><br><span class="line">  5</span><br></pre></td></tr></table></figure></p><p>All root-to-leaf paths are:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&quot;1-&gt;2-&gt;5&quot;, &quot;1-&gt;3&quot;]</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * function TreeNode(val) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = val;</span></span><br><span class="line"><span class="comment"> *     this.left = this.right = null;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;TreeNode&#125; root</span></span><br><span class="line"><span class="comment"> * @return &#123;string[]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ans, res;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!root) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  res.push(root.val);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!root.left &amp;&amp; !root.right) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = res.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre, item</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> pre + <span class="string">'-&gt;'</span> + item;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    str = str.toString();</span><br><span class="line"></span><br><span class="line">    ans.push(str);</span><br><span class="line">    res.pop();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (root.left) </span><br><span class="line">    dfs(root.left);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (root.right)</span><br><span class="line">    dfs(root.right);</span><br><span class="line"></span><br><span class="line">  res.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> binaryTreePaths = <span class="function"><span class="keyword">function</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">  ans = [], res = [];</span><br><span class="line">  dfs(root);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Binary-Tree-Level-Order-Traversal&quot;&gt;&lt;a href=&quot;#Binary-Tree-Level-Order-Traversal&quot; class=&quot;headerlink&quot; title=&quot;Binary Tree Level Order Tr
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-017</title>
    <link href="onlookerliu.github.io/2018/03/12/Project-Euler-017/"/>
    <id>onlookerliu.github.io/2018/03/12/Project-Euler-017/</id>
    <published>2018-03-12T07:57:40.000Z</published>
    <updated>2018-03-19T08:41:25.811Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><br>If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are $3 + 3 + 5 + 4 + 4 = 19$ letters used in total.<br></p><p><br>If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?<br></p><p><br>NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of “and” when writing out numbers is in compliance with British usage.<br></p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21124</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_english</span><span class="params">(number)</span>:</span></span><br><span class="line">    _ones = &#123;</span><br><span class="line">            <span class="number">1</span>: <span class="string">'one'</span>,</span><br><span class="line">            <span class="number">2</span>: <span class="string">'two'</span>,</span><br><span class="line">            <span class="number">3</span>: <span class="string">'three'</span>,</span><br><span class="line">            <span class="number">4</span>: <span class="string">'four'</span>,</span><br><span class="line">            <span class="number">5</span>: <span class="string">'five'</span>,</span><br><span class="line">            <span class="number">6</span>: <span class="string">'six'</span>,</span><br><span class="line">            <span class="number">7</span>: <span class="string">'seven'</span>,</span><br><span class="line">            <span class="number">8</span>: <span class="string">'eight'</span>,</span><br><span class="line">            <span class="number">9</span>: <span class="string">'nine'</span>,</span><br><span class="line">            <span class="number">10</span>: <span class="string">'ten'</span>,</span><br><span class="line">            <span class="number">11</span>: <span class="string">'eleven'</span>,</span><br><span class="line">            <span class="number">12</span>: <span class="string">'twelve'</span>,</span><br><span class="line">            <span class="number">13</span>: <span class="string">'thirteen'</span>,</span><br><span class="line">            <span class="number">14</span>: <span class="string">'fourteen'</span>,</span><br><span class="line">            <span class="number">15</span>: <span class="string">'fifteen'</span>,</span><br><span class="line">            <span class="number">16</span>: <span class="string">'sixteen'</span>,</span><br><span class="line">            <span class="number">17</span>: <span class="string">'seventeen'</span>,</span><br><span class="line">            <span class="number">18</span>: <span class="string">'eighteen'</span>,</span><br><span class="line">            <span class="number">19</span>: <span class="string">'nineteen'</span>,</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    _tens = &#123;</span><br><span class="line">            <span class="number">2</span>: <span class="string">'twenty'</span>,</span><br><span class="line">            <span class="number">3</span>: <span class="string">'thirty'</span>,</span><br><span class="line">            <span class="number">4</span>: <span class="string">'forty'</span>,</span><br><span class="line">            <span class="number">5</span>: <span class="string">'fifty'</span>,</span><br><span class="line">            <span class="number">6</span>: <span class="string">'sixty'</span>,</span><br><span class="line">            <span class="number">7</span>: <span class="string">'seventy'</span>,</span><br><span class="line">            <span class="number">8</span>: <span class="string">'eighty'</span>,</span><br><span class="line">            <span class="number">9</span>: <span class="string">'ninety'</span></span><br><span class="line">            &#125;</span><br><span class="line">    <span class="keyword">if</span> abs(number) &gt;= <span class="number">10000</span>:</span><br><span class="line">        <span class="keyword">return</span> str(number)</span><br><span class="line">    <span class="keyword">elif</span> number == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'zero'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        output = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> number &lt; <span class="number">0</span>:</span><br><span class="line">            output += <span class="string">'negative '</span></span><br><span class="line">            number = abs(number)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> number &gt;= <span class="number">1000</span>:</span><br><span class="line">            output += _ones[number // <span class="number">1000</span>]</span><br><span class="line">            <span class="keyword">if</span> number % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">                output += <span class="string">" thousand"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                output += <span class="string">" thousand "</span></span><br><span class="line">            number %= <span class="number">1000</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> number &gt;= <span class="number">100</span>:</span><br><span class="line">            output += _ones[number // <span class="number">100</span>]</span><br><span class="line">            <span class="keyword">if</span> number % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                output += <span class="string">" hundred"</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                output += <span class="string">" hundred and "</span></span><br><span class="line">            number %= <span class="number">100</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> number &gt;= <span class="number">20</span>:</span><br><span class="line">            output += _tens[number // <span class="number">10</span>]</span><br><span class="line">            number %= <span class="number">10</span></span><br><span class="line">            <span class="keyword">if</span> number % <span class="number">10</span> <span class="keyword">in</span> _ones:</span><br><span class="line">                output += <span class="string">'-'</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> number <span class="keyword">in</span> _ones:</span><br><span class="line">            output += _ones[number]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> output</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cleanse_string</span><span class="params">(string)</span>:</span></span><br><span class="line">    <span class="string">'''remove spaces and hyphens'''</span></span><br><span class="line">    string = string.replace(<span class="string">' '</span>, <span class="string">''</span>)</span><br><span class="line">    string = string.replace(<span class="string">'-'</span>, <span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line">print(sum(len(cleanse_string(to_english(i))) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1001</span>)))</span><br></pre></td></tr></table></figure></p><hr><p>JavaScript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ones = &#123;</span><br><span class="line">  <span class="number">1</span>: <span class="string">'one'</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">'two'</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">'three'</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="string">'four'</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">'five'</span>,</span><br><span class="line">  <span class="number">6</span>: <span class="string">'six'</span>,</span><br><span class="line">  <span class="number">7</span>: <span class="string">'seven'</span>,</span><br><span class="line">  <span class="number">8</span>: <span class="string">'eight'</span>,</span><br><span class="line">  <span class="number">9</span>: <span class="string">'nine'</span>,</span><br><span class="line">  <span class="number">10</span>: <span class="string">'ten'</span>,</span><br><span class="line">  <span class="number">11</span>: <span class="string">'eleven'</span>,</span><br><span class="line">  <span class="number">12</span>: <span class="string">'twelve'</span>,</span><br><span class="line">  <span class="number">13</span>: <span class="string">'thirteen'</span>,</span><br><span class="line">  <span class="number">14</span>: <span class="string">'fourteen'</span>,</span><br><span class="line">  <span class="number">15</span>: <span class="string">'fifteen'</span>,</span><br><span class="line">  <span class="number">16</span>: <span class="string">'sixteen'</span>,</span><br><span class="line">  <span class="number">17</span>: <span class="string">'seventeen'</span>,</span><br><span class="line">  <span class="number">18</span>: <span class="string">'eighteen'</span>,</span><br><span class="line">  <span class="number">19</span>: <span class="string">'nineteen'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> tens = &#123;</span><br><span class="line">  <span class="number">2</span>: <span class="string">'twenty'</span>,</span><br><span class="line">  <span class="number">3</span>: <span class="string">'thirty'</span>,</span><br><span class="line">  <span class="number">4</span>: <span class="string">'forty'</span>,</span><br><span class="line">  <span class="number">5</span>: <span class="string">'fifty'</span>,</span><br><span class="line">  <span class="number">6</span>: <span class="string">'sixty'</span>,</span><br><span class="line">  <span class="number">7</span>: <span class="string">'seventy'</span>,</span><br><span class="line">  <span class="number">8</span>: <span class="string">'eighty'</span>,</span><br><span class="line">  <span class="number">9</span>: <span class="string">'ninety'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">english</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> parts = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (number &gt;= <span class="number">1000</span>) &#123;</span><br><span class="line">    parts.push(ones[<span class="built_in">Math</span>.floor(number / <span class="number">1000</span>)])</span><br><span class="line">    parts.push(<span class="string">"thousand"</span>)</span><br><span class="line">    number %= <span class="number">1000</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (number &gt;= <span class="number">100</span>) &#123;</span><br><span class="line">    parts.push(ones[<span class="built_in">Math</span>.floor(number / <span class="number">100</span>)])</span><br><span class="line">    parts.push(<span class="string">"hundred"</span>)</span><br><span class="line">    <span class="keyword">if</span> (number % <span class="number">100</span> !== <span class="number">0</span>) &#123;</span><br><span class="line">      parts.push(<span class="string">"and"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    number %= <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (number &gt;= <span class="number">20</span>) &#123;</span><br><span class="line">    parts.push(tens[<span class="built_in">Math</span>.floor(number / <span class="number">10</span>)])</span><br><span class="line">    number %= <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (ones[number]) &#123;</span><br><span class="line">    parts.push(ones[number])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> parts.join(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> words = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  words.push(english(i))</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(words.join(<span class="string">""</span>).length)</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"><span class="keyword">require</span> <span class="string">'linguistics'</span> <span class="comment"># gem install linguistics</span></span><br><span class="line">Linguistics::use( <span class="symbol">:en</span> )</span><br><span class="line">puts (<span class="number">1</span>..<span class="number">1000</span>).map &#123; <span class="params">|i|</span> i.en.numwords.gsub(<span class="regexp">/[ -]/</span>, <span class="string">''</span>).length &#125;.reduce(<span class="symbol">:+</span>)</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p017</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p017().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * - For the numbers 0 to 19, we write the single word:</span></span><br><span class="line"><span class="comment"> *   &#123;zero, one, two, three, four, five, six, seven, eight, nine,</span></span><br><span class="line"><span class="comment"> *   ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen&#125;.</span></span><br><span class="line"><span class="comment"> * - For the numbers 20 to 99, we write the word for the tens place:</span></span><br><span class="line"><span class="comment"> *   &#123;twenty, thirty, forty, fifty, sixty, seventy, eighty, ninety&#125;.</span></span><br><span class="line"><span class="comment"> *   Subsequently if the last digit is not 0, then we write the word for the ones place (one to nine).</span></span><br><span class="line"><span class="comment"> * - For the numbers 100 to 999, we write the ones word for the hundreds place followed by "hundred":</span></span><br><span class="line"><span class="comment"> *   &#123;one hundred, two hundred, three hundred, ..., eight hundred, nine hundred&#125;.</span></span><br><span class="line"><span class="comment"> *   Subsequently if the last two digits are not 00, then we write the word "and"</span></span><br><span class="line"><span class="comment"> *   followed by the phrase for the last two digits (from 01 to 99).</span></span><br><span class="line"><span class="comment"> * - For the numbers 1000 to 999999, we write the word for the three digits starting at the</span></span><br><span class="line"><span class="comment"> *   thousands place and going leftward, followed by "thousand". Subsequently if the last three</span></span><br><span class="line"><span class="comment"> *   digits are not 000, then we write the phrase for the last three digits (from 001 to 999).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++)</span><br><span class="line">sum += toEnglish(i).length();</span><br><span class="line"><span class="keyword">return</span> Integer.toString(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">toEnglish</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> &lt;= n &amp;&amp; n &lt; <span class="number">20</span>)</span><br><span class="line"><span class="keyword">return</span> ONES[n];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">20</span> &lt;= n &amp;&amp; n &lt; <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> TENS[n / <span class="number">10</span>] + (n % <span class="number">10</span> != <span class="number">0</span> ? ONES[n % <span class="number">10</span>] : <span class="string">""</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">100</span> &lt;= n &amp;&amp; n &lt; <span class="number">1000</span>)</span><br><span class="line"><span class="keyword">return</span> ONES[n / <span class="number">100</span>] + <span class="string">"hundred"</span> + (n % <span class="number">100</span> != <span class="number">0</span> ? <span class="string">"and"</span> + toEnglish(n % <span class="number">100</span>) : <span class="string">""</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (<span class="number">1000</span> &lt;= n &amp;&amp; n &lt; <span class="number">1000000</span>)</span><br><span class="line"><span class="keyword">return</span> toEnglish(n / <span class="number">1000</span>) + <span class="string">"thousand"</span> + (n % <span class="number">1000</span> != <span class="number">0</span> ? toEnglish(n % <span class="number">1000</span>) : <span class="string">""</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String[] ONES = &#123;</span><br><span class="line"><span class="string">"zero"</span>, <span class="string">"one"</span>, <span class="string">"two"</span>, <span class="string">"three"</span>, <span class="string">"four"</span>, <span class="string">"five"</span>, <span class="string">"six"</span>, <span class="string">"seven"</span>, <span class="string">"eight"</span>, <span class="string">"nine"</span>,</span><br><span class="line"><span class="string">"ten"</span>, <span class="string">"eleven"</span>, <span class="string">"twelve"</span>, <span class="string">"thirteen"</span>, <span class="string">"fourteen"</span>, <span class="string">"fifteen"</span>, <span class="string">"sixteen"</span>, <span class="string">"seventeen"</span>, <span class="string">"eighteen"</span>, <span class="string">"nineteen"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String[] TENS = &#123;</span><br><span class="line"><span class="string">""</span>, <span class="string">""</span>, <span class="string">"twenty"</span>, <span class="string">"thirty"</span>, <span class="string">"forty"</span>, <span class="string">"fifty"</span>, <span class="string">"sixty"</span>, <span class="string">"seventy"</span>, <span class="string">"eighty"</span>, <span class="string">"ninety"</span>&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * - For the numbers 0 to 19, we write the single word:</span></span><br><span class="line"><span class="comment"> *   &#123;zero, one, two, three, four, five, six, seven, eight, nine,</span></span><br><span class="line"><span class="comment"> *   ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen&#125;.</span></span><br><span class="line"><span class="comment"> * - For the numbers 20 to 99, we write the word for the tens place:</span></span><br><span class="line"><span class="comment"> *   &#123;twenty, thirty, forty, fifty, sixty, seventy, eighty, ninety&#125;.</span></span><br><span class="line"><span class="comment"> *   Subsequently if the last digit is not 0, then we write the word for the ones place (one to nine).</span></span><br><span class="line"><span class="comment"> * - For the numbers 100 to 999, we write the ones word for the hundreds place followed by "hundred":</span></span><br><span class="line"><span class="comment"> *   &#123;one hundred, two hundred, three hundred, ..., eight hundred, nine hundred&#125;.</span></span><br><span class="line"><span class="comment"> *   Subsequently if the last two digits are not 00, then we write the word "and"</span></span><br><span class="line"><span class="comment"> *   followed by the phrase for the last two digits (from 01 to 99).</span></span><br><span class="line"><span class="comment"> * - For the numbers 1000 to 999999, we write the word for the three digits starting at the</span></span><br><span class="line"><span class="comment"> *   thousands place and going leftward, followed by "thousand". Subsequently if the last three</span></span><br><span class="line"><span class="comment"> *   digits are not 000, then we write the phrase for the last three digits (from 001 to 999).</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line"></span><br><span class="line">ones = &#123;"one", "two", "three", "four", "five", "six", "seven", "eight", "nine",</span><br><span class="line">        "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"&#125;;</span><br><span class="line">tens = &#123;"", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"&#125;;</span><br><span class="line"></span><br><span class="line">ToEnglish[n_] := <span class="keyword">Piecewise</span>[&#123;</span><br><span class="line">  &#123;"zero",</span><br><span class="line">    n == 0&#125;,</span><br><span class="line">  &#123;ones[[n]],</span><br><span class="line">    1 &lt;= n &lt; 20&#125;,</span><br><span class="line">  &#123;tens[[Floor[n / 10]]] &lt;&gt; If[Mod[n, 10] != 0, ones[[Mod[n, 10]]], ""],</span><br><span class="line">    20 &lt;= n &lt; 100&#125;,</span><br><span class="line">  &#123;ones[[Floor[n / 100]]] &lt;&gt; "hundred" &lt;&gt; If[Mod[n, 100] != 0, "and" &lt;&gt; ToEnglish[Mod[n, 100]], ""],</span><br><span class="line">    100 &lt;= n &lt; 1000&#125;,</span><br><span class="line">  &#123;ToEnglish[Floor[n / 1000]] &lt;&gt; "thousand" &lt;&gt; If[Mod[n, 1000] != 0, ToEnglish[Mod[n, 1000]], ""],</span><br><span class="line">    1000 &lt;= n &lt; 1000000&#125;&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">Sum</span>[<span class="keyword">StringLength</span>[ToEnglish[n]], &#123;n, 1000&#125;]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;&lt;br&gt;If the numbers 1 to 5 are written out in words
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-016</title>
    <link href="onlookerliu.github.io/2018/03/11/Project-Euler-016/"/>
    <id>onlookerliu.github.io/2018/03/11/Project-Euler-016/</id>
    <published>2018-03-11T07:50:31.000Z</published>
    <updated>2018-03-19T07:54:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><br>$2^{15} = 32768$ and the sum of its digits is $3 + 2 + 7 + 6 + 8 = 26$.<br></p><p><br>What is the sum of the digits of the number $2^{1000}$?<br></p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1366</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">print(sum(int(digit) <span class="keyword">for</span> digit <span class="keyword">in</span> str(<span class="number">2</span>**<span class="number">1000</span>)))</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">puts (<span class="number">2</span>**<span class="number">1000</span>).to_s.each_char.inject(<span class="number">0</span>) &#123;<span class="params">|s,v|</span> s+v.to_i&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">sumDigits</span> ::  <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">sumDigits</span> n = sumDigits' n <span class="number">0</span></span><br><span class="line">    <span class="keyword">where</span> sumDigits' <span class="number">0</span> acc = acc</span><br><span class="line">          sumDigits' n acc = sumDigits' (div n <span class="number">10</span>) (acc + (mod n <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> ::  <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ sumDigits $ <span class="number">2</span>^<span class="number">1000</span></span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p016</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p016().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We implement this solution in a straightforward way with help from BigInteger.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String temp = BigInteger.ONE.shiftLeft(<span class="number">1000</span>).toString();</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.length(); i++)</span><br><span class="line">sum += temp.charAt(i) - <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">(* </span></span><br><span class="line"><span class="comment"> * We implement this solution in a straightforward way thanks to</span></span><br><span class="line"><span class="comment"> * Mathematica's built-in functions and arbitrary precision integer type.</span></span><br><span class="line"><span class="comment"> *)</span></span><br><span class="line"><span class="keyword">Total</span>[<span class="keyword">IntegerDigits</span>[<span class="number">2</span>^<span class="number">1000</span>]]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;&lt;br&gt;$2^{15} = 32768$ and the sum of its digits is 
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-015</title>
    <link href="onlookerliu.github.io/2018/03/10/Project-Euler-015/"/>
    <id>onlookerliu.github.io/2018/03/10/Project-Euler-015/</id>
    <published>2018-03-10T07:44:16.000Z</published>
    <updated>2018-03-19T08:41:46.561Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p><br>Starting in the top left corner of a 2x2 grid, there are 6 routes (without backtracking) to the bottom right corner.<br></p><div style="text-align: center;"><br><img src="http://projecteuler.net/project/images/p015.gif"><br></div><p><br>How many routes are there through a 20x20 grid?<br></p><p>The grid can be expressed as <a href="http://en.wikipedia.org/wiki/Pascal&#39;s_triangle" target="_blank" rel="noopener">Pascal’s Triangle</a>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">1 1</span><br><span class="line">1 (2) 1</span><br><span class="line">1 3 3 1</span><br><span class="line">1 4 (6) 4 1</span><br><span class="line">1 5 10 10 5 1</span><br><span class="line">1 6 15 (20) 15 6 1</span><br></pre></td></tr></table></figure><p>Note that the solution for a 1x1 grid is 2, a 2x2 grid is 6, and a 3x3 grid is 20.</p><p>If we compare these solutions to Pascal’s Triangle, we see that they correspond to<br>the 1st element in the 2nd row, the 2nd element in the 4th row, and the 3rd element<br>in the 6th row, respectively. (Note that Pascal’s Triangle is zero-indexed.)</p><p>The <a href="http://en.wikipedia.org/wiki/Binomial_coefficient" target="_blank" rel="noopener">binomial coefficient</a><br>$\binom {n} {k}$ can be used to determine the $k$th element in the<br>$n$th row of Pascal’s Triangle. Thus, we could express the aforementioned solutions as<br>$\binom {2} {1}$, $\binom {4} {2}$, and $\binom {6} {3}$, respectively.</p><p>Thus, a general solution for grids of size $x$ is </p><p>$$routes = \binom {2x} {x}$$.</p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">137846528820</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> comb</span><br><span class="line">print(comb(<span class="number">2</span> * <span class="number">20</span>,<span class="number">20</span>))</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Integer</span> </span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">choose</span><span class="params">(k)</span></span> </span><br><span class="line">    (<span class="keyword">self</span>-k+<span class="number">1</span> .. <span class="keyword">self</span>).inject(<span class="number">1</span>, &amp;<span class="symbol">:*</span>) / (<span class="number">2</span> .. k).inject(<span class="number">1</span>, &amp;<span class="symbol">:*</span>) </span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts <span class="number">40</span>.choose(<span class="number">20</span>)</span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line"><span class="comment">; compute pascal's triangle</span></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> ** [x n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">.</span></span> (<span class="name"><span class="builtin-name">.</span></span> java.math.BigInteger (<span class="name">valueOf</span> x)) (<span class="name">pow</span> n)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> pascal [n k]</span><br><span class="line">  (<span class="name"><span class="builtin-name">cond</span></span> </span><br><span class="line">    (<span class="name"><span class="builtin-name">=</span></span> k n) <span class="number">1</span></span><br><span class="line">    (<span class="name"><span class="builtin-name">or</span></span> (<span class="name"><span class="builtin-name">&lt;</span></span> n <span class="number">0</span>) (<span class="name"><span class="builtin-name">&lt;</span></span> k <span class="number">0</span>)) <span class="number">0</span></span><br><span class="line">    <span class="symbol">:else</span> </span><br><span class="line">    (<span class="name"><span class="builtin-name">+</span></span></span><br><span class="line">      (<span class="name">pascal</span> (<span class="name"><span class="builtin-name">-</span></span> n <span class="number">1</span>) (<span class="name"><span class="builtin-name">-</span></span> k <span class="number">1</span>))</span><br><span class="line">      (<span class="name">pascal</span> (<span class="name"><span class="builtin-name">-</span></span> n <span class="number">1</span>) k))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> pascal-row [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name">pascal</span> n %) (<span class="name"><span class="builtin-name">range</span></span> (<span class="name"><span class="builtin-name">+</span></span> n <span class="number">1</span>))))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> pascal-triangle [num-rows]</span><br><span class="line">  (<span class="name"><span class="builtin-name">map</span></span> #(<span class="name">pascal-row</span> %) (<span class="name"><span class="builtin-name">range</span></span> num-rows)))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">dorun</span></span> (<span class="name"><span class="builtin-name">map</span></span> println (<span class="name">pascal-triangle</span> <span class="number">10</span>)))</span><br><span class="line">(<span class="name">println</span> (<span class="name">pascal</span> <span class="number">5</span> <span class="number">3</span>))</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">factorial</span> ::  <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">factorial</span> n = product [<span class="number">1.</span>.n]</span><br><span class="line"></span><br><span class="line"><span class="title">choose</span> ::  <span class="type">Integer</span> -&gt; <span class="type">Integer</span> -&gt; <span class="type">Integer</span></span><br><span class="line"><span class="title">choose</span> n k = div (factorial n) $ factorial k * factorial (n - k)</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> ::  <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ choose <span class="number">40</span> <span class="number">20</span></span><br></pre></td></tr></table></figure></p><hr><p>Java<br>``java<br>import java.math.BigInteger;</p><p>public final class p016 implements EulerSolution {</p><pre><code>public static void main(String[] args) {    System.out.println(new p016().run());}/*  * We implement this solution in a straightforward way with help from BigInteger. */public String run() {    String temp = BigInteger.ONE.shiftLeft(1000).toString();    int sum = 0;    for (int i = 0; i &lt; temp.length(); i++)        sum += temp.charAt(i) - &apos;0&apos;;    return Integer.toString(sum);}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">________</span><br><span class="line">Mathematica</span><br><span class="line">```mathematica</span><br><span class="line">(* </span><br><span class="line"> * We implement this solution in a straightforward way thanks to</span><br><span class="line"> * Mathematica&apos;s built-in functions and arbitrary precision integer type.</span><br><span class="line"> *)</span><br><span class="line">Total[IntegerDigits[2^1000]]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;&lt;br&gt;Starting in the top left corner of a 2x2 grid,
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>Project-Euler-014</title>
    <link href="onlookerliu.github.io/2018/03/09/Project-Euler-014/"/>
    <id>onlookerliu.github.io/2018/03/09/Project-Euler-014/</id>
    <published>2018-03-09T07:34:24.000Z</published>
    <updated>2018-03-19T07:40:59.984Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h3><p>The following iterative sequence is defined for the set of positive integers:</p><p>$$n \rightarrow<br>\begin{cases}<br>\tfrac{n}{2} &amp; \text{if } n \text{ is even} \<br>3n+1 &amp; \text{if } n \text{ is odd}<br>\end{cases}$$</p><p>Using the rule above and starting with 13, we generate the following sequence:</p><p>$$13, 40, 20, 10, 5, 16, 8, 4, 2, 1$$</p><p>It can be seen that this sequence (starting at 13 and finishing at 1) contains 10<br>terms. Although it has not been proved yet (Collatz Problem), it is thought that all<br>starting numbers finish at 1.</p><p>Which starting number, under one million, produces the longest chain?</p><p>NOTE: Once the chain starts the terms are allowed to go above one million.</p><h3 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">837799</span><br></pre></td></tr></table></figure><hr><p>Python<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">next_collatz</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> n / <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>*n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">collatz</span><span class="params">(start)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"start must be greater than or equal to 1"</span>)</span><br><span class="line">    <span class="keyword">elif</span> start == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> [<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    res = [start]</span><br><span class="line">    done = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">        res += [next_collatz(res[<span class="number">-1</span>])]</span><br><span class="line">        <span class="keyword">if</span> res[<span class="number">-1</span>] == <span class="number">1</span>: done = <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">_collatz_cache = &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lencollatz</span><span class="params">(start)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> start &lt; <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">"start must be greater than or equal to 1"</span>)</span><br><span class="line">    <span class="keyword">elif</span> start == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    n = start</span><br><span class="line">    length = <span class="number">1</span></span><br><span class="line">    done = <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> done:</span><br><span class="line">        n = next_collatz(n)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            length += _collatz_cache[n]</span><br><span class="line">            done = <span class="keyword">True</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> n == <span class="number">1</span>: done = <span class="keyword">True</span></span><br><span class="line">    _collatz_cache[start] = length</span><br><span class="line">    <span class="keyword">return</span> length</span><br><span class="line"></span><br><span class="line">max_len = <span class="number">0</span></span><br><span class="line">max_i = <span class="keyword">None</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">1000000</span>):</span><br><span class="line">    l = lencollatz(i)</span><br><span class="line">    <span class="keyword">if</span> l &gt; max_len:</span><br><span class="line">        max_len = l</span><br><span class="line">        max_i = i</span><br><span class="line">print(max_i)</span><br></pre></td></tr></table></figure></p><hr><p>Ruby<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line"></span><br><span class="line">max_l = <span class="number">0</span></span><br><span class="line">max_i = <span class="number">0</span></span><br><span class="line"><span class="number">500001</span>.step(<span class="number">1000000</span>, <span class="number">2</span>).each <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  l = <span class="number">0</span></span><br><span class="line">  j = i</span><br><span class="line">  <span class="keyword">while</span> j != <span class="number">1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> j.even?</span><br><span class="line">      j /= <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      j = <span class="number">3</span> * j + <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    l += <span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> l &gt; max_l</span><br><span class="line">    max_l = l</span><br><span class="line">    max_i = i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">puts max_i</span><br></pre></td></tr></table></figure></p><hr><p>Haskell<br><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Data.Word</span><br><span class="line"><span class="keyword">import</span> Data.Array</span><br><span class="line"></span><br><span class="line"><span class="title">memoCollatz</span> :: <span class="type">Array</span> <span class="type">Word</span> <span class="type">Word</span></span><br><span class="line"><span class="title">memoCollatz</span> = listArray (<span class="number">1</span>, size) $ map collatz [<span class="number">1.</span>.size]</span><br><span class="line">    <span class="keyword">where</span> size = <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line"><span class="title">collatz</span> :: <span class="type">Word</span> -&gt; <span class="type">Word</span></span><br><span class="line"><span class="title">collatz</span> <span class="number">1</span> = <span class="number">1</span></span><br><span class="line"><span class="title">collatz</span> n | inRange (bounds memoCollatz) next = <span class="number">1</span> + memoCollatz ! next</span><br><span class="line">          | otherwise = <span class="number">1</span> + collatz next</span><br><span class="line">          <span class="keyword">where</span> next = <span class="keyword">case</span> n <span class="keyword">of</span></span><br><span class="line">                           <span class="number">1</span> -&gt; <span class="number">1</span></span><br><span class="line">                           n | even n -&gt; n `div` <span class="number">2</span></span><br><span class="line">                             | otherwise -&gt; <span class="number">3</span> * n + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = print $ snd $ maximum $ map (\n -&gt; (collatz n, n)) [<span class="number">1.</span><span class="number">.1000000</span>]</span><br></pre></td></tr></table></figure></p><hr><p>Clojure<br><figure class="highlight clj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> collatz [start]</span><br><span class="line">  (<span class="name"><span class="builtin-name">defn</span></span> next-collatz [n]</span><br><span class="line">    (<span class="name"><span class="builtin-name">if</span></span> (<span class="name"><span class="builtin-name">even?</span></span> n)</span><br><span class="line">      (/ n <span class="number">2</span>)</span><br><span class="line">      (<span class="name"><span class="builtin-name">+</span></span> (<span class="name"><span class="builtin-name">*</span></span> <span class="number">3</span> n) <span class="number">1</span>)))</span><br><span class="line">  (<span class="name"><span class="builtin-name">def</span></span> memo-collatz</span><br><span class="line">    (<span class="name"><span class="builtin-name">memoize</span></span> next-collatz))</span><br><span class="line">  (<span class="name"><span class="builtin-name">defn</span></span> not-one? [n]</span><br><span class="line">    (<span class="name"><span class="builtin-name">not</span></span> (<span class="name"><span class="builtin-name">=</span></span> n <span class="number">1</span>)))</span><br><span class="line">  (<span class="name"><span class="builtin-name">concat</span></span> (<span class="name"><span class="builtin-name">take-while</span></span> not-one? (<span class="name"><span class="builtin-name">iterate</span></span> next-collatz start)) [<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> collatz-seqs [limit]</span><br><span class="line">  (<span class="name"><span class="builtin-name">map</span></span> collatz (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1</span> limit)))</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">apply</span></span> max-key count (<span class="name">collatz-seqs</span> <span class="number">100000</span>)))</span><br></pre></td></tr></table></figure></p><hr><p>C<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">next_collatz</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> n / <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> * n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">lencollatz</span><span class="params">(<span class="keyword">long</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (start == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">long</span> n = start;</span><br><span class="line">    <span class="keyword">long</span> length = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n != <span class="number">1</span>) &#123;</span><br><span class="line">        n = next_collatz(n);</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> max_l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> max_i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">1</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">long</span> l = lencollatz(i);</span><br><span class="line">        <span class="keyword">if</span> (l &gt; max_l) &#123;</span><br><span class="line">            max_l = l;</span><br><span class="line">            max_i = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%ld\n"</span>, max_i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p014</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p014().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * We compute the Collatz chain length for every integer in the range according to the iteration rule.</span></span><br><span class="line"><span class="comment"> * Also, we cache the Collatz value for small integer arguments to speed up the computation.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> LIMIT = Library.pow(<span class="number">10</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> maxArg = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> maxChain = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; LIMIT; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> chainLen = collatzChainLength(BigInteger.valueOf(i));</span><br><span class="line"><span class="keyword">if</span> (chainLen &gt; maxChain) &#123;</span><br><span class="line">maxArg = i;</span><br><span class="line">maxChain = chainLen;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(maxArg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Can be set to any non-negative number, but there are diminishing returns as you go larger</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> BigInteger CACHE_SIZE = BigInteger.valueOf(LIMIT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Memoization</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] collatzChainLength = <span class="keyword">new</span> <span class="keyword">int</span>[CACHE_SIZE.intValue()];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the Collatz chain length of the given integer with automatic caching.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">collatzChainLength</span><span class="params">(BigInteger n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n.signum() &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (n.compareTo(CACHE_SIZE) &gt;= <span class="number">0</span>)  <span class="comment">// Caching not available</span></span><br><span class="line"><span class="keyword">return</span> collatzChainLengthDirect(n);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> index = n.intValue();  <span class="comment">// Index in the cache</span></span><br><span class="line"><span class="keyword">if</span> (collatzChainLength[index] == <span class="number">0</span>)</span><br><span class="line">collatzChainLength[index] = collatzChainLengthDirect(n);</span><br><span class="line"><span class="keyword">return</span> collatzChainLength[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Returns the Collatz chain length of the given integer, with the</span></span><br><span class="line"><span class="comment">// first step uncached but the remaining steps using automatic caching.</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">collatzChainLengthDirect</span><span class="params">(BigInteger n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (n.equals(BigInteger.ONE))  <span class="comment">// Base case</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!n.testBit(<span class="number">0</span>))  <span class="comment">// If n is even</span></span><br><span class="line"><span class="keyword">return</span> collatzChainLength(n.shiftRight(<span class="number">1</span>)) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span>  <span class="comment">// Else n is odd</span></span><br><span class="line"><span class="keyword">return</span> collatzChainLength(n.multiply(BigInteger.valueOf(<span class="number">3</span>)).add(BigInteger.ONE)) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>Mathematica<br><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Collatz[<span class="number">0</span>] := <span class="number">0</span></span><br><span class="line">Collatz[<span class="number">1</span>] := <span class="number">1</span></span><br><span class="line">Collatz[n_] := <span class="keyword">Block</span>[&#123;res = Collatz[If[EvenQ[n], n / 2, n * 3 + 1]] + 1&#125;,</span><br><span class="line">  <span class="keyword">If</span>[n &lt; <span class="number">10</span>^<span class="number">5</span>, Collatz[n] = res, res]]  <span class="comment">(* Selective memoization *)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">$RecursionLimit</span> = <span class="number">1000</span>;</span><br><span class="line">maxArg = <span class="number">-1</span>;</span><br><span class="line">maxVal = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">For</span>[i = <span class="number">0</span>, i &lt;= <span class="number">10</span>^<span class="number">6</span>, i++,</span><br><span class="line">  <span class="keyword">If</span>[Collatz[i] &gt; maxVal,</span><br><span class="line">    maxVal = Collatz[i];</span><br><span class="line">    maxArg = i]]</span><br><span class="line">maxArg</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Problem&quot;&gt;&lt;a href=&quot;#Problem&quot; class=&quot;headerlink&quot; title=&quot;Problem&quot;&gt;&lt;/a&gt;Problem&lt;/h3&gt;&lt;p&gt;The following iterative sequence is defined for th
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
</feed>
