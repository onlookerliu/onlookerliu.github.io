<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Code@浮生记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="onlookerliu.github.io/"/>
  <updated>2018-02-28T12:05:41.038Z</updated>
  <id>onlookerliu.github.io/</id>
  
  <author>
    <name>Kai Liu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Project Euler 001</title>
    <link href="onlookerliu.github.io/2018/02/08/Project-Euler-001/"/>
    <id>onlookerliu.github.io/2018/02/08/Project-Euler-001/</id>
    <published>2018-02-08T11:41:03.000Z</published>
    <updated>2018-02-28T12:05:41.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h2><p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we<br>get 3, 5, 6 and 9. The sum of these multiples is 23.</p><p>Find the sum of all the multiples of 3 or 5 below 1000.</p><h2 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">233168</span><br></pre></td></tr></table></figure><hr><p>C</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> || i % <span class="number">5</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">p001</span> <span class="keyword">implements</span> <span class="title">EulerSolution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="keyword">new</span> p001().run());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Computers are fast, so we can implement this solution directly without any clever math.</span></span><br><span class="line"><span class="comment"> * A conservative upper bound for the sum is 1000 * 1000, which fits in a Java int type.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> || i % <span class="number">5</span> == <span class="number">0</span>)</span><br><span class="line">sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> Integer.toString(sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Mathematica</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Total</span>[<span class="keyword">Select</span>[<span class="keyword">Range</span>[<span class="number">999</span>], <span class="keyword">Function</span>[x, <span class="keyword">Mod</span>[x, <span class="number">3</span>] == <span class="number">0</span> || <span class="keyword">Mod</span>[x, <span class="number">5</span>] == <span class="number">0</span>]]]</span><br></pre></td></tr></table></figure><hr><p>Python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line">print(sum(i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1000</span>) <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>) <span class="keyword">or</span> (i % <span class="number">5</span> == <span class="number">0</span>)))</span><br></pre></td></tr></table></figure><hr><p>JavaScript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (i % <span class="number">3</span> === <span class="number">0</span> || i % <span class="number">5</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    s += i</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(s)</span><br></pre></td></tr></table></figure><hr><p>Ruby</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env ruby</span></span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="number">1000</span>.times <span class="keyword">do</span> <span class="params">|i|</span></span><br><span class="line">  <span class="keyword">if</span> i % <span class="number">3</span> == <span class="number">0</span> <span class="keyword">or</span> i % <span class="number">5</span> == <span class="number">0</span></span><br><span class="line">    sum += i</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">puts sum</span><br></pre></td></tr></table></figure><hr><p>Go</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">if</span> i%<span class="number">3</span> == <span class="number">0</span> || i%<span class="number">5</span> == <span class="number">0</span> &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>Haskell</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">main</span> ::  <span class="type">IO</span> ()</span><br><span class="line"><span class="title">main</span> = print $ sum [n | n &lt;- [<span class="number">1.</span><span class="number">.999</span>], or [(n `mod` <span class="number">3</span> == <span class="number">0</span>), (n `mod` <span class="number">5</span> == <span class="number">0</span>)]]</span><br></pre></td></tr></table></figure><hr><p>Clojure</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env clojure</span><br><span class="line">(<span class="name"><span class="builtin-name">defn</span></span> multiple? [n]</span><br><span class="line">  (<span class="name"><span class="builtin-name">or</span></span> (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">rem</span></span> n <span class="number">3</span>) <span class="number">0</span>) (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">rem</span></span> n <span class="number">5</span>) <span class="number">0</span>)))</span><br><span class="line"></span><br><span class="line">(<span class="name">println</span> (<span class="name"><span class="builtin-name">reduce</span></span> + (<span class="name"><span class="builtin-name">filter</span></span> multiple? (<span class="name"><span class="builtin-name">range</span></span> <span class="number">1000</span>))))</span><br></pre></td></tr></table></figure><hr><p>Scheme</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">display</span></span></span><br><span class="line">  (<span class="name">reduce</span> + <span class="number">0</span></span><br><span class="line">          (<span class="name">filter</span></span><br><span class="line">            (<span class="name"><span class="builtin-name">lambda</span></span> (n)</span><br><span class="line">              (<span class="name"><span class="builtin-name">or</span></span> (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">remainder</span></span> n <span class="number">3</span>) <span class="number">0</span>) (<span class="name"><span class="builtin-name">=</span></span> (<span class="name"><span class="builtin-name">remainder</span></span> n <span class="number">5</span>) <span class="number">0</span>)))</span><br><span class="line">            (<span class="name">iota</span> <span class="number">1000</span>))))</span><br><span class="line">(<span class="name"><span class="builtin-name">newline</span></span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Question&quot;&gt;&lt;a href=&quot;#Question&quot; class=&quot;headerlink&quot; title=&quot;Question&quot;&gt;&lt;/a&gt;Question&lt;/h2&gt;&lt;p&gt;If we list all the natural numbers below 10 th
      
    
    </summary>
    
    
      <category term="euler" scheme="onlookerliu.github.io/tags/euler/"/>
    
      <category term="multilingual" scheme="onlookerliu.github.io/tags/multilingual/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 002</title>
    <link href="onlookerliu.github.io/2017/12/30/LeetCode-Notes-002/"/>
    <id>onlookerliu.github.io/2017/12/30/LeetCode-Notes-002/</id>
    <published>2017-12-29T17:39:34.000Z</published>
    <updated>2018-02-28T11:50:15.840Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Add-Binary"><a href="#Add-Binary" class="headerlink" title="Add Binary"></a>Add Binary</h3><p>Given two binary strings, return their sum (also a binary string).</p><p>For example,<br>a = “11”<br>b = “1”<br>Return “100”.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; a</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; b</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> addBinary = <span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  a = a.split(<span class="string">''</span>).reverse();</span><br><span class="line">  b = b.split(<span class="string">''</span>).reverse();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> c = [];</span><br><span class="line">  <span class="keyword">var</span> add = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = <span class="built_in">Math</span>.max(a.length, b.length);i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = (a[i] === <span class="literal">undefined</span> ? <span class="number">0</span> : <span class="built_in">Number</span>(a[i])) + (b[i] === <span class="literal">undefined</span> ? <span class="number">0</span>: <span class="built_in">Number</span>(b[i])) + add;</span><br><span class="line">    c[i] = sum &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= <span class="number">2</span>) </span><br><span class="line">      add = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      add = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (add)</span><br><span class="line">    c[len] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> c.reverse().join(<span class="string">''</span>).toString();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Add-Digit"><a href="#Add-Digit" class="headerlink" title="Add Digit"></a>Add Digit</h3><p>Given a non-negative integer num, repeatedly add all its digits until the result has only one digit.</p><p><strong>For example:</strong></p><p>Given num = 38, the process is like: 3 + 8 = 11, 1 + 1 = 2. Since 2 has only one digit, return it.</p><p><strong>Follow up:</strong><br>Could you do it without any loop/recursion in O(1) runtime?</p><p><strong>Credits:</strong><br>Special thanks to @jianchao.li.fighter for adding this problem and creating all test cases.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; num</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addDigits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(num.toString().length !== <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (num) &#123;</span><br><span class="line">      sum += num % <span class="number">10</span>;</span><br><span class="line">      num = ~~(num / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    num = sum;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> num;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Add-Strings"><a href="#Add-Strings" class="headerlink" title="Add Strings"></a>Add Strings</h3><p>Given two non-negative integers num1 and num2 represented as string, return the sum of num1 and num2.</p><p>Note:</p><ol><li>The length of both num1 and num2 is &lt; 5100.</li><li>Both num1 and num2 contains only digits 0-9.</li><li>Both num1 and num2 does not contain any leading zero.</li><li>You must not use any built-in BigInteger library or convert the inputs to integer directly.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; num1</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; num2</span></span><br><span class="line"><span class="comment"> * @return &#123;string&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addStrings = <span class="function"><span class="keyword">function</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> [i, j] = [num1.length, num2.length];</span><br><span class="line">  <span class="keyword">let</span> ans = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">let</span> add = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  i -= <span class="number">1</span>, j -= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( ; i &gt;= <span class="number">0</span> || j &gt;= <span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = i &gt;= <span class="number">0</span> ? +num1[i] : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> b = j &gt;= <span class="number">0</span> ? +num2[j] : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> sum = a + b + add;</span><br><span class="line">    ans = sum % <span class="number">10</span> + ans;</span><br><span class="line">    add = ~~(sum / <span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add &amp;&amp; (ans = add + ans);</span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Add-Binary&quot;&gt;&lt;a href=&quot;#Add-Binary&quot; class=&quot;headerlink&quot; title=&quot;Add Binary&quot;&gt;&lt;/a&gt;Add Binary&lt;/h3&gt;&lt;p&gt;Given two binary strings, return their
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>A simple Metropolis-Hastings MCMC in R</title>
    <link href="onlookerliu.github.io/2017/12/29/A-simple-Metropolis-Hastings-MCMC-in-R/"/>
    <id>onlookerliu.github.io/2017/12/29/A-simple-Metropolis-Hastings-MCMC-in-R/</id>
    <published>2017-12-28T17:47:23.000Z</published>
    <updated>2017-12-28T17:47:39.397Z</updated>
    
    <content type="html"><![CDATA[<p>While there are certainly good software packages out there to do the job for you, notably BUGS or JAGS, it is instructive to program a simple MCMC yourself. In this post, I give an educational example of the Bayesian equivalent of a linear regression, sampled by an MCMC with Metropolis-Hastings steps, based on an earlier version which I did to together with Tamara Münkemüller. Since first publishing this post, I have made a few small modifications to improve clarity. A similar post on Metropolis-Hastings MCMC algorithms by Darren Wilkinson is also worth looking at. More on analyzing the results of this algorithm can be found in a recent post.</p><h2 id="Creating-test-data"><a href="#Creating-test-data" class="headerlink" title="Creating test data"></a>Creating test data</h2><p>As a first step, we create some test data that will be used to fit our model. Let’s assume a linear relationship between the predictor and the response variable, so we take a linear model and add some noise.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">trueA &lt;- <span class="number">5</span></span><br><span class="line">trueB &lt;- <span class="number">0</span></span><br><span class="line">trueSd &lt;- <span class="number">10</span></span><br><span class="line">sampleSize &lt;- <span class="number">31</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># create independent x-values</span></span><br><span class="line">x &lt;- (-(sampleSize-<span class="number">1</span>)/<span class="number">2</span>):((sampleSize-<span class="number">1</span>)/<span class="number">2</span>)</span><br><span class="line"><span class="comment"># create dependent values according to ax + b + N(0,sd)</span></span><br><span class="line">y &lt;-  trueA * x + trueB + rnorm(n=sampleSize,mean=<span class="number">0</span>,sd=trueSd)</span><br><span class="line"></span><br><span class="line">plot(x,y, main=<span class="string">"Test Data"</span>)</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://oye4atjxc.bkt.clouddn.com/machineLearning/MCMC/output_2_0.png" width="60%"><br></div><p>I balanced x values around zero to “de-correlate” slope and intercept. The result should look something like the figure to the above.</p><h2 id="Defining-the-statistical-model"><a href="#Defining-the-statistical-model" class="headerlink" title="Defining the statistical model"></a>Defining the statistical model</h2><p>The next step is to specify the statistical model. We already know that the data was created with a linear relationship $y = a*x + b$ between $x$ and $y$ and a normal error model $N(0,sd)$ with standard deviation $sd$, so let’s use the same model for the fit and see if we can retrieve our original parameter values.</p><h2 id="Derive-the-likelihood-function-from-the-model"><a href="#Derive-the-likelihood-function-from-the-model" class="headerlink" title="Derive the likelihood function from the model"></a>Derive the likelihood function from the model</h2><p>For estimating parameters in a Bayesian analysis, we need to derive the likelihood function for the model that we want to fit. The likelihood is the probability (density) with which we would expect the observed data to occur conditional on the parameters of the model that we look at. So, given that our linear model $y = b + a<em>x + N(0,sd)$ takes the parameters $(a, b, sd)$ as an input, we have to return the probability of obtaining the test data above under this model (this sounds more complicated as it is, as you see in the code, we simply calculate the difference between predictions $y = b + a</em>x$ and the observed $y$, and then we have to look up the probability densities (using <code>dnorm</code>) for such deviations to occur.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">likelihood &lt;- <span class="keyword">function</span>(param)&#123;</span><br><span class="line">    a = param[<span class="number">1</span>]</span><br><span class="line">    b = param[<span class="number">2</span>]</span><br><span class="line">    sd = param[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    pred = a*x + b</span><br><span class="line">    singlelikelihoods = dnorm(y, mean = pred, sd = sd, log = <span class="literal">T</span>)</span><br><span class="line">    sumll = sum(singlelikelihoods)</span><br><span class="line">    <span class="keyword">return</span>(sumll)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Example: plot the likelihood profile of the slope a</span></span><br><span class="line">slopevalues &lt;- <span class="keyword">function</span>(x)&#123;<span class="keyword">return</span>(likelihood(c(x, trueB, trueSd)))&#125;</span><br><span class="line">slopelikelihoods &lt;- lapply(seq(<span class="number">3</span>, <span class="number">7</span>, by=<span class="number">.05</span>), slopevalues )</span><br><span class="line">plot (seq(<span class="number">3</span>, <span class="number">7</span>, by=<span class="number">.05</span>), slopelikelihoods , type=<span class="string">"l"</span>, xlab = <span class="string">"values of slope parameter a"</span>, ylab = <span class="string">"Log likelihood"</span>)</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://oye4atjxc.bkt.clouddn.com/machineLearning/MCMC/output_5_0.png" width="60%"><br></div><p>As an illustration, the last lines of the code plot the Likelihood for a range of parameter values of the slope parameter a. The result should look something like the plot to the above.</p><h2 id="Why-we-work-with-logarithms"><a href="#Why-we-work-with-logarithms" class="headerlink" title="Why we work with logarithms"></a>Why we work with logarithms</h2><p>You might have noticed that I return the logarithm of the probabilities in the likelihood function, which is also the reason why I sum the probabilities of all our datapoints (the logarithm of a product equals the sum of the logarithms). Why do we do this?</p><p>You don’t have to, but it’s strongly advisable because likelihoods, where a lot of small probabilities are multiplied, can get ridiculously small pretty fast (something like $10^-34$). At some stage, computer programs are getting into numerical rounding or underflow problems then. So, bottom-line: when you program something with likelihoods, always use logarithms!!!</p><h2 id="Defining-the-prior"><a href="#Defining-the-prior" class="headerlink" title="Defining the prior"></a>Defining the prior</h2><p>As a second step, as always in Bayesian statistics, we have to specify a <a href="https://en.wikipedia.org/wiki/Prior_probability" target="_blank" rel="noopener">prior distribution</a> for each parameter. To make it easy, I used uniform distributions and normal distributions for all three parameters. Some additional information for the “professionals”, skip this when you don’t understand what I’m talking about: while this choice can be considered pretty <a href="https://en.wikipedia.org/wiki/Prior_probability#Uninformative_priors" target="_blank" rel="noopener">“uninformative”</a> for the slope and intercept parameters, it is not really uninformative for the standard deviations. An uninformative prior for the latter would usually be scale with $1/sigma$ (if you want to understand the reason, see <a href="https://en.wikipedia.org/wiki/Jeffreys_prior#Gaussian_distribution_with_standard_deviation_parameter" target="_blank" rel="noopener">here</a>. This stuff is important when you seriously dive into Bayesian statistics, but I didn’t want to make the code more confusing here.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prior distribution</span></span><br><span class="line">prior &lt;- <span class="keyword">function</span>(param)&#123;</span><br><span class="line">    a = param[<span class="number">1</span>]</span><br><span class="line">    b = param[<span class="number">2</span>]</span><br><span class="line">    sd = param[<span class="number">3</span>]</span><br><span class="line">    aprior = dunif(a, min=<span class="number">0</span>, max=<span class="number">10</span>, log = <span class="literal">T</span>)</span><br><span class="line">    bprior = dnorm(b, sd = <span class="number">5</span>, log = <span class="literal">T</span>)</span><br><span class="line">    sdprior = dunif(sd, min=<span class="number">0</span>, max=<span class="number">30</span>, log = <span class="literal">T</span>)</span><br><span class="line">    <span class="keyword">return</span>(aprior+bprior+sdprior)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-posterior"><a href="#The-posterior" class="headerlink" title="The posterior"></a>The posterior</h2><p>The product of prior and likelihood is the actual quantity the MCMC will be working on. This function is called the <a href="https://en.wikipedia.org/wiki/Posterior_probability" target="_blank" rel="noopener">posterior</a> (or to be exact, it’s called the posterior after it’s normalized, which the MCMC will do for us, but let’s not be picky for the moment). Again, here we work with the sum because we work with logarithms.</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">posterior &lt;- <span class="keyword">function</span>(param)&#123;</span><br><span class="line">   <span class="keyword">return</span> (likelihood(param) + prior(param))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="The-MCMC"><a href="#The-MCMC" class="headerlink" title="The MCMC"></a>The MCMC</h2><p>Now, here comes the actual <a href="https://en.wikipedia.org/wiki/Metropolis%E2%80%93Hastings_algorithm" target="_blank" rel="noopener">Metropolis-Hastings algorithm</a>. One of the most frequent applications of this algorithm (as in this example) is sampling from the posterior density in Bayesian statistics. In principle, however, the algorithm may be used to sample from any integrable function. So, the aim of this algorithm is to jump around in parameter space, but in a way that the probability to be at a point is proportional to the function we sample from (this is usually called the target function). In our case this is the posterior defined above.</p><p>This is achieved by</p><ol><li>Starting at a random parameter value</li><li>Choosing a new parameter value close to the old value based on some probability density that is called the proposal function</li><li>Jumping to this new point with a probability p(new)/p(old), where p is the target function, and $p&gt;1$ means jumping as well</li></ol><p>It’s fun to think about why that works, but for the moment I can assure you it does – when we run this algorithm, distribution of the parameters it visits converges to the target distribution $p$. So, let’s get this in R:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">######## Metropolis algorithm ################</span></span><br><span class="line"></span><br><span class="line">proposalfunction &lt;- <span class="keyword">function</span>(param)&#123;</span><br><span class="line">    <span class="keyword">return</span>(rnorm(<span class="number">3</span>,mean = param, sd= c(<span class="number">0.1</span>,<span class="number">0.5</span>,<span class="number">0.3</span>)))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">run_metropolis_MCMC &lt;- <span class="keyword">function</span>(startvalue, iterations)&#123;</span><br><span class="line">    chain = array(dim = c(iterations+<span class="number">1</span>,<span class="number">3</span>))</span><br><span class="line">    chain[<span class="number">1</span>,] = startvalue</span><br><span class="line">    <span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>:iterations)&#123;</span><br><span class="line">        proposal = proposalfunction(chain[i,])</span><br><span class="line"></span><br><span class="line">        probab = exp(posterior(proposal) - posterior(chain[i,]))</span><br><span class="line">        <span class="keyword">if</span> (runif(<span class="number">1</span>) &lt; probab)&#123;</span><br><span class="line">            chain[i+<span class="number">1</span>,] = proposal</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            chain[i+<span class="number">1</span>,] = chain[i,]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>(chain)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">startvalue = c(<span class="number">4</span>,<span class="number">0</span>,<span class="number">10</span>)</span><br><span class="line">chain = run_metropolis_MCMC(startvalue, <span class="number">10000</span>)</span><br><span class="line"></span><br><span class="line">burnIn = <span class="number">5000</span></span><br><span class="line">acceptance = <span class="number">1</span>-mean(duplicated(chain[-(<span class="number">1</span>:burnIn),]))</span><br></pre></td></tr></table></figure><p>Again, working with the logarithms of the posterior might be a bit confusing at first, in particular when you look at the line where the acceptance probability is calculated (probab = exp(posterior(proposal) – posterior(chain[i,]))). To understand why we do this, note that $p1/p2 = exp[log(p1)-log(p2)]$.</p><p>The first steps of the algorithm may be biased by the initial value, and are therefore usually discarded for the further analysis (burn-in time). An interesting output to look at is the acceptance rate: how often was a proposal rejected by the metropolis-hastings acceptance criterion? The acceptance rate can be influenced by the proposal function: generally, the closer the proposals are, the larger the acceptance rate. Very high acceptance rates, however, are usually not beneficial: this means that the algorithms is “staying” at the same point, which results in a suboptimal probing of the parameter space (mixing). It can be shown that acceptance rates between 20% and 30% are optimal for typical applications (more on that here).</p><p>Finally, we can plot the results. There are more elegant ways of plotting this which I discuss in another recent post, so check this out, but for the moment I didn’t want to use any packages, so we do it the hard way:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### Summary: #######################</span></span><br><span class="line"></span><br><span class="line">par(mfrow = c(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line">hist(chain[-(<span class="number">1</span>:burnIn),<span class="number">1</span>],nclass=<span class="number">30</span>, , main=<span class="string">"Posterior of a"</span>, xlab=<span class="string">"True value = red line"</span> )</span><br><span class="line">abline(v = mean(chain[-(<span class="number">1</span>:burnIn),<span class="number">1</span>]))</span><br><span class="line">abline(v = trueA, col=<span class="string">"red"</span> )</span><br><span class="line">hist(chain[-(<span class="number">1</span>:burnIn),<span class="number">2</span>],nclass=<span class="number">30</span>, main=<span class="string">"Posterior of b"</span>, xlab=<span class="string">"True value = red line"</span>)</span><br><span class="line">abline(v = mean(chain[-(<span class="number">1</span>:burnIn),<span class="number">2</span>]))</span><br><span class="line">abline(v = trueB, col=<span class="string">"red"</span> )</span><br><span class="line">hist(chain[-(<span class="number">1</span>:burnIn),<span class="number">3</span>],nclass=<span class="number">30</span>, main=<span class="string">"Posterior of sd"</span>, xlab=<span class="string">"True value = red line"</span>)</span><br><span class="line">abline(v = mean(chain[-(<span class="number">1</span>:burnIn),<span class="number">3</span>]) )</span><br><span class="line">abline(v = trueSd, col=<span class="string">"red"</span> )</span><br><span class="line">plot(chain[-(<span class="number">1</span>:burnIn),<span class="number">1</span>], type = <span class="string">"l"</span>, xlab=<span class="string">"True value = red line"</span> , main = <span class="string">"Chain values of a"</span>, )</span><br><span class="line">abline(h = trueA, col=<span class="string">"red"</span> )</span><br><span class="line">plot(chain[-(<span class="number">1</span>:burnIn),<span class="number">2</span>], type = <span class="string">"l"</span>, xlab=<span class="string">"True value = red line"</span> , main = <span class="string">"Chain values of b"</span>, )</span><br><span class="line">abline(h = trueB, col=<span class="string">"red"</span> )</span><br><span class="line">plot(chain[-(<span class="number">1</span>:burnIn),<span class="number">3</span>], type = <span class="string">"l"</span>, xlab=<span class="string">"True value = red line"</span> , main = <span class="string">"Chain values of sd"</span>, )</span><br><span class="line">abline(h = trueSd, col=<span class="string">"red"</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># for comparison:</span></span><br><span class="line">summary(lm(y~x))</span><br></pre></td></tr></table></figure><p>​<br>    Call:<br>    lm(formula = y ~ x)</p><pre><code>Residuals:    Min      1Q  Median      3Q     Max-15.844  -5.834  -1.342   5.479  19.348Coefficients:            Estimate Std. Error t value Pr(&gt;|t|)(Intercept)  -0.7967     1.6512  -0.482    0.633x             5.0498     0.1846  27.354   &lt;2e-16 ***---Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1Residual standard error: 9.193 on 29 degrees of freedomMultiple R-squared:  0.9627,    Adjusted R-squared:  0.9614F-statistic: 748.3 on 1 and 29 DF,  p-value: &lt; 2.2e-16</code></pre><div align="center"><br><img src="http://oye4atjxc.bkt.clouddn.com/machineLearning/MCMC/output_13_1.png" width="100%"><br></div><p>The resulting plots should look something like the plot above. You see that we retrieve more or less the original parameters that were used to create our data, and you also see that we get a certain area around the highest posterior values that also have some support by the data, which is the Bayesian equivalent of confidence intervals.</p><p><strong>Remark</strong>:</p><p>The upper row shows posterior estimates for slope (a), intercept (b) and standard deviation of the error (sd). The lower row shows the Markov Chain of parameter values.</p><h2 id="References-for-further-reading"><a href="#References-for-further-reading" class="headerlink" title="References for further reading"></a>References for further reading</h2><ol><li>Gelman, A.; Carlin, J. B.; Stern, H. S. &amp; Rubin, D. B. (2003) Bayesian Data Analysis</li><li>Andrieu, C.; de Freitas, N.; Doucet, A. &amp; Jordan, M. I. (2003) An introduction to MCMC for machine learning Mach. Learning, Springer, 50, 5-43</li><li>Hartig, F.; Calabrese, J. M.; Reineking, B.; Wiegand, T. &amp; Huth, A. (2011) Statistical inference for stochastic simulation models – theory and application Ecol. Lett., 14, 816–827.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;While there are certainly good software packages out there to do the job for you, notably BUGS or JAGS, it is instructive to program a si
      
    
    </summary>
    
    
      <category term="R" scheme="onlookerliu.github.io/tags/R/"/>
    
  </entry>
  
  <entry>
    <title>Decision_Tree_Regression</title>
    <link href="onlookerliu.github.io/2017/12/29/Decision-Tree-Regression/"/>
    <id>onlookerliu.github.io/2017/12/29/Decision-Tree-Regression/</id>
    <published>2017-12-28T17:45:47.000Z</published>
    <updated>2017-12-28T17:46:23.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Decision-Tree-Regression-using-DecisionTrees-jl"><a href="#Decision-Tree-Regression-using-DecisionTrees-jl" class="headerlink" title="Decision Tree Regression (using DecisionTrees.jl)"></a>Decision Tree Regression (using DecisionTrees.jl)</h1><p>Adapted from <a href="http://scikit-learn.org/stable/auto_examples/tree/plot_tree_regression.html" target="_blank" rel="noopener">http://scikit-learn.org/stable/auto_examples/tree/plot_tree_regression.html</a></p><p>A 1D regression with decision tree.</p><p>The decision trees is used to fit a sine curve with addition noisy observation. As a result, it learns local linear regressions approximating the sine curve.</p><p>We can see that if the maximum depth of the tree (controlled by the max_depth parameter) is set too high, the decision trees learn too fine details of the training data and learn from the noise, i.e. they overfit.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> DecisionTree</span><br><span class="line"><span class="keyword">using</span> ScikitLearn</span><br><span class="line"><span class="keyword">using</span> PyPlot</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a random dataset</span></span><br><span class="line">srand(<span class="number">42</span>)</span><br><span class="line">X = sort(<span class="number">5</span> * rand(<span class="number">80</span>))</span><br><span class="line">XX = reshape(X, <span class="number">80</span>, <span class="number">1</span>)</span><br><span class="line">y = sin(X)</span><br><span class="line">y[<span class="number">1</span>:<span class="number">5</span>:<span class="keyword">end</span>] += <span class="number">3</span> * (<span class="number">0.5</span> - rand(<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Fit regression model</span></span><br><span class="line">regr_1 = DecisionTreeRegressor()</span><br><span class="line">regr_2 = DecisionTreeRegressor(pruning_purity_threshold=<span class="number">0.05</span>)</span><br><span class="line">regr_3 = RandomForestRegressor(ntrees=<span class="number">20</span>)</span><br><span class="line">fit!(regr_1, XX, y)</span><br><span class="line">fit!(regr_2, XX, y)</span><br><span class="line">fit!(regr_3, XX, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Predict</span></span><br><span class="line">X_test = <span class="number">0</span>:<span class="number">0.01</span>:<span class="number">5.0</span></span><br><span class="line">y_1 = predict(regr_1, hcat(X_test))</span><br><span class="line">y_2 = predict(regr_2, hcat(X_test))</span><br><span class="line">y_3 = predict(regr_3, hcat(X_test))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the results</span></span><br><span class="line">scatter(X, y, c=<span class="string">"k"</span>, label=<span class="string">"data"</span>)</span><br><span class="line">plot(X_test, y_1, c=<span class="string">"g"</span>, label=<span class="string">"no pruning"</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plot(X_test, y_2, c=<span class="string">"r"</span>, label=<span class="string">"pruning_purity_threshold=0.05"</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">plot(X_test, y_3, c=<span class="string">"b"</span>, label=<span class="string">"RandomForestClassifier"</span>, linewidth=<span class="number">2</span>)</span><br><span class="line">xlabel(<span class="string">"data"</span>)</span><br><span class="line">ylabel(<span class="string">"target"</span>)</span><br><span class="line">title(<span class="string">"Decision Tree Regression"</span>)</span><br><span class="line">legend(prop=<span class="built_in">Dict</span>(<span class="string">"size"</span>=&gt;<span class="number">10</span>));</span><br></pre></td></tr></table></figure><p><img src="http://oye4atjxc.bkt.clouddn.com/leanote/Decision_Tree_Regression/output_3_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Decision-Tree-Regression-using-DecisionTrees-jl&quot;&gt;&lt;a href=&quot;#Decision-Tree-Regression-using-DecisionTrees-jl&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="julia" scheme="onlookerliu.github.io/tags/julia/"/>
    
  </entry>
  
  <entry>
    <title>Classifier_Comparison</title>
    <link href="onlookerliu.github.io/2017/12/29/Classifier-Comparison/"/>
    <id>onlookerliu.github.io/2017/12/29/Classifier-Comparison/</id>
    <published>2017-12-28T17:44:21.000Z</published>
    <updated>2017-12-28T17:44:54.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Classifier-Comparison"><a href="#Classifier-Comparison" class="headerlink" title="Classifier Comparison"></a>Classifier Comparison</h1><p>Adapted from <a href="http://scikit-learn.org/stable/auto_examples/classification/plot_classifier_comparison.html" target="_blank" rel="noopener">http://scikit-learn.org/stable/auto_examples/classification/plot_classifier_comparison.html</a></p><p>A comparison of a several classifiers in scikit-learn on synthetic datasets. The point of this example is to illustrate the nature of decision boundaries of different classifiers. This should be taken with a grain of salt, as the intuition conveyed by these examples does not necessarily carry over to real datasets.</p><p>Particularly in high-dimensional spaces, data can more easily be separated linearly and the simplicity of classifiers such as naive Bayes and linear SVMs might lead to better generalization than is achieved by other classifiers.</p><p>The plots show training points in solid colors and testing points semi-transparent. The lower right shows the classification accuracy on the test set.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python Code source: Gaël Varoquaux</span></span><br><span class="line"><span class="comment">#                     Andreas Müller</span></span><br><span class="line"><span class="comment"># Julia adaptation: Cédric St-Jean</span></span><br><span class="line"><span class="comment"># Modified for documentation by Jaques Grobler</span></span><br><span class="line"><span class="comment"># License: BSD 3 clause</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ScikitLearn</span><br><span class="line"><span class="keyword">using</span> PyCall</span><br><span class="line"><span class="keyword">using</span> PyPlot</span><br><span class="line"><span class="keyword">using</span> ScikitLearn.CrossValidation: train_test_split</span><br><span class="line"><span class="meta">@pyimport</span> matplotlib.colors as mplc</span><br><span class="line"><span class="meta">@sk_import</span> preprocessing: StandardScaler</span><br><span class="line"><span class="meta">@sk_import</span> datasets: (make_moons, make_circles, make_classification)</span><br><span class="line"><span class="meta">@sk_import</span> neighbors: KNeighborsClassifier</span><br><span class="line"><span class="meta">@sk_import</span> svm: SVC</span><br><span class="line"><span class="meta">@sk_import</span> tree: DecisionTreeClassifier</span><br><span class="line"><span class="meta">@sk_import</span> ensemble: (RandomForestClassifier, AdaBoostClassifier)</span><br><span class="line"><span class="meta">@sk_import</span> naive_bayes: GaussianNB</span><br><span class="line"><span class="meta">@sk_import</span> discriminant_analysis: (LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis)</span><br><span class="line"><span class="keyword">using</span> ScikitLearn.Utils: meshgrid</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">h = <span class="number">.02</span>  <span class="comment"># step size in the mesh</span></span><br><span class="line"></span><br><span class="line">names = [<span class="string">"Nearest Neighbors"</span>, <span class="string">"Linear SVM"</span>, <span class="string">"RBF SVM"</span>, <span class="string">"Decision Tree"</span>,</span><br><span class="line">         <span class="string">"Random Forest"</span>, <span class="string">"AdaBoost"</span>, <span class="string">"Naive Bayes"</span>, <span class="string">"Linear Discriminant Analysis"</span>,</span><br><span class="line">         <span class="string">"Quadratic Discriminant Analysis"</span>]</span><br><span class="line">classifiers = [</span><br><span class="line">    KNeighborsClassifier(<span class="number">3</span>),</span><br><span class="line">    SVC(kernel=<span class="string">"linear"</span>, C=<span class="number">0.025</span>),</span><br><span class="line">    SVC(gamma=<span class="number">2</span>, C=<span class="number">1</span>),</span><br><span class="line">    DecisionTreeClassifier(max_depth=<span class="number">5</span>),</span><br><span class="line">    RandomForestClassifier(max_depth=<span class="number">5</span>, n_estimators=<span class="number">10</span>, max_features=<span class="number">1</span>),</span><br><span class="line">    AdaBoostClassifier(),</span><br><span class="line">    GaussianNB(),</span><br><span class="line">    LinearDiscriminantAnalysis(),</span><br><span class="line">    QuadraticDiscriminantAnalysis()]</span><br><span class="line"></span><br><span class="line">X, y = make_classification(n_features=<span class="number">2</span>, n_redundant=<span class="number">0</span>, n_informative=<span class="number">2</span>,</span><br><span class="line">                           random_state=<span class="number">1</span>, n_clusters_per_class=<span class="number">1</span>)</span><br><span class="line">srand(<span class="number">42</span>)</span><br><span class="line">X += <span class="number">2</span> * rand(size(X)...)</span><br><span class="line">linearly_separable = (X, y)</span><br><span class="line"></span><br><span class="line">datasets = [make_moons(noise=<span class="number">0.3</span>, random_state=<span class="number">0</span>),</span><br><span class="line">            make_circles(noise=<span class="number">0.2</span>, factor=<span class="number">0.5</span>, random_state=<span class="number">1</span>),</span><br><span class="line">            linearly_separable</span><br><span class="line">            ];</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">fig = figure(figsize=(<span class="number">27</span>, <span class="number">9</span>))</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="comment"># iterate over datasets</span></span><br><span class="line"><span class="keyword">for</span> ds <span class="keyword">in</span> datasets</span><br><span class="line">    <span class="comment"># preprocess dataset, split into training and test part</span></span><br><span class="line">    X, y = ds</span><br><span class="line">    X = fit_transform!(StandardScaler(), X)</span><br><span class="line">    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=<span class="number">.4</span>)</span><br><span class="line"></span><br><span class="line">    x_min, x_max = minimum(X[:, <span class="number">1</span>]) - <span class="number">.5</span>, maximum(X[:, <span class="number">1</span>]) + <span class="number">.5</span></span><br><span class="line">    y_min, y_max = minimum(X[:, <span class="number">2</span>]) - <span class="number">.5</span>, maximum(X[:, <span class="number">2</span>]) + <span class="number">.5</span></span><br><span class="line">    xx, yy = meshgrid(x_min:h:x_max, y_min:h:y_max)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># just plot the dataset first</span></span><br><span class="line">    cm = PyPlot.cm[:RdBu]</span><br><span class="line">    cm_bright = mplc.ListedColormap([<span class="string">"#FF0000"</span>, <span class="string">"#0000FF"</span>])</span><br><span class="line">    ax = subplot(length(datasets), length(classifiers) + <span class="number">1</span>, i)</span><br><span class="line">    <span class="comment"># Plot the training points</span></span><br><span class="line">    ax[:scatter](X_train[:, <span class="number">1</span>], X_train[:, <span class="number">2</span>], c=y_train, cmap=cm_bright)</span><br><span class="line">    <span class="comment"># and testing points</span></span><br><span class="line">    ax[:scatter](X_test[:, <span class="number">1</span>], X_test[:, <span class="number">2</span>], c=y_test, cmap=cm_bright, alpha=<span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">    ax[:set_xlim](minimum(xx), maximum(xx))</span><br><span class="line">    ax[:set_ylim](minimum(yy), maximum(yy))</span><br><span class="line">    ax[:set_xticks](())</span><br><span class="line">    ax[:set_yticks](())</span><br><span class="line">    i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># iterate over classifiers</span></span><br><span class="line">    <span class="keyword">for</span> (name, clf) <span class="keyword">in</span> zip(names, classifiers)</span><br><span class="line">        ax = subplot(length(datasets), length(classifiers) + <span class="number">1</span>, i)</span><br><span class="line">        fit!(clf, X_train, y_train)</span><br><span class="line">        scor = score(clf, X_test, y_test)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Plot the decision boundary. For that, we will assign a color to each</span></span><br><span class="line">        <span class="comment"># point in the mesh [x_min, m_max]x[y_min, y_max].</span></span><br><span class="line">        <span class="keyword">try</span> </span><br><span class="line">            <span class="comment"># Not implemented for some</span></span><br><span class="line">            Z = decision_function(clf, hcat(xx[:], yy[:]))</span><br><span class="line">        <span class="keyword">catch</span></span><br><span class="line">            Z = predict_proba(clf, hcat(xx[:], yy[:]))[:, <span class="number">2</span>]</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Put the result into a color plot</span></span><br><span class="line">        Z = reshape(Z, size(xx)...)</span><br><span class="line">        ax[:contourf](xx, yy, Z, cmap=cm, alpha=<span class="number">.8</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Plot also the training points</span></span><br><span class="line">        ax[:scatter](X_train[:, <span class="number">1</span>], X_train[:, <span class="number">2</span>], c=y_train, cmap=cm_bright)</span><br><span class="line">        <span class="comment"># and testing points</span></span><br><span class="line">        ax[:scatter](X_test[:, <span class="number">1</span>], X_test[:, <span class="number">2</span>], c=y_test, cmap=cm_bright,</span><br><span class="line">                   alpha=<span class="number">0.6</span>)</span><br><span class="line"></span><br><span class="line">        ax[:set_xlim](minimum(xx), maximum(xx))</span><br><span class="line">        ax[:set_ylim](minimum(yy), maximum(yy))</span><br><span class="line">        ax[:set_xticks](())</span><br><span class="line">        ax[:set_yticks](())</span><br><span class="line">        ax[:set_title](name)</span><br><span class="line"></span><br><span class="line">        ax[:text](maximum(xx) - <span class="number">.3</span>, minimum(yy) + <span class="number">.3</span>, <span class="meta">@sprintf</span>(<span class="string">"%.2f"</span>, scor),</span><br><span class="line">                size=<span class="number">15</span>, horizontalalignment=<span class="string">"right"</span>)</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">fig[:subplots_adjust](left=<span class="number">.02</span>, right=<span class="number">.98</span>)</span><br></pre></td></tr></table></figure><p><img src="http://oye4atjxc.bkt.clouddn.com/leanote/Classifier_Comparison/output_5_0.png" alt="png"></p><pre><code>/Users/kay/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/sklearn/cross_validation.py:41: DeprecationWarning: This module was deprecated in version 0.18 in favor of the model_selection module into which all the refactored classes and functions are moved. Also note that the interface of the new CV iterators are different from that of this module. This module will be removed in 0.20.  &quot;This module will be removed in 0.20.&quot;, DeprecationWarning)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Classifier-Comparison&quot;&gt;&lt;a href=&quot;#Classifier-Comparison&quot; class=&quot;headerlink&quot; title=&quot;Classifier Comparison&quot;&gt;&lt;/a&gt;Classifier Comparison&lt;/
      
    
    </summary>
    
    
      <category term="julia" scheme="onlookerliu.github.io/tags/julia/"/>
    
  </entry>
  
  <entry>
    <title>Cross_Validated_Predictions</title>
    <link href="onlookerliu.github.io/2017/12/29/Cross-Validated-Predictions/"/>
    <id>onlookerliu.github.io/2017/12/29/Cross-Validated-Predictions/</id>
    <published>2017-12-28T17:42:24.000Z</published>
    <updated>2017-12-28T17:43:24.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Plotting-Cross-Validated-Predictions"><a href="#Plotting-Cross-Validated-Predictions" class="headerlink" title="Plotting Cross-Validated Predictions"></a>Plotting Cross-Validated Predictions</h1><p>Adapted from <a href="http://scikit-learn.org/stable/auto_examples/plot_cv_predict.html" target="_blank" rel="noopener">http://scikit-learn.org/stable/auto_examples/plot_cv_predict.html</a></p><p>This example shows how to use cross_val_predict to visualize prediction errors.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ScikitLearn</span><br><span class="line"><span class="keyword">using</span> ScikitLearn.CrossValidation: cross_val_predict</span><br><span class="line"></span><br><span class="line"><span class="meta">@sk_import</span> datasets: load_boston</span><br><span class="line"><span class="meta">@sk_import</span> linear_model: LinearRegression</span><br><span class="line"><span class="keyword">using</span> PyPlot</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lr = LinearRegression()</span><br><span class="line">boston = load_boston()</span><br><span class="line">y = boston[<span class="string">"target"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># cross_val_predict returns an array of the same size as `y` where each entry</span></span><br><span class="line"><span class="comment"># is a prediction obtained by cross validated:</span></span><br><span class="line">predicted = cross_val_predict(lr, boston[<span class="string">"data"</span>], y, cv=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">scatter(y, predicted)</span><br><span class="line">plot([minimum(y), maximum(y)], [minimum(y), maximum(y)], <span class="string">"k--"</span>, lw=<span class="number">4</span>)</span><br><span class="line">xlabel(<span class="string">"Measured"</span>)</span><br><span class="line">ylabel(<span class="string">"Predicted"</span>);</span><br></pre></td></tr></table></figure><p><img src="http://oye4atjxc.bkt.clouddn.com/leanote/Cross_Validated_Predictions/output_4_0.png" alt="png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Plotting-Cross-Validated-Predictions&quot;&gt;&lt;a href=&quot;#Plotting-Cross-Validated-Predictions&quot; class=&quot;headerlink&quot; title=&quot;Plotting Cross-Valid
      
    
    </summary>
    
    
      <category term="julia" scheme="onlookerliu.github.io/tags/julia/"/>
    
  </entry>
  
  <entry>
    <title>Clustering_Comparison</title>
    <link href="onlookerliu.github.io/2017/12/29/Clustering-Comparison/"/>
    <id>onlookerliu.github.io/2017/12/29/Clustering-Comparison/</id>
    <published>2017-12-28T17:39:41.000Z</published>
    <updated>2017-12-28T17:41:07.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Comparing-different-clustering-algorithms-on-toy-datasets"><a href="#Comparing-different-clustering-algorithms-on-toy-datasets" class="headerlink" title="Comparing different clustering algorithms on toy datasets"></a>Comparing different clustering algorithms on toy datasets</h1><p>Adapted from <a href="http://scikit-learn.org/stable/auto_examples/cluster/plot_cluster_comparison.html" target="_blank" rel="noopener">http://scikit-learn.org/stable/auto_examples/cluster/plot_cluster_comparison.html</a></p><p>This example aims at showing characteristics of different clustering algorithms on datasets that are “interesting” but still in 2D. The last dataset is an example of a ‘null’ situation for clustering: the data is homogeneous, and there is no good clustering.</p><p>While these examples give some intuition about the algorithms, this intuition might not apply to very high dimensional data.</p><p>The results could be improved by tweaking the parameters for each clustering strategy, for instance setting the number of clusters for the methods that needs this parameter specified. Note that affinity propagation has a tendency to create many clusters. Thus in this example its two parameters (damping and per-point preference) were set to to mitigate this behavior.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ScikitLearn</span><br><span class="line"><span class="keyword">using</span> PyPlot</span><br><span class="line"></span><br><span class="line"><span class="meta">@sk_import</span> datasets: (make_circles, make_moons, make_blobs)</span><br><span class="line"><span class="meta">@sk_import</span> cluster: (estimate_bandwidth, MeanShift, MiniBatchKMeans, AgglomerativeClustering, SpectralClustering)</span><br><span class="line"><span class="meta">@sk_import</span> cluster: (DBSCAN, AffinityPropagation, Birch)</span><br><span class="line"><span class="meta">@sk_import</span> preprocessing: StandardScaler</span><br><span class="line"><span class="meta">@sk_import</span> neighbors: kneighbors_graph</span><br></pre></td></tr></table></figure><pre><code>PyObject &lt;function kneighbors_graph at 0x1a30ba77d0&gt;</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">srand(<span class="number">33</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generate datasets. We choose the size big enough to see the scalability</span></span><br><span class="line"><span class="comment"># of the algorithms, but not too big to avoid too long running times</span></span><br><span class="line">n_samples = <span class="number">1500</span></span><br><span class="line">noisy_circles = make_circles(n_samples=n_samples, factor=<span class="number">.5</span>, noise=<span class="number">.05</span>)</span><br><span class="line">noisy_moons = make_moons(n_samples=n_samples, noise=<span class="number">.05</span>)</span><br><span class="line">blobs = make_blobs(n_samples=n_samples, random_state=<span class="number">8</span>)</span><br><span class="line">no_structure = rand(n_samples, <span class="number">2</span>), <span class="literal">nothing</span></span><br><span class="line"></span><br><span class="line">colors0 = collect(<span class="string">"bgrcmykbgrcmykbgrcmykbgrcmyk"</span>)</span><br><span class="line">colors = vcat(fill(colors0, <span class="number">20</span>)...)</span><br><span class="line"></span><br><span class="line">clustering_names = [</span><br><span class="line">    <span class="string">"MiniBatchKMeans"</span>, <span class="string">"AffinityPropagation"</span>, <span class="string">"MeanShift"</span>,</span><br><span class="line">    <span class="string">"SpectralClustering"</span>, <span class="string">"Ward"</span>, <span class="string">"AgglomerativeClustering"</span>,</span><br><span class="line">    <span class="string">"DBSCAN"</span>, <span class="string">"Birch"</span>];</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line">figure(figsize=(length(clustering_names) * <span class="number">2</span> + <span class="number">3</span>, <span class="number">9.5</span>))</span><br><span class="line">subplots_adjust(left=<span class="number">.02</span>, right=<span class="number">.98</span>, bottom=<span class="number">.001</span>, top=<span class="number">.96</span>, wspace=<span class="number">.05</span>,</span><br><span class="line">                    hspace=<span class="number">.01</span>)</span><br><span class="line"></span><br><span class="line">plot_num = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">datasets = [noisy_circles, noisy_moons, blobs, no_structure]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i_dataset, dataset) <span class="keyword">in</span> enumerate(datasets)</span><br><span class="line"></span><br><span class="line">    X, y = dataset</span><br><span class="line">    <span class="comment"># normalize dataset for easier parameter selection</span></span><br><span class="line">    X = fit_transform!(StandardScaler(), X)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># estimate bandwidth for mean shift</span></span><br><span class="line">    bandwidth = estimate_bandwidth(X, quantile=<span class="number">0.3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># connectivity matrix for structured Ward</span></span><br><span class="line">    connectivity = kneighbors_graph(X, n_neighbors=<span class="number">10</span>, include_self=<span class="literal">false</span>)[:todense]() <span class="comment"># PyCall does not support numpy sparse matrices</span></span><br><span class="line">    <span class="comment"># make connectivity symmetric</span></span><br><span class="line">    connectivity = <span class="number">0.5</span> * (connectivity + connectivity')</span><br><span class="line"></span><br><span class="line">    <span class="comment"># create clustering estimators</span></span><br><span class="line">    ms = MeanShift(bandwidth=bandwidth, bin_seeding=<span class="literal">true</span>)</span><br><span class="line">    two_means = MiniBatchKMeans(n_clusters=<span class="number">2</span>)</span><br><span class="line">    ward = AgglomerativeClustering(n_clusters=<span class="number">2</span>, linkage=<span class="string">"ward"</span>,</span><br><span class="line">                                   connectivity=connectivity)</span><br><span class="line">    spectral = SpectralClustering(n_clusters=<span class="number">2</span>,</span><br><span class="line">                                  eigen_solver=<span class="string">"arpack"</span>,</span><br><span class="line">                                  affinity=<span class="string">"nearest_neighbors"</span>)</span><br><span class="line">    dbscan = DBSCAN(eps=<span class="number">.2</span>)</span><br><span class="line">    affinity_propagation = AffinityPropagation(damping=<span class="number">.9</span>, preference=-<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">    average_linkage = AgglomerativeClustering(</span><br><span class="line">        linkage=<span class="string">"average"</span>, affinity=<span class="string">"cityblock"</span>, n_clusters=<span class="number">2</span>,</span><br><span class="line">        connectivity=connectivity)</span><br><span class="line"></span><br><span class="line">    birch = Birch(n_clusters=<span class="number">2</span>)</span><br><span class="line">    clustering_algorithms = [</span><br><span class="line">        two_means, affinity_propagation, ms, spectral, ward, average_linkage,</span><br><span class="line">        dbscan, birch]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (name, algorithm) <span class="keyword">in</span> zip(clustering_names, clustering_algorithms)</span><br><span class="line">        fit!(algorithm, X)</span><br><span class="line">        y_pred = <span class="literal">nothing</span></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">            y_pred = predict(algorithm, X)</span><br><span class="line">        <span class="keyword">catch</span> <span class="literal">e</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">isa</span>(<span class="literal">e</span>, <span class="built_in">KeyError</span>)</span><br><span class="line">                y_pred = map(<span class="built_in">Int</span>, algorithm[:labels_])</span><br><span class="line">                clamp!(y_pred, <span class="number">0</span>, <span class="number">27</span>) <span class="comment"># not sure why some algorithms return -1</span></span><br><span class="line">            <span class="keyword">else</span> rethrow() <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        subplot(<span class="number">4</span>, length(clustering_algorithms), plot_num)</span><br><span class="line">        <span class="keyword">if</span> i_dataset == <span class="number">1</span></span><br><span class="line">            title(name, size=<span class="number">18</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> y_val <span class="keyword">in</span> unique(y_pred)</span><br><span class="line">            selected = y_pred.==y_val</span><br><span class="line">            scatter(X[selected, <span class="number">1</span>], X[selected, <span class="number">2</span>], color=string(colors0[y_val+<span class="number">1</span>]), s=<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">        xlim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        ylim(-<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">        xticks(())</span><br><span class="line">        yticks(())</span><br><span class="line">        plot_num += <span class="number">1</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><img src="http://oye4atjxc.bkt.clouddn.com/leanote/Classifier_Comparison/output_5_1.png" alt="png"></p><pre><code>/Users/kay/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/sklearn/manifold/spectral_embedding_.py:234: UserWarning: Graph is not fully connected, spectral embedding may not work as expected.  warnings.warn(&quot;Graph is not fully connected, spectral embedding&quot;/Users/kay/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/sklearn/cluster/hierarchical.py:193: UserWarning: the number of connected components of the connectivity matrix is 2 &gt; 1. Completing it to avoid stopping the tree early.  affinity=&apos;euclidean&apos;)/Users/kay/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/sklearn/cluster/hierarchical.py:426: UserWarning: the number of connected components of the connectivity matrix is 2 &gt; 1. Completing it to avoid stopping the tree early.  affinity=affinity)/Users/kay/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/sklearn/cluster/hierarchical.py:193: UserWarning: the number of connected components of the connectivity matrix is 3 &gt; 1. Completing it to avoid stopping the tree early.  affinity=&apos;euclidean&apos;)/Users/kay/.julia/v0.6/Conda/deps/usr/lib/python2.7/site-packages/sklearn/cluster/hierarchical.py:426: UserWarning: the number of connected components of the connectivity matrix is 3 &gt; 1. Completing it to avoid stopping the tree early.  affinity=affinity)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Comparing-different-clustering-algorithms-on-toy-datasets&quot;&gt;&lt;a href=&quot;#Comparing-different-clustering-algorithms-on-toy-datasets&quot; clas
      
    
    </summary>
    
    
      <category term="julia" scheme="onlookerliu.github.io/tags/julia/"/>
    
  </entry>
  
  <entry>
    <title>DataFrame_Demo</title>
    <link href="onlookerliu.github.io/2017/12/29/DataFrame-Demo/"/>
    <id>onlookerliu.github.io/2017/12/29/DataFrame-Demo/</id>
    <published>2017-12-28T17:37:43.000Z</published>
    <updated>2017-12-28T17:50:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Credits: this code and documentation was adapted from Paul Butler’s <a href="https://github.com/paulgb/sklearn-pandas" target="_blank" rel="noopener">sklearn-pandas</a></p><h1 id="DataFrames"><a href="#DataFrames" class="headerlink" title="DataFrames"></a>DataFrames</h1><p>It is possible to use a dataframe as a training set, but it needs to be converted to an array first. <code>DataFrameMapper</code> is used to specify how this conversion proceeds. For example, PCA might be applied to some numerical dataframe columns, and one-hot-encoding to a categorical column.</p><h2 id="Transformation-Mapping"><a href="#Transformation-Mapping" class="headerlink" title="Transformation Mapping"></a>Transformation Mapping</h2><p>Consider this dataset:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ScikitLearn</span><br><span class="line"><span class="keyword">using</span> DataFrames: DataFrame, NA, DataArray</span><br><span class="line"><span class="keyword">using</span> DataArrays: <span class="meta">@data</span></span><br><span class="line"><span class="meta">@sk_import</span> preprocessing: (LabelBinarizer, StandardScaler)</span><br><span class="line"></span><br><span class="line">data = DataFrame(pet=[<span class="string">"cat"</span>, <span class="string">"dog"</span>, <span class="string">"dog"</span>, <span class="string">"fish"</span>, <span class="string">"cat"</span>, <span class="string">"dog"</span>, <span class="string">"cat"</span>, <span class="string">"fish"</span>],</span><br><span class="line">                 children=[<span class="number">4.</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span>],</span><br><span class="line">                 salary=[<span class="number">90</span>, <span class="number">24</span>, <span class="number">44</span>, <span class="number">27</span>, <span class="number">32</span>, <span class="number">59</span>, <span class="number">36</span>, <span class="number">27</span>])</span><br></pre></td></tr></table></figure><table class="data-frame"><tr><th></th><th>pet</th><th>children</th><th>salary</th></tr><tr><th>1</th><td>cat</td><td>4.0</td><td>90</td></tr><tr><th>2</th><td>dog</td><td>6.0</td><td>24</td></tr><tr><th>3</th><td>dog</td><td>3.0</td><td>44</td></tr><tr><th>4</th><td>fish</td><td>3.0</td><td>27</td></tr><tr><th>5</th><td>cat</td><td>2.0</td><td>32</td></tr><tr><th>6</th><td>dog</td><td>3.0</td><td>59</td></tr><tr><th>7</th><td>cat</td><td>5.0</td><td>36</td></tr><tr><th>8</th><td>fish</td><td>4.0</td><td>27</td></tr></table><h3 id="Map-the-Columns-to-Transformations"><a href="#Map-the-Columns-to-Transformations" class="headerlink" title="Map the Columns to Transformations"></a>Map the Columns to Transformations</h3><p>The mapper takes a list of pairs. The first is a column name from the DataFrame, or a list containing one or multiple columns (we will see an example with multiple columns later). The second is an object which will perform the transformation which will be applied to that column:</p><p>Note: <code>ScikitLearn.DataFrameMapper</code> won’t be available until <code>DataFrames</code> is imported</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mapper = DataFrameMapper([(:pet, LabelBinarizer()),</span><br><span class="line">                          ([:children], StandardScaler())]);</span><br></pre></td></tr></table></figure><p>The difference between specifying the column selector as :column (as a single symbol) and [:column] (as a list with one element) is the shape of the array that is passed to the transformer. In the first case, a one dimensional array with be passed, while in the second case it will be a 2-dimensional array with one column, i.e. a column vector.</p><h3 id="Test-the-Transformation"><a href="#Test-the-Transformation" class="headerlink" title="Test the Transformation"></a>Test the Transformation</h3><p>We can use the <code>fit_transform!</code> shortcut to both fit the model and see what transformed data looks like. In this and the other examples, output is rounded to two digits with <code>round</code> to account for rounding errors on different hardware:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round(fit_transform!(mapper, copy(data)), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>8x4 Array{Float64,2}: 1.0  0.0  0.0   0.21 0.0  1.0  0.0   1.88 0.0  1.0  0.0  -0.63 0.0  0.0  1.0  -0.63 1.0  0.0  0.0  -1.46 0.0  1.0  0.0  -0.63 1.0  0.0  0.0   1.04 0.0  0.0  1.0   0.21</code></pre><p>Note that the first three columns are the output of the LabelBinarizer (corresponding to <code>cat</code>, <code>dog</code>, and <code>fish</code><br> respectively) and the fourth column is the standardized value for the number of children. In general, the columns are ordered according to the order given when the DataFrameMapper is constructed.</p><p>Now that the transformation is trained, we confirm that it works on new data:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sample = DataFrame(pet= [<span class="string">"cat"</span>], children= [<span class="number">5.</span>])</span><br><span class="line">round(transform(mapper, sample), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>1x4 Array{Float64,2}: 1.0  0.0  0.0  1.04</code></pre><h3 id="Transform-Multiple-Columns"><a href="#Transform-Multiple-Columns" class="headerlink" title="Transform Multiple Columns"></a>Transform Multiple Columns</h3><p>Transformations may require multiple input columns. In these cases, the column names can be specified in a list:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sk_import</span> decomposition: PCA</span><br><span class="line">mapper2 = DataFrameMapper([([:children, :salary], PCA(<span class="number">1</span>))]);</span><br></pre></td></tr></table></figure><p>Now running <code>fit_transform!</code> will run PCA on the <code>children</code> and <code>salary</code> columns and return the first principal component:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">round(fit_transform!(mapper2, copy(data)), <span class="number">1</span>)</span><br></pre></td></tr></table></figure><pre><code>8x1 Array{Float64,2}:  47.6 -18.4   1.6 -15.4 -10.4  16.6  -6.4 -15.4</code></pre><h3 id="Multiple-transformers-for-the-same-column"><a href="#Multiple-transformers-for-the-same-column" class="headerlink" title="Multiple transformers for the same column"></a>Multiple transformers for the same column</h3><p>Multiple transformers can be applied to the same column specifying them in a list:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sk_import</span> preprocessing: Imputer</span><br><span class="line">mapper3 = DataFrameMapper([([:age], [Imputer()])]; NA2NaN=<span class="literal">true</span>)</span><br><span class="line">data_3 = DataFrame(age= <span class="meta">@data</span>([<span class="number">1</span>, NA, <span class="number">3</span>]))</span><br><span class="line">fit_transform!(mapper3, data_3)</span><br></pre></td></tr></table></figure><pre><code>3x1 Array{Float64,2}: 1.0 2.0 3.0</code></pre><h3 id="Columns-that-don’t-need-any-transformation"><a href="#Columns-that-don’t-need-any-transformation" class="headerlink" title="Columns that don’t need any transformation"></a>Columns that don’t need any transformation</h3><p>Only columns that are listed in the <code>DataFrameMapper</code> are kept. To keep a column but don’t apply any transformation to it, use <code>nothing</code> as transformer:</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapper3 = DataFrameMapper([</span><br><span class="line">     (:pet, LabelBinarizer()),</span><br><span class="line">     (:children, <span class="literal">nothing</span>)])</span><br><span class="line">round(fit_transform!(mapper3, copy(data)))</span><br></pre></td></tr></table></figure><pre><code>8x4 Array{Float64,2}: 1.0  0.0  0.0  4.0 0.0  1.0  0.0  6.0 0.0  1.0  0.0  3.0 0.0  0.0  1.0  3.0 1.0  0.0  0.0  2.0 0.0  1.0  0.0  3.0 1.0  0.0  0.0  5.0 0.0  0.0  1.0  4.0</code></pre><h2 id="Cross-validation"><a href="#Cross-validation" class="headerlink" title="Cross-validation"></a>Cross-validation</h2><p>Now that we can combine features from a DataFrame, we may want to use cross-validation to see whether our model works.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sk_import</span> linear_model: LinearRegression</span><br><span class="line"></span><br><span class="line">pipe = Pipelines.Pipeline([</span><br><span class="line">     (:featurize, mapper),</span><br><span class="line">     (:lm, LinearRegression())])</span><br><span class="line">round(CrossValidation.cross_val_score(pipe, data, data[:salary]), <span class="number">2</span>)</span><br></pre></td></tr></table></figure><pre><code>3-element Array{Float64,1}:  -1.09  -5.3  -15.38</code></pre><h2 id="Iris-Dataset"><a href="#Iris-Dataset" class="headerlink" title="Iris Dataset"></a>Iris Dataset</h2><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RDatasets: dataset</span><br><span class="line"><span class="keyword">using</span> ScikitLearn</span><br><span class="line"></span><br><span class="line"><span class="meta">@sk_import</span> linear_model: LogisticRegression</span><br><span class="line"></span><br><span class="line">iris = dataset(<span class="string">"datasets"</span>, <span class="string">"iris"</span>)</span><br><span class="line"></span><br><span class="line">X = convert(<span class="built_in">Array</span>, iris[[:SepalLength, :SepalWidth, :PetalLength, :PetalWidth]])</span><br><span class="line">y = convert(<span class="built_in">Array</span>, iris[:Species])</span><br><span class="line"></span><br><span class="line">model = fit!(LogisticRegression(), X, y)</span><br><span class="line">accuracy = sum(predict(model, X) .== y) / length(y)</span><br><span class="line">println(<span class="string">"accuracy: <span class="variable">$accuracy</span>"</span>)  <span class="comment"># accuracy on training set</span></span><br></pre></td></tr></table></figure><pre><code>WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31WARNING: Compat.UTF8String is deprecated, use String instead.  likely near /Users/kay/.julia/v0.6/IJulia/src/kernel.jl:31accuracy: 0.96</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ScikitLearn.CrossValidation: cross_val_score</span><br><span class="line"></span><br><span class="line">cross_val_score(LogisticRegression(), X, y, cv=<span class="number">5</span>)  <span class="comment"># 5-fold</span></span><br></pre></td></tr></table></figure><pre><code>5-element Array{Float64,1}: 1.0      0.966667 0.933333 0.9      1.0     </code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ScikitLearn.GridSearch: GridSearchCV</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">gridsearch = GridSearchCV(LogisticRegression(), <span class="built_in">Dict</span>(:C =&gt; <span class="number">0.1</span>:<span class="number">0.1</span>:<span class="number">2.0</span>))</span><br><span class="line">fit!(gridsearch, X, y)</span><br><span class="line">println(<span class="string">"Best parameters: <span class="subst">$(gridsearch.best_params_)</span>"</span>)</span><br></pre></td></tr></table></figure><pre><code>Best parameters: Dict{Symbol,Any}(Pair{Symbol,Any}(:C, 1.1))</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> PyPlot</span><br><span class="line"></span><br><span class="line">plot([cv_res.parameters[:C] <span class="keyword">for</span> cv_res <span class="keyword">in</span> gridsearch.grid_scores_],</span><br><span class="line">[mean(cv_res.cv_validation_scores) <span class="keyword">for</span> cv_res <span class="keyword">in</span> gridsearch.grid_scores_])</span><br></pre></td></tr></table></figure><pre><code>[1m[36mINFO: [39m[22m[36mRecompiling stale cache file /Users/kay/.julia/lib/v0.6/PyPlot.ji for module PyPlot.[39m</code></pre><p><img src="http://oye4atjxc.bkt.clouddn.com/leanote/iris/output_4_1.png" alt="png"></p><pre><code>1-element Array{PyCall.PyObject,1}: PyObject &lt;matplotlib.lines.Line2D object at 0x1a3b5abc50&gt;</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?GridSearchCV</span><br></pre></td></tr></table></figure><pre><code>search: [1mG[22m[1mr[22m[1mi[22m[1md[22m[1mS[22m[1me[22m[1ma[22m[1mr[22m[1mc[22m[1mh[22m</code></pre><p>Exhaustive search over specified parameter values for an estimator.</p><p>Important members are fit, predict.</p><p>GridSearchCV implements a “fit” method and a “predict” method like any classifier except that the parameters of the classifier used to predict is optimized by cross-validation.</p><h2 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h2><p>estimator : object type that implements the “fit” and “predict” methods     A object of that type is instantiated for each grid point.</p><p>param_grid : dict or list of dictionaries     Dictionary with parameters names (string) as keys and lists of     parameter settings to try as values, or a list of such     dictionaries, in which case the grids spanned by each dictionary     in the list are explored. This enables searching over any sequence     of parameter settings.</p><p>scoring : string, callable or None, optional, default: None     A string (see model evaluation documentation) or     a scorer callable object / function with signature     $scorer(estimator, X, y)$.</p><p>fit_params : dict, optional     Parameters to pass to the fit method.</p><p>n_jobs : int, default 1     Number of jobs to run in parallel.</p><p>pre_dispatch : int, or string, optional     Controls the number of jobs that get dispatched during parallel     execution. Reducing this number can be useful to avoid an     explosion of memory consumption when more jobs get dispatched     than CPUs can process. This parameter can be:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">- None, in which case all the jobs are immediately</span><br><span class="line">  created and spawned. Use this for lightweight and</span><br><span class="line">  fast-running jobs, to avoid delays due to on-demand</span><br><span class="line">  spawning of the jobs</span><br><span class="line"></span><br><span class="line">- An int, giving the exact number of total jobs that are</span><br><span class="line">  spawned</span><br><span class="line"></span><br><span class="line">- A string, giving an expression as a function of n_jobs,</span><br><span class="line">  as in &apos;2*n_jobs&apos;</span><br></pre></td></tr></table></figure><p>iid : boolean, default=True     If True, the data is assumed to be identically distributed across     the folds, and the loss minimized is the total loss per sample,     and not the mean loss across the folds.</p><p>cv : integer or cross-validation generator, default=3     If an integer is passed, it is the number of folds.     Specific cross-validation objects can be passed, see     sklearn.cross_validation module for the list of possible objects</p><p>refit : boolean, default=True     Refit the best estimator with the entire dataset.     If “False”, it is impossible to make predictions using     this GridSearchCV instance after fitting.</p><p>verbose : integer     Controls the verbosity: the higher, the more messages.</p><p>error_score : ‘raise’ (default) or numeric     Value to assign to the score if an error occurs in estimator fitting.     If set to ‘raise’, the error is raised. If a numeric value is given,     FitFailedWarning is raised. This parameter does not affect the refit     step, which will always raise the error.</p><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><blockquote><blockquote><blockquote><p>from sklearn import svm, grid_search, datasets iris = datasets.load_iris() parameters = {‘kernel’:(‘linear’, ‘rbf’), ‘C’:[1, 10]} svr = svm.SVC() clf = grid_search.GridSearchCV(svr, parameters) clf.fit(iris.data, iris.target)</p></blockquote></blockquote></blockquote><p>…                             # doctest: +NORMALIZE_WHITESPACE +ELLIPSIS GridSearchCV(cv=None, error_score=…,        estimator=SVC(C=1.0, cache_size=…, class_weight=…, coef0=…,                      degree=…, gamma=…, kernel=’rbf’, max_iter=-1,                      probability=False, random_state=None, shrinking=True,                      tol=…, verbose=False),        fit_params={}, iid=…, n_jobs=1,        param_grid=…, pre_dispatch=…, refit=…,        scoring=…, verbose=…)</p><h2 id="Attributes"><a href="#Attributes" class="headerlink" title="Attributes"></a>Attributes</h2><p>grid<em>scores</em> : list of named tuples     Contains scores for all parameter combinations in param_grid.     Each entry corresponds to one parameter setting.     Each named tuple has the attributes:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* ``parameters``, a dict of parameter settings</span><br><span class="line">* ``mean_validation_score``, the mean score over the</span><br><span class="line">  cross-validation folds</span><br><span class="line">* ``cv_validation_scores``, the list of scores for each fold</span><br></pre></td></tr></table></figure><p>best<em>estimator</em> : estimator     Estimator that was chosen by the search, i.e. estimator     which gave highest score (or smallest loss if specified)     on the left out data. Not available if refit=False.</p><p>best<em>score</em> : float     Score of best_estimator on the left out data.</p><p>best<em>params</em> : dict     Parameter setting that gave the best results on the hold out data.</p><p>scorer_ : function     Scorer function used on the held out data to choose the best     parameters for the model.</p><h2 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h2><p>The parameters selected are those that maximize the score of the left out data, unless an explicit score is passed in which case it is used instead.</p><p>If <code>n_jobs</code> was set to a value higher than one, the data is copied for each point in the grid (and not <code>n_jobs</code> times). This is done for efficiency reasons if individual jobs take very little time, but may raise errors if the dataset is large and not enough memory is available.  A workaround in this case is to set <code>pre_dispatch</code>. Then, the memory is copied only <code>pre_dispatch</code> many times. A reasonable value for <code>pre_dispatch</code> is <code>2 * n_jobs</code>.</p><h2 id="See-Also"><a href="#See-Also" class="headerlink" title="See Also"></a>See Also</h2><p>:class:<code>ParameterGrid</code>:     generates all the combinations of a an hyperparameter grid.</p><p>:func:<code>sklearn.cross_validation.train_test_split</code>:     utility function to split the data into a development set usable     for fitting a GridSearchCV instance and an evaluation set for     its final evaluation.</p><p>:func:<code>sklearn.metrics.make_scorer</code>:     Make a scorer from a performance metric or loss function.</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Grid</span><br></pre></td></tr></table></figure><pre><code>UndefVarError: Grid not defined</code></pre><p>​    </p><pre><code>Stacktrace: [1] include_string(::String, ::String) at ./loading.jl:515</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> PyCall</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PyCall.np</span><br></pre></td></tr></table></figure><pre><code>UndefVarError: np not defined</code></pre><p>​    </p><pre><code>Stacktrace: [1] include_string(::String, ::String) at ./loading.jl:515</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pyimport</span> numpy</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pytypeof(model[:predict](X))</span><br></pre></td></tr></table></figure><pre><code>PyObject &lt;type &apos;numpy.ndarray&apos;&gt;</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyisinstance(model[:predict](X), numpy.ndarray)</span><br></pre></td></tr></table></figure><pre><code>true</code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@pyimport</span> sklearn.decomposition as decomp</span><br><span class="line"><span class="meta">@pyimport</span> sklearn.linear_model as lin</span><br></pre></td></tr></table></figure><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">log_mod = lin.LinearRegression()[:fit](randn(<span class="number">50</span>, <span class="number">3</span>), rand(<span class="number">0</span>:<span class="number">1</span>, <span class="number">50</span>))</span><br><span class="line">log_mod[:predict](randn(<span class="number">50</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><pre><code>50-element Array{Float64,1}:  0.162175   0.722845   0.362414   0.549103   0.763084   0.270936   0.485301   0.41325    0.393773   0.663121   0.595053   0.498473   0.42885    ⋮          0.639132   0.702459   0.60041    0.229709   0.296202   0.34932   -0.0609968  0.680865   0.0816659  0.433398   0.463019   0.542642 </code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m = decomp.PCA()[:fit](randn(<span class="number">20</span>,<span class="number">10</span>))</span><br><span class="line">m[:transform](randn(<span class="number">30</span>, <span class="number">10</span>))</span><br></pre></td></tr></table></figure><pre><code>30×10 Array{Float64,2}:  0.0492857  -0.740589     0.0282217  …   0.607899    0.582307    1.04095   -0.766687   -0.00563516  -0.972977      -0.111523   -1.61246     1.21119   -0.304345   -0.195561     0.523944       1.17019    -0.159978   -2.34993   -1.5165      0.725348    -0.589536      -0.077829    0.384159   -2.53808    0.10421    -0.592984    -0.579348       0.581532    0.0428926  -0.231679  -1.92898     1.20708     -1.7819     …  -1.17005    -0.994895   -1.03124   -0.436318    0.954802    -0.300581      -0.849914    2.33628     0.810238  -1.10481     0.913266     0.872128      -0.0772121  -0.562754   -0.689544  -0.456214    0.16222      0.0980988     -0.773041   -0.764416    0.683189  -0.273398    1.21917      0.627378      -1.00523     0.514595   -2.58339    0.570575    0.247493    -1.07453    …  -0.366462    0.36321    -0.639821  -0.233897   -1.67526     -1.66674        1.33278     0.122427    1.04181   -0.624457    0.741128    -1.67955       -0.311017    1.28079    -0.685025   ⋮                                   ⋱                                     -0.388898   -2.29054      0.498946      -2.33793     1.6837     -0.488352   0.403224    0.317897    -0.290501      -1.13959     0.55129     1.11115    0.857659   -0.918163    -0.0997422  …  -1.3764      0.581696   -0.0762093  0.304933    0.549334     1.4302         0.335545   -0.934283    0.110987  -0.255592   -1.78458     -0.831169       0.572008    1.22434     0.335873   0.31237    -1.03264     -1.22471       -0.258204   -0.299442   -0.995692   0.405265   -0.508662     0.657679      -0.404234    1.092      -0.439828   0.390309   -1.77777      0.132518   …   2.10857    -1.26122     0.442358  -0.687856    1.27136      1.76452       -1.73486    -0.400697    0.084941  -0.963835   -0.826341    -1.03699       -0.11351     2.36443    -1.27699   -1.94291    -1.02019      0.786294      -2.08115    -0.954      -1.44567   -0.926151    1.12885     -0.56298       -1.75913     0.183775   -0.987595 </code></pre><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model[:predict](X)</span><br></pre></td></tr></table></figure><pre><code>PyObject array([&apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;, &apos;setosa&apos;,       &apos;setosa&apos;, &apos;setosa&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;virginica&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;virginica&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;,       &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;versicolor&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;versicolor&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;,       &apos;virginica&apos;, &apos;virginica&apos;, &apos;virginica&apos;],      dtype=&apos;|S10&apos;)</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Credits: this code and documentation was adapted from Paul Butler’s &lt;a href=&quot;https://github.com/paulgb/sklearn-pandas&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
      <category term="julia" scheme="onlookerliu.github.io/tags/julia/"/>
    
  </entry>
  
  <entry>
    <title>dot语法总结</title>
    <link href="onlookerliu.github.io/2017/12/28/dot%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>onlookerliu.github.io/2017/12/28/dot语法总结/</id>
    <published>2017-12-27T18:48:49.000Z</published>
    <updated>2017-12-27T19:07:17.595Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>dot是开源工具包<a href="http://graphviz.org/" target="_blank" rel="noopener">Graphviz</a>上用来画图的一门脚本语言。通过布局引擎解析脚本得到图像，然后可以将图像导出为各种格式以满足需求。主要用于编写脚本来画各种结构示意图和流程图。</p><p>Graphviz的文件后缀名是<code>.gv</code>。每个<code>.gv</code>文件代表一个图，可以通过<code>dot -Tpng example.gv -o example.png</code>命令生成图像，或者使用Graphviz提供的工具gvedit来编辑和运行脚本。</p><p>dot脚本的语法特别简单，官方doc只有8页。下面简单介绍下dot脚本的一些语法。</p><h2 id="2-图的声明"><a href="#2-图的声明" class="headerlink" title="2.图的声明"></a>2.图的声明</h2><p>使用<code>digraph graphName</code>可以申明一个图，具体实现代码用一对花括号包裹起来。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">digraph graph1 &#123;</span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当图中某些内容同属一个类时，我们可以申明一个子图将其包含在齐齐。使用<code>subgraph cluster_subgraphName</code>可以申明一个子图<a href="注意，子图的名字必须以cluster开始，否则引擎在解析时无法识别">^1</a>。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">subgraph cluster_subgraphName &#123;</span><br><span class="line">  <span class="comment">// statement</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看一个具体的例子</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">digraph example1 &#123;</span><br><span class="line">  label = <span class="string">"this is a graph"</span>;</span><br><span class="line">  a;b;</span><br><span class="line"></span><br><span class="line">  subgraph cluster_subgraphName1 &#123;</span><br><span class="line">    label = <span class="string">"this is a  subgraph"</span>;</span><br><span class="line">    bgcolor = greenyellow;</span><br><span class="line">    c;d;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.blog.csdn.net/20160731141833407"><br></div><h2 id="3-结点和边的声明"><a href="#3-结点和边的声明" class="headerlink" title="3.结点和边的声明"></a>3.结点和边的声明</h2><p>dot里结点的申明非常简单，只需要键入结点名字<code>nodeName</code>；同时，结点默认的现实内容为结点名字。</p><p>当结点内容有空格时，我们可以将结点用一堆双引号包含起来，解析引擎会直接提取双引号里面的内容创建结点。</p><p>使用符号<code>-&gt;</code>就可以申明一条边，<code>a -&gt; b</code>就代表由结点a连接到结点b的边<a href="这是在不需要对结点进行单独的属性设置情况下的">^2</a>。结点也可以连接到结点自身。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a;</span><br><span class="line">b;</span><br><span class="line">a -&gt; b;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.blog.csdn.net/20160731143659300"><br></div><p>申明多条边的便捷语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a; b; c;</span><br><span class="line">a -&gt; b -&gt; c -&gt; c;</span><br></pre></td></tr></table></figure><h2 id="4-图的属性"><a href="#4-图的属性" class="headerlink" title="4.图的属性"></a>4.图的属性</h2><p>图的属性可以写在<code>graph[]</code>里，也可以直接写在外面:</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">digraph graph1 &#123;</span><br><span class="line">  bgcolor = red;</span><br><span class="line">  graph [bgcolor = red];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>图的属性包括</strong>：</p><ol><li><code>bgcolor</code>：设置图的背景颜色，可以使用rgb值，也可以用<code>#rrggbb</code>编码形式</li><li><code>label</code>：设置图的描述。label会继承到子图，如果不想子图重复label需手动设置</li><li><code>rankdir</code>：设置图的方向，包括：TB（top to bottom）、BT（bottom to top）、LR(left to Right）、RL（right to left）</li><li><code>rotate</code>：设置图的旋转。如<code>rotata = 90</code>代表旋转90度，默认逆时针</li><li><code>ratio</code>：设置图的长宽比，可以是一个浮点数，也可以是：fill、compress、auto</li></ol><h2 id="5-结点属性和边属性"><a href="#5-结点属性和边属性" class="headerlink" title="5.结点属性和边属性"></a>5.结点属性和边属性</h2><p>结点和边的属性设置非常简单，只需要在结点或者边的声明后面加上方括号，然后在方括号里填写属性键值对即可。键值对之间使用逗号进行分割。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a [shape = egg, label = <span class="string">"this is node a"</span>];</span><br><span class="line">b [shape = circle, label = <span class="string">"this is node b"</span>];</span><br><span class="line">a -&gt; b [style = dashed, label = <span class="string">"this is edge a to b"</span>];</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.blog.csdn.net/20160731153349495"><br></div><p><strong>结点的常用属性</strong>：</p><ol><li><code>shape</code>：设置结点形状。包括：Mrecord（圆角矩形）、record（矩形）、circle（圆形）、box（矩形，和record略有区别，下面会讲到）、egg（蛋形）、doublecircle（双圆形）、plaintext（纯文本）、 ellipse（椭圆，默认）。</li><li><code>label</code>：设置结点的显示内容，内容用双引号包含，可以使用转义字符。当结点内容!=结点名时使用</li><li><code>style</code>：设置结点的样式。包括：filled(填充)、dotted（点状边框）、solid（普通边框）、dashed（虚线边框）、bold（边框加粗）、invis（隐形）。</li><li><code>color</code>：设置边框颜色。可以使用单词形式或者<code>#rrggbb</code>形式。</li><li><code>fillcolor</code>：设置填充颜色，仅style = filled时有效。</li><li><code>width</code>：设置结点宽度。</li><li><code>height</code>：设置结点高度。</li><li><code>perpheries</code>：设置结点边框个数。</li><li><code>fontcolor</code>：设置结点内容颜色。可以使用单词形式或者<code>#rrggbb</code>形式。</li></ol><p><strong>边的常用属性</strong>：<br>1.<code>style</code>：设置边的形状。包括：solid（实线）、dashed（虚线）、dotted（点线）、bold（加粗）、invis（隐形）。</p><ol><li><code>label</code>：设置边标签。内容用双引号包含，可以使用转义字符。</li><li><code>color</code>：设置边颜色。可以使用单词形式或者<code>#rrggbb</code>形式。</li><li><code>arrowhead</code>：设置结点箭头样式。包括：none、empty、odiamond等。</li></ol><p>使用<code>node[]</code>和<code>edge[]</code>可以分别设置结点和边的全局设置：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">digraph graph1&#123;</span><br><span class="line">node [shape = egg];</span><br><span class="line">edge [style = dashed];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.blog.csdn.net/20160731152414150"><br></div><h2 id="6-其他应用"><a href="#6-其他应用" class="headerlink" title="6.其他应用"></a>6.其他应用</h2><h3 id="使dot支持中文"><a href="#使dot支持中文" class="headerlink" title="使dot支持中文"></a>使dot支持中文</h3><p>Graphviz默认是不支持中文的，输入的中文在生成的图中显示为一个空方块。如果想要让其支持中文，可以尝试以下方法：</p><ul><li>在命令行制定<code>-Nfontname = xxx.ttf</code>，在gv文件中输入utf-8编码的汉字</li><li>给graph、node、edge设置<code>fontname = xxx.ttf</code>然后设置label</li></ul><h3 id="使用record的label属性生成表格"><a href="#使用record的label属性生成表格" class="headerlink" title="使用record的label属性生成表格"></a>使用record的label属性生成表格</h3><p>前面提到record和box有所区别。原因就是：设置为record和Mrecord的结点的label属性可以很方便地生成单列的表格和UML图等。（类似于XAML里面的stack）</p><p>用一对双引号+一对花括号包含起来的就是表格内容，不同的格子之间用符号 | 隔开，尖括号里的内容表示一个锚点</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">example [shape = record, label = <span class="string">"&#123;&lt;head&gt;cell1 | cell2 | cell3&#125;"</span>];</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.blog.csdn.net/20160731165525158"><br></div><p>也可以生成空格只保留锚点：</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">label=<span class="string">"&#123;&lt;b1&gt;|&lt;b2&gt;|&lt;b3&gt;&#125;"</span></span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.blog.csdn.net/20160731165843222"><br></div><h3 id="使用html标签生成表格"><a href="#使用html标签生成表格" class="headerlink" title="使用html标签生成表格"></a>使用html标签生成表格</h3><p>如果record生成的表格不符合预期，还可以使用html标签生成表格。只需要将结点的label属性设置为相应的html代码即可。</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">table1 [label=&lt;</span><br><span class="line">&lt;table&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td port=<span class="string">"one"</span>&gt;<span class="number">1</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">2</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">  &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">3</span>&lt;/td&gt;</span><br><span class="line">    &lt;td&gt;<span class="number">4</span>&lt;/td&gt;</span><br><span class="line">  &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&gt;];</span><br></pre></td></tr></table></figure><p><code>port</code>属性可以给<code>td</code>增加一个锚点</p><h3 id="表格锚点的应用"><a href="#表格锚点的应用" class="headerlink" title="表格锚点的应用"></a>表格锚点的应用</h3><p>cell的锚点可以让使用者在cell之间划线</p><p>引用cell的锚点的语法为<code>table: anchorName</code></p><p>示例代码<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">digraph example2 &#123;</span><br><span class="line">  node [shape = record];</span><br><span class="line">  table1 [label = <span class="string">"&#123;&lt;head&gt;cell1 | cell2 | cell3&#125;"</span>];</span><br><span class="line">  table2 [label = <span class="string">"&#123;&lt;head&gt;cell1 | cell2&#125;"</span>];</span><br><span class="line"></span><br><span class="line">  table1: head -&gt; table2: head</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><div align="center"><br><img src="http://img.blog.csdn.net/20160731170546038"><br></div><h3 id="生成图形"><a href="#生成图形" class="headerlink" title="生成图形"></a>生成图形</h3><p>可以使用结点的某些属性来生成图形，如</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">circle [label=<span class="string">""</span>, shape=<span class="string">"circle"</span>, width=<span class="number">0.5</span>, fixedsize=<span class="literal">true</span>, style=filled, color=black];</span><br></pre></td></tr></table></figure><p>就生成了一个实心的黑色圆形。</p><h3 id="命令行全局设置"><a href="#命令行全局设置" class="headerlink" title="命令行全局设置"></a>命令行全局设置</h3><p>不仅可以使用代码里的全局设置，还可以在命令行里进行全局设置，这样就可以根据不同要求来生成图形。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dot -Grankdir=LR -Nshape=<span class="string">"plaintext"</span> -Earrowhead=<span class="string">"odiamond"</span> -Tpng example.dot -o example.png</span><br></pre></td></tr></table></figure><p><code>Grankdir</code>: graph rankdir<br><code>Nshape</code>: node shape<br><code>Earrowhead</code>: edge arrowhead</p><p>其他一些属性也可以按照这种规则填写</p><h3 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h3><p>dot的注释使用<code>//</code>（单行）或者<code>/* */</code>（多行）</p><h2 id="7-几个实例"><a href="#7-几个实例" class="headerlink" title="7.几个实例"></a>7.几个实例</h2><p>(1) 复杂的标签</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">digraph structs&#123;</span><br><span class="line">  <span class="comment">/* 把结点默认形状设置为矩形record,默认的是圆角矩形Mrecord */</span></span><br><span class="line">  node [shape = record];</span><br><span class="line"></span><br><span class="line">  struct1 [label = <span class="string">"left|middle|right"</span>];</span><br><span class="line">  struct2 [label = <span class="string">"one|two"</span>];</span><br><span class="line">  struct3 [label = <span class="string">"hello\nworld|&#123;b|&#123;c|d|e&#125;|f&#125;|g|h"</span>];</span><br><span class="line"></span><br><span class="line">  struct1 -&gt; struct2;</span><br><span class="line">  struct1 -&gt; struct3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.my.csdn.net/uploads/201212/03/1354528144_9002.png"><br></div><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">graph picture &#123;</span><br><span class="line"><span class="comment">//这幅图的名字</span></span><br><span class="line">label = <span class="string">"I love you"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图名字的位置在bottom，也可以是t</span></span><br><span class="line">labelloc = b;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图名字的位置在left，也可以是r</span></span><br><span class="line">labeljust = l;</span><br><span class="line"></span><br><span class="line">edge[decorate = <span class="literal">true</span>];</span><br><span class="line"></span><br><span class="line">C -- D [label = <span class="string">"s1"</span>];</span><br><span class="line">C -- E [label = <span class="string">"s2"</span>];</span><br><span class="line">C -- F [label = <span class="string">"s3"</span>];</span><br><span class="line">D -- E [label = <span class="string">"s4"</span>];</span><br><span class="line">D -- F [label = <span class="string">"s5"</span>];</span><br><span class="line"></span><br><span class="line">edge[decorate = <span class="literal">false</span>, labelfontcolor = blue, fontcolor = red];</span><br><span class="line">C1 -- D1 [headlabel = <span class="string">"c1"</span>,taillabel = <span class="string">"d1"</span>,label = <span class="string">"c1 - d1"</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.my.csdn.net/uploads/201212/03/1354528195_3992.png"><br></div><p>(2) 行列对齐</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">digraph html &#123;</span><br><span class="line">rankdir = LR;</span><br><span class="line">&#123;</span><br><span class="line">node[shape = plaintext];</span><br><span class="line"><span class="number">1995</span> -&gt; <span class="number">1996</span> -&gt; <span class="number">1997</span> -&gt; <span class="number">1998</span> -&gt; <span class="number">1999</span> -&gt; <span class="number">2000</span> -&gt; <span class="number">2001</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">node[shape = box, style = filled];</span><br><span class="line">WAR3 -&gt; Xhero -&gt; Footman -&gt; DOTA:</span><br><span class="line">WAR3 -&gt; Battleship;</span><br><span class="line">&#125;</span><br><span class="line">&#123;rank = same; <span class="number">1996</span>; WAR3;&#125;</span><br><span class="line">&#123;rank = same; <span class="number">1998</span>; Xhero; Battleship;&#125;</span><br><span class="line">&#123;rank = same; <span class="number">1999</span>; Footman;&#125;</span><br><span class="line">&#123;rank = same; <span class="number">2001</span>; DOTA;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.my.csdn.net/uploads/201212/03/1354528314_2222.png"><br></div><p>(2)二叉树</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">digraph G &#123;</span><br><span class="line">label = <span class="string">"Binary search tree"</span>;</span><br><span class="line">node [shape = record];</span><br><span class="line"></span><br><span class="line">A [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;A|&lt;f2&gt;"</span>];</span><br><span class="line">B [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;B|&lt;f2&gt;"</span>];</span><br><span class="line">C [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;C|&lt;f2&gt;"</span>];</span><br><span class="line">D [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;D|&lt;f2&gt;"</span>];</span><br><span class="line">E [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;E|&lt;f2&gt;"</span>];</span><br><span class="line">F [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;F|&lt;f2&gt;"</span>];</span><br><span class="line">G [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;G|&lt;f2&gt;"</span>];</span><br><span class="line"></span><br><span class="line">A:f0 -&gt; B:f1;</span><br><span class="line">A:f2 -&gt; C:f1;</span><br><span class="line">B:f0 -&gt; D:f1;</span><br><span class="line">B:f2 -&gt; E:f1;</span><br><span class="line">C:f0 -&gt; F:f1;</span><br><span class="line">C:f2 -&gt; G:f1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.my.csdn.net/uploads/201212/03/1354528355_9701.png"><br></div><p>(4)哈希表</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">digraph G&#123;</span><br><span class="line">nodesep = .<span class="number">0</span>5;</span><br><span class="line">rankdir = LR;</span><br><span class="line"></span><br><span class="line">node [shape = record,width = .<span class="number">1</span>,height = .<span class="number">1</span>];</span><br><span class="line">node0 [label = <span class="string">"&lt;f0&gt;|&lt;f1&gt;|&lt;f2&gt;|&lt;f3&gt;|&lt;f4&gt;|&lt;f5&gt;|&lt;f6&gt;|"</span>,height = <span class="number">2.5</span>];</span><br><span class="line"></span><br><span class="line">node [width = <span class="number">1.5</span>];</span><br><span class="line">node1 [label = <span class="string">"&#123;&lt;n&gt;n14|719|&lt;p&gt;&#125;"</span>];</span><br><span class="line">node2 [label = <span class="string">"&#123;&lt;n&gt;a1|805|&lt;p&gt;&#125;"</span>];</span><br><span class="line">node3 [label = <span class="string">"&#123;&lt;n&gt;i9|718|&lt;p&gt;&#125;"</span>];</span><br><span class="line">node4 [label = <span class="string">"&#123;&lt;n&gt;e5|989|&lt;p&gt;&#125;"</span>];</span><br><span class="line">node5 [label = <span class="string">"&#123;&lt;n&gt;t20|959|&lt;p&gt;&#125;"</span>];</span><br><span class="line">node6 [label = <span class="string">"&#123;&lt;n&gt;o15|794|&lt;p&gt;&#125;"</span>];</span><br><span class="line">node7 [label = <span class="string">"&#123;&lt;n&gt;s19|659|&lt;p&gt;&#125;"</span>];</span><br><span class="line"></span><br><span class="line">node0:f0 -&gt; node1:n;</span><br><span class="line">node0:f1 -&gt; node2:n;</span><br><span class="line">node0:f2 -&gt; node3:n;</span><br><span class="line">node0:f5 -&gt; node4:n;</span><br><span class="line">node0:f6 -&gt; node5:n;</span><br><span class="line">node2:p -&gt; node6:n;</span><br><span class="line">node4:p -&gt; node7:n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.my.csdn.net/uploads/201212/03/1354528430_5081.png"><br></div><p>(5)流程图</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">digraph G&#123;</span><br><span class="line">subgraph cluster0 &#123;</span><br><span class="line">node [style = filled,color = white];</span><br><span class="line">style = filled;</span><br><span class="line">color = lightgrey;</span><br><span class="line">a0 -&gt; a1 -&gt; a2 -&gt; a3;</span><br><span class="line">label = <span class="string">"process #1"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">subgraph cluster1 &#123;</span><br><span class="line">node [style = filled];</span><br><span class="line">b0 -&gt; b1 -&gt; b2 -&gt; b3;</span><br><span class="line">label = <span class="string">"process #2"</span>;</span><br><span class="line">color = blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">start -&gt; a0;</span><br><span class="line">start -&gt; b0;</span><br><span class="line">a1 -&gt; b3;</span><br><span class="line">b2 -&gt; a3;</span><br><span class="line">a3 -&gt; a0;</span><br><span class="line">a3 -&gt; end;</span><br><span class="line">b3 -&gt; end;</span><br><span class="line">start [shape = Mdiamond];</span><br><span class="line">end [shape = Msquare];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://img.my.csdn.net/uploads/201212/03/1354528519_8284.png"><br></div><h2 id="8-参考文献"><a href="#8-参考文献" class="headerlink" title="8.参考文献"></a>8.参考文献</h2><ol><li>啄木鸟社区关于GraphViz的文章：<a href="https://wiki.woodpecker.org.cn/moin/GraphViz" target="_blank" rel="noopener">https://wiki.woodpecker.org.cn/moin/GraphViz</a></li><li>Cnblog上的一篇文章：<a href="http://www.cnblogs.com/CoolJie/archive/2012/07/17/graphviz.html" target="_blank" rel="noopener">http://www.cnblogs.com/CoolJie/archive/2012/07/17/graphviz.html</a></li><li>简书上的dot学习笔记：<a href="http://www.jianshu.com/p/e44885a777f0" target="_blank" rel="noopener">http://www.jianshu.com/p/e44885a777f0</a></li><li>dot官方文档：<a href="http://www.graphviz.org/pdf/dotguide.pdf" target="_blank" rel="noopener">http://www.graphviz.org/pdf/dotguide.pdf</a></li><li>CSDN上关于python实现graphviz的文章：<a href="http://blog.csdn.net/a1368783069/article/details/52067404" target="_blank" rel="noopener">http://blog.csdn.net/a1368783069/article/details/52067404</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h2&gt;&lt;p&gt;dot是开源工具包&lt;a href=&quot;http://graphviz.org/&quot; target=&quot;_blank&quot; rel=&quot;n
      
    
    </summary>
    
    
      <category term="dot" scheme="onlookerliu.github.io/tags/dot/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode Notes 001</title>
    <link href="onlookerliu.github.io/2017/12/28/LeetCode-Notes-001/"/>
    <id>onlookerliu.github.io/2017/12/28/LeetCode-Notes-001/</id>
    <published>2017-12-27T17:14:13.000Z</published>
    <updated>2018-02-28T11:57:26.084Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Matrix"><a href="#Matrix" class="headerlink" title="Matrix"></a>Matrix</h3><p>Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.</p><p>The distance between two adjacent cells is 1.</p><p><strong>Example 1:</strong></p><p>Input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">0 0 0</span><br></pre></td></tr></table></figure></p><p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">0 0 0</span><br></pre></td></tr></table></figure></p><p><strong>Example 2:</strong></p><p>Input:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">1 1 1</span><br></pre></td></tr></table></figure></p><p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0 0 0</span><br><span class="line">0 1 0</span><br><span class="line">1 2 1</span><br></pre></td></tr></table></figure></p><p><strong>Note:</strong></p><ol><li>The number of elements of the given matrix will not exceed 10,000.</li><li>There are at least one 0 in the given matrix.</li><li>The cells are adjacent in only four directions: up, down, left and right.</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[][]&#125; matrix</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> updateMatrix = <span class="function"><span class="keyword">function</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// BFS</span></span><br><span class="line">  <span class="keyword">let</span> q = [];</span><br><span class="line">  <span class="keyword">let</span> hash = [];</span><br><span class="line">  <span class="keyword">let</span> [m, n] = [matrix.length, matrix[<span class="number">0</span>].length];</span><br><span class="line">  <span class="keyword">const</span> dir = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">-1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>], [<span class="number">0</span>, <span class="number">-1</span>]];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">    hash[i] = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (matrix[i][j] === <span class="number">0</span>) &#123;</span><br><span class="line">        q.push(&#123;<span class="attr">x</span>: i, <span class="attr">y</span>: j, <span class="attr">step</span>: <span class="number">0</span>&#125;);</span><br><span class="line">        hash[i][j] = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (q.length) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = q.shift();</span><br><span class="line">    <span class="keyword">let</span> &#123;x, y, step&#125; = item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> _x = x + dir[i][<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">let</span> _y = y + dir[i][<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">if</span> (_x &lt; <span class="number">0</span> || _x &gt;= m || _y &lt; <span class="number">0</span> || _y &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">if</span> (hash[_x][_y] !== <span class="literal">undefined</span>) <span class="keyword">continue</span>;</span><br><span class="line">      hash[_x][_y] = step + <span class="number">1</span>;</span><br><span class="line">      q.push(&#123;<span class="attr">x</span>: _x, <span class="attr">y</span>: _y, <span class="attr">step</span>: step + <span class="number">1</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> hash;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3Sum"><a href="#3Sum" class="headerlink" title="3Sum"></a>3Sum</h3><p>Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p><p><strong>Note:</strong> The solution set must not contain duplicate triplets.</p><p>For example, given array S = [-1, 0, 1, 2, -1, -4],</p><p>A solution set is:<br>[<br>  [-1, 0, 1],<br>  [-1, -1, 2]<br>]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> threeSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums</span>) </span>&#123;</span><br><span class="line">  nums.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ans = []</span><br><span class="line">  <span class="keyword">let</span> len = nums.length</span><br><span class="line"></span><br><span class="line">  <span class="comment">// enumerate the array, and assume the item to be the smallest one</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++ ) &#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// have already enumerate the item as the smallest one among the three</span></span><br><span class="line">    <span class="comment">// then continue</span></span><br><span class="line">    <span class="keyword">if</span> (i &amp;&amp; nums[i] === nums[i - <span class="number">1</span>]) <span class="keyword">continue</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">// the sum of another two should be</span></span><br><span class="line">    <span class="keyword">let</span> target = -nums[i]</span><br><span class="line"></span><br><span class="line">    <span class="comment">// the indexes of another two </span></span><br><span class="line">    <span class="keyword">let</span> [start, end] = [i + <span class="number">1</span>, len - <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">      <span class="keyword">let</span> sum = nums[start] + nums[end]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">        end--</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">        start++</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ans.push([nums[i], nums[start], nums[end]])</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// remove the duplication</span></span><br><span class="line">        <span class="keyword">while</span> (nums[start] === nums[start + <span class="number">1</span>]) </span><br><span class="line">          start++</span><br><span class="line">        start++</span><br><span class="line"></span><br><span class="line">        <span class="comment">// remove the duplication</span></span><br><span class="line">        <span class="keyword">while</span> (nums[end] === nums[end - <span class="number">1</span>])</span><br><span class="line">          end--</span><br><span class="line">        end--</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3Sum-Closest"><a href="#3Sum-Closest" class="headerlink" title="3Sum Closest"></a>3Sum Closest</h3><p>Given an array S of n integers, find three integers in S such that the sum is closest to a given number, target. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p><p>For example, given array <code>S = {-1 2 1 -4}</code>, and <code>target = 1</code>.</p><p>The sum that is closest to the target is <code>2</code>. (-1 + 2 + 1 = 2).</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">binarySearch</span>(<span class="params">a, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">0</span></span><br><span class="line">    , end = a.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(start &lt;= end) &#123;</span><br><span class="line">    <span class="keyword">var</span> mid = ~~((start + end) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (a[mid] &gt;= target)</span><br><span class="line">      end = mid - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">      start = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> threeSumClosest = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = nums.length;</span><br><span class="line">  <span class="keyword">var</span> ans = <span class="literal">Infinity</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> a = target - nums[i] - nums[j];</span><br><span class="line">      <span class="keyword">var</span> pos = binarySearch(nums, a);</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="built_in">Math</span>.max(<span class="number">0</span>, pos - <span class="number">1</span>); k &lt;= <span class="built_in">Math</span>.min(pos + <span class="number">0</span>, len - <span class="number">1</span>); k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (k === i || k === j) </span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> sum = nums[i] + nums[j] + nums[k];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Math</span>.abs(sum - target) &lt; <span class="built_in">Math</span>.abs(ans - target))</span><br><span class="line">          ans = sum;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4Sum"><a href="#4Sum" class="headerlink" title="4Sum"></a>4Sum</h3><p>Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.</p><p><strong>Note:</strong> The solution set must not contain duplicate quadruplets.</p><p>For example, given array S = [1, 0, -1, 0, -2, 2], and target = 0.</p><p>A solution set is:<br>[<br>  [-1,  0, 0, 1],<br>  [-2, -1, 1, 2],<br>  [-2,  0, 0, 2]<br>]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; nums</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; target</span></span><br><span class="line"><span class="comment"> * @return &#123;number[][]&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  nums.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hash = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> len = nums.length;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> a = nums[i]</span><br><span class="line">        , b = nums[j]</span><br><span class="line">        , c = a + b;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (hash[c] === <span class="literal">undefined</span>) </span><br><span class="line">        hash[c] = [[i, j]];</span><br><span class="line">      <span class="keyword">else</span> </span><br><span class="line">        hash[c].push([i, j]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> ans = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hashSet = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> a = nums[i]</span><br><span class="line">        , b = nums[j]</span><br><span class="line">        , sum = target - a - b;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!hash[sum])</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>, _len = hash[sum].length; k &lt; _len; k++) &#123;</span><br><span class="line">        <span class="keyword">var</span> item = hash[sum][k];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (item[<span class="number">0</span>] === i || item[<span class="number">1</span>] === i || item[<span class="number">0</span>] === j || item[<span class="number">1</span>] === j)</span><br><span class="line">          <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> c = nums[item[<span class="number">0</span>]]</span><br><span class="line">          , d = nums[item[<span class="number">1</span>]];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> tmp = [a, b, c, d].sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> a - b;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str = tmp.join(<span class="string">','</span>);</span><br><span class="line">        <span class="keyword">if</span> (!hashSet[str]) &#123;</span><br><span class="line">          hashSet[str] = <span class="literal">true</span>;</span><br><span class="line">          ans.push(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="4Sum-II"><a href="#4Sum-II" class="headerlink" title="4Sum II"></a>4Sum II</h3><p>Given four lists A, B, C, D of integer values, compute how many tuples (i, j, k, l) there are such that A[i] + B[j] + C[k] + D[l] is zero.</p><p>To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.</p><p><strong>Example:</strong></p><p>Input:<br>A = [ 1, 2]<br>B = [-2,-1]<br>C = [-1, 2]<br>D = [ 0, 2]</p><p>Output:<br>2</p><p>Explanation:<br>The two tuples are:</p><ol><li>(0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0</li><li>(1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; A</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; B</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; C</span></span><br><span class="line"><span class="comment"> * @param &#123;number[]&#125; D</span></span><br><span class="line"><span class="comment"> * @return &#123;number&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> fourSumCount = <span class="function"><span class="keyword">function</span>(<span class="params">A, B, C, D</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, lenA = A.length; i &lt; lenA; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, lenB = B.length; j &lt; lenB; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> sum = A[i] + B[j];</span><br><span class="line">      <span class="keyword">let</span> count = ~~p.get(sum);</span><br><span class="line">      p.set(sum, count + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> ans = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, lenC = C.length; i &lt; lenC; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, lenD = D.length; j &lt; lenD; j++) &#123;</span><br><span class="line">      <span class="keyword">let</span> sum = C[i] + D[j];</span><br><span class="line">      ans += ~~p.get(-sum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ans;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Add-and-Search-Word-–-Data-structure-design"><a href="#Add-and-Search-Word-–-Data-structure-design" class="headerlink" title="Add and Search Word – Data structure design"></a>Add and Search Word – Data structure design</h3><p>Design a data structure that supports the following two operations:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">void addWord(word)</span><br><span class="line">bool search(word)</span><br></pre></td></tr></table></figure><p>search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.</p><p>For example:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">addWord(&quot;bad&quot;)</span><br><span class="line">addWord(&quot;dad&quot;)</span><br><span class="line">addWord(&quot;mad&quot;)</span><br><span class="line">search(&quot;pad&quot;) -&gt; false</span><br><span class="line">search(&quot;bad&quot;) -&gt; true</span><br><span class="line">search(&quot;.ad&quot;) -&gt; true</span><br><span class="line">search(&quot;b..&quot;) -&gt; true</span><br></pre></td></tr></table></figure><p><strong>Note:</strong><br>You may assume that all words are consist of lowercase letters <code>a-z</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Node</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.nodes = [];</span><br><span class="line">  <span class="keyword">this</span>.endFlag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @constructor</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> WordDictionary = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.startNode = <span class="keyword">new</span> Node();</span><br><span class="line">  <span class="comment">// 以该 node 结尾的单词存在</span></span><br><span class="line">  <span class="keyword">this</span>.startNode.endFlag = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; word</span></span><br><span class="line"><span class="comment"> * @return &#123;void&#125;</span></span><br><span class="line"><span class="comment"> * Adds a word into the data structure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">WordDictionary.prototype.addWord = <span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">this</span>.startNode;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = word.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = word.charCodeAt(i) - <span class="number">97</span>;</span><br><span class="line">    <span class="keyword">if</span> (!node.nodes[item]) &#123;</span><br><span class="line">      node.nodes[item] = <span class="keyword">new</span> Node();</span><br><span class="line">    &#125;</span><br><span class="line">    node = node.nodes[item];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  node.endFlag = <span class="literal">true</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;string&#125; word</span></span><br><span class="line"><span class="comment"> * @return &#123;boolean&#125;</span></span><br><span class="line"><span class="comment"> * Returns if the word is in the data structure. A word could</span></span><br><span class="line"><span class="comment"> * contain the dot character '.' to represent any one letter.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">WordDictionary.prototype.search = <span class="function"><span class="keyword">function</span>(<span class="params">word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> node = <span class="keyword">this</span>.startNode;</span><br><span class="line">  <span class="keyword">var</span> isFound = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  dfs(node, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">node, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isFound)</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index === word.length) &#123;</span><br><span class="line">      isFound = node.endFlag;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (word[index] === <span class="string">'.'</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (node.nodes[i])</span><br><span class="line">          dfs(node.nodes[i], index + <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> item = word.charCodeAt(index) - <span class="number">97</span>;</span><br><span class="line">      <span class="keyword">if</span> (node.nodes[item])</span><br><span class="line">        dfs(node.nodes[item], index + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> isFound;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your WordDictionary object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * var wordDictionary = new WordDictionary();</span></span><br><span class="line"><span class="comment"> * wordDictionary.addWord("word");</span></span><br><span class="line"><span class="comment"> * wordDictionary.search("pattern");</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Matrix&quot;&gt;&lt;a href=&quot;#Matrix&quot; class=&quot;headerlink&quot; title=&quot;Matrix&quot;&gt;&lt;/a&gt;Matrix&lt;/h3&gt;&lt;p&gt;Given a matrix consists of 0 and 1, find the distance 
      
    
    </summary>
    
    
      <category term="leetcode" scheme="onlookerliu.github.io/tags/leetcode/"/>
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer--JavaScript版III</title>
    <link href="onlookerliu.github.io/2017/12/27/%E5%89%91%E6%8C%87offer-JavaScript%E7%89%88III/"/>
    <id>onlookerliu.github.io/2017/12/27/剑指offer-JavaScript版III/</id>
    <published>2017-12-27T15:55:24.000Z</published>
    <updated>2017-12-27T16:58:23.922Z</updated>
    
    <content type="html"><![CDATA[<p>51.<br>请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNumeric</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="regexp">/^[+-]?(?:(\d+)(\.\d+)?|(\.\d+))([eE][+-]?\d+)?$/</span>;</span><br><span class="line">    <span class="keyword">return</span> reg.test(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>52.<br>请实现一个函数用来找出字符流中第一个只出现一次的字符。例如，当从字符流中只读出前两个字符”go”时，第一个只出现一次的字符是”g”。当从该字符流中读出前六个字符“google”时，第一个只出现一次的字符是”l”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    streamNums = [];</span><br><span class="line">    streamNumsLen = <span class="number">256</span>;</span><br><span class="line">    streamNumsIndex = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; streamNumsLen; i++) &#123;</span><br><span class="line">        streamNums[i] = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Insert</span>(<span class="params">ch</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> code = ch.charCodeAt();</span><br><span class="line">    <span class="keyword">if</span> (streamNums[code] == <span class="number">-1</span>) &#123;</span><br><span class="line">        streamNums[code] = streamNumsIndex;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (streamNums[code] &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        streamNums[code] = <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    streamNumsIndex++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FirstAppearingOnce</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    result = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> ch = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">var</span> minIndex = <span class="literal">Infinity</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; streamNumsLen; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (streamNums[i] &gt;= <span class="number">0</span> &amp;&amp; streamNums[i] &lt; minIndex) &#123;</span><br><span class="line">            ch = <span class="built_in">String</span>.fromCharCode(i);</span><br><span class="line">            minIndex = streamNums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ch == <span class="string">""</span> ? <span class="string">'#'</span> : ch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>53.<br>一个链表中包含环，请找出该链表的环的入口结点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EntryNodeOfLoop</span>(<span class="params">pHead</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pHead) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> meeting = meetingNode(pHead);</span><br><span class="line">    <span class="keyword">if</span> (!meeting) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> nodeLoop = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> node1 = meeting;</span><br><span class="line">    <span class="keyword">while</span> (node1.next != meeting) &#123;</span><br><span class="line">        node1 = node1.next;</span><br><span class="line">        nodeLoop++;</span><br><span class="line">    &#125;</span><br><span class="line">    node1 = pHead;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodeLoop; i++) &#123;</span><br><span class="line">        node1 = node1.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> node2 = pHead;</span><br><span class="line">    <span class="keyword">while</span> (node1 != node2) &#123;</span><br><span class="line">        node1 = node1.next;</span><br><span class="line">        node2 = node2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">meetingNode</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node || !node.next) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> slow = node.next;</span><br><span class="line">        <span class="keyword">var</span> fast = slow.next;</span><br><span class="line">        <span class="keyword">while</span> (fast &amp;&amp; slow) &#123;</span><br><span class="line">            <span class="keyword">if</span> (fast === slow) &#123;</span><br><span class="line">                <span class="keyword">return</span> fast;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next;</span><br><span class="line">            <span class="keyword">if</span> (fast) &#123;</span><br><span class="line">                fast = fast.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>54.<br>在一个排序的链表中，存在重复的结点，请删除该链表中重复的结点，重复的结点不保留，返回链表头指针。 例如，链表1-&gt;2-&gt;3-&gt;3-&gt;4-&gt;4-&gt;5 处理后为 1-&gt;2-&gt;5</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteDuplication</span>(<span class="params">pHead</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pHead) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> tempHead = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">    tempHead.next = pHead;</span><br><span class="line">    <span class="keyword">var</span> preNode = tempHead;</span><br><span class="line">    <span class="keyword">var</span> curr1 = preNode.next;</span><br><span class="line">    <span class="keyword">var</span> curr2 = curr1.next;</span><br><span class="line">    <span class="keyword">while</span> (curr1) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!curr2 || curr2.val !== curr1.val) &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr1.next !== curr2) &#123;</span><br><span class="line">                clear(curr1, curr2);</span><br><span class="line">                preNode.next = curr2;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                preNode = curr1;</span><br><span class="line">            &#125;</span><br><span class="line">            curr1 = curr2;</span><br><span class="line">            <span class="keyword">if</span> (curr2) &#123;</span><br><span class="line">                curr2 = curr2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (curr2) &#123;</span><br><span class="line">                curr2 = curr2.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tempHead.next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">clear</span>(<span class="params">node, stop</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp;</span><br><span class="line">        <span class="keyword">while</span> (node !== stop) &#123;</span><br><span class="line">            temp = node.next;</span><br><span class="line">            node.next = <span class="literal">null</span>;</span><br><span class="line">            node = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>55.<br>给定一个二叉树和其中的一个结点，请找出中序遍历顺序的下一个结点并且返回。注意，树中的结点不仅包含左右子结点，同时包含指向父结点的指针。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetNext</span>(<span class="params">pNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pNode) &#123;</span><br><span class="line">        <span class="keyword">return</span> pNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pNode.right) &#123;</span><br><span class="line">        pNode = pNode.right;</span><br><span class="line">        <span class="keyword">while</span> (pNode.left) &#123;</span><br><span class="line">            pNode = pNode.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pNode.next &amp;&amp; pNode.next.left == pNode) &#123;</span><br><span class="line">        <span class="keyword">return</span> pNode.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pNode.next &amp;&amp; pNode.next.right == pNode) &#123;</span><br><span class="line">        <span class="keyword">while</span> (pNode.next &amp;&amp; pNode.next.left != pNode) &#123;</span><br><span class="line">            pNode = pNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pNode.next;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>56.<br>请实现一个函数，用来判断一颗二叉树是不是对称的。注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSymmetrical</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pRoot) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> symmetrical(pRoot, pRoot);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">symmetrical</span>(<span class="params">node1, node2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node1 &amp;&amp; !node2)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!node1 || !node2)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (node1.val != node2.val)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> symmetrical(node1.left, node2.right) &amp;&amp; symmetrical(node1.right, node2.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>57.<br>请实现一个函数按照之字形打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右至左的顺序打印，第三行按照从左到右的顺序打印，其他行以此类推。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Print</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">if</span> (!pRoot) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> que = [];</span><br><span class="line">    que.push(pRoot);</span><br><span class="line">    <span class="keyword">var</span> flag = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (que.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> vec = [];</span><br><span class="line">        <span class="keyword">var</span> len = que.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp = que.shift(); <span class="comment">//front</span></span><br><span class="line">            vec.push(tmp.val);</span><br><span class="line">            <span class="keyword">if</span> (tmp.left)</span><br><span class="line">                que.push(tmp.left);</span><br><span class="line">            <span class="keyword">if</span> (tmp.right)</span><br><span class="line">                que.push(tmp.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            vec.reverse();</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(vec);</span><br><span class="line">        flag = !flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>58.<br>从上到下按层打印二叉树，同一层结点从左至右输出。每一层输出一行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Print</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [];</span><br><span class="line">    <span class="keyword">if</span> (!pRoot) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> que = [];</span><br><span class="line">    que.push(pRoot);</span><br><span class="line">    <span class="keyword">while</span> (que.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> vec = [];</span><br><span class="line">        <span class="keyword">var</span> len = que.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> tmp = que.shift(); <span class="comment">//front</span></span><br><span class="line">            vec.push(tmp.val);</span><br><span class="line">            <span class="keyword">if</span> (tmp.left)</span><br><span class="line">                que.push(tmp.left);</span><br><span class="line">            <span class="keyword">if</span> (tmp.right)</span><br><span class="line">                que.push(tmp.right);</span><br><span class="line">        &#125;</span><br><span class="line">        res.push(vec);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>59.<br>请实现两个函数，分别用来序列化和反序列化二叉树</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Serialize</span>(<span class="params">pNode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = [];</span><br><span class="line">    ser(pNode);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = str.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (str[i] !== <span class="string">'#'</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.join();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ser</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">            str.push(<span class="string">'#'</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        str.push(node.val);</span><br><span class="line">        ser(node.left);</span><br><span class="line">        ser(node.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Deserialize</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">var</span> len = str.length;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= len) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = str.split(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">var</span> head = des();</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">des</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        index++;</span><br><span class="line">        <span class="keyword">if</span> (arr[index] &amp;&amp; arr[index] !== <span class="string">'#'</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp = <span class="keyword">new</span> TreeNode(arr[index]);</span><br><span class="line">            node = temp;</span><br><span class="line">            node.left = des();</span><br><span class="line">            node.right = des();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>60.<br>给定一颗二叉搜索树，请找出其中的第k大的结点。例如， 5 / \ 3 7 /\ /\ 2 4 6 8 中，按结点数值大小顺序第三个结点的值为4。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">KthNode</span>(<span class="params">pRoot, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pRoot || !k) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> KthCore(pRoot);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">KthCore</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> target = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            target = KthCore(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k === <span class="number">1</span>)</span><br><span class="line">                target = node;</span><br><span class="line">            k--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!target &amp;&amp; node.right)</span><br><span class="line">            target = KthCore(node.right);</span><br><span class="line">        <span class="keyword">return</span> target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>61.<br>如何得到一个数据流中的中位数？如果从数据流中读出奇数个数值，那么中位数就是所有数值排序之后位于中间的数值。如果从数据流中读出偶数个数值，那么中位数就是所有数值排序之后中间两个数的平均值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Insert</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    arr.push(num);</span><br><span class="line">    arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetMedian</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> mid = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> ((arr.length &amp; <span class="number">1</span>) === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> n1 = arr[mid];</span><br><span class="line">        <span class="keyword">var</span> n2 = arr[mid - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">return</span> (n1 + n2) / <span class="number">2</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr[mid]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>62.<br>给定一个数组和滑动窗口的大小，找出所有滑动窗口里数值的最大值。例如，如果输入数组{2,3,4,2,6,2,5,1}及滑动窗口的大小3，那么一共存在6个滑动窗口，他们的最大值分别为{4,4,6,6,6,5}； 针对数组{2,3,4,2,6,2,5,1}的滑动窗口有以下6个： {[2,3,4],2,6,2,5,1}， {2,[3,4,2],6,2,5,1}， {2,3,[4,2,6],2,5,1}， {2,3,4,[2,6,2],5,1}， {2,3,4,2,[6,2,5],1}， {2,3,4,2,6,[2,5,1]}。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">maxInWindows</span>(<span class="params">num, size</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!num || num.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> max = [];</span><br><span class="line">    <span class="keyword">if</span> (num.length &gt;= size &amp;&amp; size &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> index = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; size; ++i) &#123;</span><br><span class="line">            <span class="keyword">while</span> (index.length &gt; <span class="number">0</span> &amp;&amp; num[i] &gt;= num[index[index.length - <span class="number">1</span>]])</span><br><span class="line">                index.pop();</span><br><span class="line">            index.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = size; i &lt; num.length; ++i) &#123;</span><br><span class="line">            max.push(num[index[<span class="number">0</span>]]);</span><br><span class="line">            <span class="keyword">while</span> (index.length &gt; <span class="number">0</span> &amp;&amp; num[i] &gt;= num[index[index.length - <span class="number">1</span>]])</span><br><span class="line">                index.pop();</span><br><span class="line">            <span class="keyword">if</span> (index.length &gt; <span class="number">0</span> &amp;&amp; index[<span class="number">0</span>] &lt;= i - size)</span><br><span class="line">                index.shift();</span><br><span class="line">            index.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        max.push(num[index[<span class="number">0</span>]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>63.<br>请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 例如 a b c e s f c s a d e e 矩阵中包含一条字符串”bcced”的路径，但是矩阵中不包含”abcb”路径，因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasPath</span>(<span class="params">matrix, rows, cols, path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> visited = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rows * cols; i++) &#123;</span><br><span class="line">        visited[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pathLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rows; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; cols; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (core(i, j)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        visited.length = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">core</span>(<span class="params">row, col</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.length === pathLen) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> hasPath = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= <span class="number">0</span> &amp;&amp; row = <span class="number">0</span> &amp;&amp; col &lt; cols &amp;&amp; matrix[row * cols + col] === path[pathLen] &amp;&amp; !visited[row * cols + col]) &#123;</span><br><span class="line">            pathLen++;</span><br><span class="line">            visited[row * cols + col] = <span class="literal">true</span>;</span><br><span class="line">            hasPath = core(row - <span class="number">1</span>, col) + core(row, col - <span class="number">1</span>)</span><br><span class="line">                + core(row + <span class="number">1</span>, col) + core(row, col + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (!hasPath) &#123;</span><br><span class="line">                pathLen--;</span><br><span class="line">                visited[row * cols + col] = <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hasPath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>64.<br>地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">movingCount</span>(<span class="params">threshold, rows, cols</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> visited = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rows * cols; ++i)</span><br><span class="line">        visited[i] = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">var</span> count = movingCountCore(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    visited.length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getDigitSum</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            sum += number % <span class="number">10</span>;</span><br><span class="line">            number = <span class="built_in">Math</span>.floor(number / <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params">row, col</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= <span class="number">0</span> &amp;&amp; row = <span class="number">0</span> &amp;&amp; col &lt; cols &amp;&amp; getDigitSum(row) + getDigitSum(col) &lt;= threshold &amp;&amp; !visited[row * cols + col])</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">movingCountCore</span>(<span class="params">row, col</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(row, col)) &#123;</span><br><span class="line">            visited[row * cols + col] = <span class="literal">true</span>;</span><br><span class="line">            count = <span class="number">1</span> + movingCountCore(row - <span class="number">1</span>, col)</span><br><span class="line">                + movingCountCore(row, col - <span class="number">1</span>)</span><br><span class="line">                + movingCountCore(row + <span class="number">1</span>, col)</span><br><span class="line">                + movingCountCore(row, col + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>手动测试框架</p><ul><li>二叉树构造</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = x;</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Tree</span>(<span class="params">arr, node, num = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!arr || arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    node = node || <span class="keyword">new</span> TreeNode(arr[num - <span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> curr = node;</span><br><span class="line">    <span class="keyword">if</span> (num * <span class="number">2</span> - <span class="number">1</span> &lt; arr.length &amp;&amp; arr[num * <span class="number">2</span> - <span class="number">1</span>]) &#123;</span><br><span class="line">        curr.left = <span class="keyword">new</span> TreeNode(arr[num * <span class="number">2</span> - <span class="number">1</span>]);</span><br><span class="line">        Tree(arr, curr.left, num * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (num * <span class="number">2</span> &lt; arr.length &amp;&amp; arr[num * <span class="number">2</span>]) &#123;</span><br><span class="line">        curr.right = <span class="keyword">new</span> TreeNode(arr[num * <span class="number">2</span>]);</span><br><span class="line">        Tree(arr, curr.right, num * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 根据数组生成二叉树</span></span><br><span class="line"><span class="keyword">var</span> tree = <span class="keyword">new</span> Tree([<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="literal">null</span>, <span class="number">10</span>, <span class="literal">null</span>, <span class="literal">null</span>, <span class="number">5</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(tree);</span><br></pre></td></tr></table></figure><ul><li>单向链表构造</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = x;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LinkedList</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!arr || arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ListNode(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> head = <span class="keyword">new</span> ListNode(arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">var</span> len = arr.length;</span><br><span class="line">    <span class="keyword">var</span> curr = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = <span class="keyword">new</span> ListNode(arr[i]);</span><br><span class="line">        curr.next = temp;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ll = <span class="keyword">new</span> LinkedList([<span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">9</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(ll);</span><br></pre></td></tr></table></figure><ul><li>Node.js 多行输入测试 (如果不能运行请更新浏览器来支持 es6 语法)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* Todo: This Array contains the input lines in sequence. Each of the elements is like a line of input. */</span></span><br><span class="line">    <span class="keyword">var</span> test_lines = [<span class="string">'5'</span>, <span class="string">'1 2 3 3 5'</span>, <span class="string">'3'</span>, <span class="string">'1 2 1'</span>, <span class="string">'2 4 5'</span>, <span class="string">'3 5 3'</span>];   <span class="comment">// Do not change the name of this array if you don't like bugs.</span></span><br><span class="line">    <span class="comment">/****************************************************************</span></span><br><span class="line"><span class="comment">    Todo: Add your code here including the callback function of event 'rl.on()' and</span></span><br><span class="line"><span class="comment">    global variables except the statements and definitions of 'readline' and 'rl'.</span></span><br><span class="line"><span class="comment">    *****************************************************************/</span></span><br><span class="line">    <span class="comment">/* global variables here */</span></span><br><span class="line">    <span class="keyword">var</span> lines = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/* callback function of 'rl.on()' */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params">line</span>) </span>&#123;    <span class="comment">// Do not change the name of this function if you don't like bugs.</span></span><br><span class="line">        <span class="keyword">var</span> str = line.trim();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'lines'</span>, lines++, <span class="string">':'</span>, str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**************** End of Your Code *****************/</span></span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> test_len = test_lines.length;</span><br><span class="line">        <span class="keyword">var</span> test_it = gen(test_lines);</span><br><span class="line">        <span class="keyword">var</span> test_val = test_it.next();</span><br><span class="line">        <span class="keyword">while</span> (test_len) &#123;</span><br><span class="line">            main(test_val.value);</span><br><span class="line">            test_val = test_it.next();</span><br><span class="line">            test_len--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params">test_lines</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> len = test_lines.length;</span><br><span class="line">            <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (len) &#123;</span><br><span class="line">                <span class="keyword">yield</span> test_lines[i];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;())</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;51.&lt;br&gt;请实现一个函数用来判断字符串是否表示数值（包括整数和小数）。例如，字符串”+100”,”5e2”,”-123”,”3.1416”和”-1E-16”都表示数值。 但是”12e”,”1a3.14”,”1.2.3”,”+-5”和”12e+4.3”都不是。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer--JavaScript版II</title>
    <link href="onlookerliu.github.io/2017/12/27/%E5%89%91%E6%8C%87offer-JavaScript%E7%89%88II/"/>
    <id>onlookerliu.github.io/2017/12/27/剑指offer-JavaScript版II/</id>
    <published>2017-12-27T15:54:21.000Z</published>
    <updated>2017-12-27T16:58:42.386Z</updated>
    
    <content type="html"><![CDATA[<p>26.<br>输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Convert</span>(<span class="params">pRootOfTree</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pRootOfTree) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> lastNode = <span class="literal">null</span>;</span><br><span class="line">    lastNode = ConvertNode(pRootOfTree);</span><br><span class="line">    <span class="keyword">var</span> head = lastNode;</span><br><span class="line">    <span class="keyword">while</span> (head &amp;&amp; head.left) &#123;</span><br><span class="line">        head = head.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ConvertNode</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            lastNode = ConvertNode(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        node.left = lastNode;</span><br><span class="line">        <span class="keyword">if</span> (lastNode) &#123;</span><br><span class="line">            lastNode.right = node;</span><br><span class="line">        &#125;</span><br><span class="line">        lastNode = node;</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            lastNode = ConvertNode(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lastNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>27.<br>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MoreThanHalfNum_Solution</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!numbers || numbers.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">var</span> len = numbers.length, index;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> index = numbers[i];</span><br><span class="line">        arr[index] !== <span class="literal">undefined</span> ? arr[index]++ : arr[index] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">var</span> arrLen = arr.length;</span><br><span class="line">    <span class="keyword">var</span> max = -<span class="literal">Infinity</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrLen; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!arr[i]) <span class="keyword">continue</span>;</span><br><span class="line">        max = arr[i] &gt; max ? (index = i, arr[i]) : max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max &gt; len / <span class="number">2</span> ? index : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>28.<br>输入n个整数，找出其中最小的K个数。例如输入4,5,1,6,2,7,3,8这8个数字，则最小的4个数字是1,2,3,4。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetLeastNumbers_Solution</span>(<span class="params">input, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!input || input.length &lt; k) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> input.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;).slice(<span class="number">0</span>, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>29.<br>HZ偶尔会拿些专业问题来忽悠那些非计算机专业的同学。今天测试组开完会后,他又发话了:在古老的一维模式识别中,常常需要计算连续子向量的最大和,当向量全为正数的时候,问题很好解决。但是,如果向量中包含负数,是否应该包含某个负数,并期望旁边的正数会弥补它呢？例如:{6,-3,-2,7,-15,1,2,2},连续子向量的最大和为8(从第0个开始,到第3个为止)。你会不会被他忽悠住？(子向量的长度至少是1)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindGreatestSumOfSubArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (array.length &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> sum = array[<span class="number">0</span>],</span><br><span class="line">        tempsum = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        tempsum = tempsum &lt; <span class="number">0</span> ? array[i] : tempsum + array[i];</span><br><span class="line">        sum = tempsum &gt; sum ? tempsum : sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>30.<br>求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？为此他特别数了一下1~13中包含1的数字有1、10、11、12、13因此共出现6次,但是对于后面问题他就没辙了。ACMer希望你们帮帮他,并把问题更加普遍化,可以很快的求出任意非负整数区间中1出现的次数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberOf1Between1AndN</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> ones = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        arr.push(n);</span><br><span class="line">        n--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr.join(<span class="string">''</span>).replace(<span class="regexp">/[^1]+/g</span>, <span class="string">''</span>).length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>31.<br>输入一个正整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。例如输入数组{3，32，321}，则打印出这三个数字能排成的最小数字为321323。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PrintMinNumber</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!numbers || numbers.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="string">''</span>;</span><br><span class="line">    ordering(numbers);</span><br><span class="line">    result = result.map(<span class="built_in">Number</span>).reduce(<span class="function"><span class="keyword">function</span>(<span class="params">min, a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> min &lt; a ? min : a;</span><br><span class="line">    &#125;, <span class="literal">Infinity</span>);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ordering</span>(<span class="params">tempArr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> innerLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (tempArr.length === <span class="number">0</span>) &#123;</span><br><span class="line">            result.push(temp);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tempArr.length; i++) &#123;</span><br><span class="line">            innerLen = tempArr[i].toString().length;</span><br><span class="line">            temp += tempArr[i];</span><br><span class="line">            insideArr = tempArr.concat();</span><br><span class="line">            insideArr.splice(i, <span class="number">1</span>);</span><br><span class="line">            ordering(insideArr);</span><br><span class="line">            temp = temp.substring(<span class="number">0</span>, temp.length - innerLen);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>32.<br>把只包含因子2、3和5的数称作丑数（Ugly Number）。例如6、8都是丑数，但14不是，因为它包含因子7。 习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetUglyNumber</span>(<span class="params">index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> uglyNum = [<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> factor2 = <span class="number">0</span>, factor3 = <span class="number">0</span>, factor5 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; index; i++) &#123;</span><br><span class="line">        uglyNum[i] = <span class="built_in">Math</span>.min(uglyNum[factor2] * <span class="number">2</span>, uglyNum[factor3] * <span class="number">3</span>, uglyNum[factor5] * <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">if</span> (uglyNum[i] === uglyNum[factor2] * <span class="number">2</span>) factor2++;</span><br><span class="line">        <span class="keyword">if</span> (uglyNum[i] === uglyNum[factor3] * <span class="number">3</span>) factor3++;</span><br><span class="line">        <span class="keyword">if</span> (uglyNum[i] === uglyNum[factor5] * <span class="number">5</span>) factor5++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> uglyNum[index - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>33.<br>在一个字符串(1&lt;=字符串长度&lt;=10000，全部由字母组成)中找到第一个只出现一次的字符,并返回它的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FirstNotRepeatingChar</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!str || !str.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> hash = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> tempArr = str.split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">var</span> unique = [];</span><br><span class="line">    <span class="keyword">var</span> len = str.length, temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        temp = tempArr[i];</span><br><span class="line">        <span class="keyword">if</span> (hash[temp]) &#123;</span><br><span class="line">            hash[temp].push(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            hash[temp] = [i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> hash) &#123;</span><br><span class="line">        <span class="keyword">if</span> (hash.hasOwnProperty(key)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hash[key].length === <span class="number">1</span>) &#123;</span><br><span class="line">                unique.push(hash[key].pop());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, unique);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>35.<br>输入两个链表，找出它们的第一个公共结点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindFirstCommonNode</span>(<span class="params">pHead1, pHead2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pHead1 || !pHead2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> len1 = getLength(pHead1);</span><br><span class="line">    <span class="keyword">var</span> len2 = getLength(pHead2);</span><br><span class="line">    <span class="keyword">var</span> lenDiff = len1 - len2;</span><br><span class="line">    <span class="keyword">var</span> curr1 = pHead1;</span><br><span class="line">    <span class="keyword">var</span> curr2 = pHead2;</span><br><span class="line">    <span class="keyword">if</span> (len2 &gt; len1) &#123;</span><br><span class="line">        curr1 = pHead2;</span><br><span class="line">        curr2 = pHead1;</span><br><span class="line">        lenDiff = len2 - len1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lenDiff; ++i)</span><br><span class="line">        curr1 = curr1.next;</span><br><span class="line">    <span class="keyword">while</span> (curr1 &amp;&amp; curr2 &amp;&amp; curr1 != curr2) &#123;</span><br><span class="line">        curr1 = curr1.next;</span><br><span class="line">        curr2 = curr2.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curr1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getLength</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len = <span class="number">0</span>;</span><br><span class="line">        curr = node;</span><br><span class="line">        <span class="keyword">while</span> (curr) &#123;</span><br><span class="line">            len++;</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>36.<br>统计一个数字在排序数组中出现的次数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetNumberofK</span>(<span class="params">data, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> data.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">count, a</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a === k ? count+<span class="number">1</span> : count;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>37.<br>输入一棵二叉树，求该树的深度。从根结点到叶结点依次经过的结点（含根、叶结点）形成树的一条路径，最长路径的长度为树的深度。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeDepth</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pRoot) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> depth = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> currDepth = <span class="number">0</span>;</span><br><span class="line">    dfs(pRoot);</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">            depth = depth &gt; currDepth ? depth : currDepth;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        currDepth++;</span><br><span class="line">        dfs(node.left);</span><br><span class="line">        dfs(node.right);</span><br><span class="line">        currDepth--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>38.<br>输入一棵二叉树，判断该二叉树是否是平衡二叉树。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsBalanced</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pRoot) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> left = TreeDepth(pRoot.left);</span><br><span class="line">    <span class="keyword">var</span> right = TreeDepth(pRoot.right);</span><br><span class="line">    <span class="keyword">var</span> diff = left - right;</span><br><span class="line">    <span class="keyword">if</span> (diff &gt; <span class="number">1</span> || diff &lt; <span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> IsBalanced(pRoot.left) &amp;&amp; IsBalanced(pRoot.right);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">TreeDepth</span>(<span class="params">pRoot</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!pRoot) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> depth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> currDepth = <span class="number">0</span>;</span><br><span class="line">        dfs(pRoot);</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">dfs</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">                depth = depth &gt; currDepth ? depth : currDepth;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            currDepth++;</span><br><span class="line">            dfs(node.left);</span><br><span class="line">            dfs(node.right);</span><br><span class="line">            currDepth--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>39.<br>一个整型数组里除了两个数字之外，其他的数字都出现了两次。请写程序找出这两个只出现一次的数字。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindNumsAppearOnce</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!array || array.length &lt; <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    <span class="keyword">return</span> array.sort().join(<span class="string">','</span>).replace(<span class="regexp">/(\d+),\1/g</span>, <span class="string">""</span>).replace(<span class="regexp">/,+/g</span>, <span class="string">','</span>).replace(<span class="regexp">/^,|,$/</span>,<span class="string">''</span>).split(<span class="string">','</span>).map(<span class="built_in">Number</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>40.<br>小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindContinuousSequence</span>(<span class="params">sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> small = <span class="number">1</span>, big = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> mid = (<span class="number">1</span> + sum) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> curr = small + big;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">while</span> (small &lt; mid) &#123;</span><br><span class="line">        <span class="keyword">if</span> (curr === sum) &#123;</span><br><span class="line">            pushSeq(small, big);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (curr &gt; sum &amp;&amp; small &lt; mid) &#123;</span><br><span class="line">            curr -= small;</span><br><span class="line">            small++;</span><br><span class="line">            <span class="keyword">if</span> (curr === sum) &#123;</span><br><span class="line">                pushSeq(small, big);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        big++;</span><br><span class="line">        curr += big;</span><br><span class="line">    &#125;</span><br><span class="line">    result.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];&#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">pushSeq</span>(<span class="params">small, big</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> temp = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = small; i &lt;= big; i++) &#123;</span><br><span class="line">            temp.push(i);</span><br><span class="line">        &#125;</span><br><span class="line">        result.push(temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>41.<br>输入一个递增排序的数组和一个数字S，在数组中查找两个数，是的他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindNumbersWith</span>(<span class="params">array, sum</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!array || !array.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> product = [];</span><br><span class="line">    <span class="keyword">var</span> head = <span class="number">0</span>, tail = array.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (head &lt; tail) &#123;</span><br><span class="line">        <span class="keyword">var</span> curr = array[head] + array[tail];</span><br><span class="line">        <span class="keyword">if</span> (curr === sum) &#123;</span><br><span class="line">            result.push([array[head], array[tail]]);</span><br><span class="line">            product.push(array[head] * array[tail]);</span><br><span class="line">            tail--;</span><br><span class="line">            head++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curr &gt; sum) &#123;</span><br><span class="line">            tail--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, product);</span><br><span class="line">    <span class="keyword">var</span> index = product.indexOf(min);</span><br><span class="line">    <span class="keyword">return</span> result[index];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>42.<br>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LeftRotateString</span>(<span class="params">str, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!str) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> len = str.length;</span><br><span class="line">    n = n % len;</span><br><span class="line">    <span class="keyword">var</span> left = str.slice(<span class="number">0</span>, n);</span><br><span class="line">    <span class="keyword">var</span> right = str.slice(n);</span><br><span class="line">    <span class="keyword">return</span> right + left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>43.<br>牛客最近来了一个新员工Fish，每天早晨总是会拿着一本英文杂志，写些句子在本子上。同事Cat对Fish写的内容颇感兴趣，有一天他向Fish借来翻看，但却读不懂它的意思。例如，“student. a am I”。后来才意识到，这家伙原来把句子单词的顺序翻转了，正确的句子应该是“I am a student.”。Cat对一一的翻转这些单词顺序可不在行，你能帮助他么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReverseSentence</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.split(<span class="string">' '</span>).reverse().join(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>44.<br>LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何。为了方便起见,你可以认为大小王是0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsContinuous</span>(<span class="params">numbers</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!numbers || numbers.length &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> len = numbers.length;</span><br><span class="line">    numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;<span class="keyword">return</span> a - b;&#125;);</span><br><span class="line">    <span class="keyword">var</span> zeros = <span class="number">0</span>, gaps = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len &amp;&amp; numbers[i] == <span class="number">0</span>; i++) &#123;</span><br><span class="line">        zeros++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> small = zeros, big = small + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (big &lt; len) &#123;</span><br><span class="line">        <span class="keyword">if</span> (numbers[small] == numbers[big]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        gaps += numbers[big] - numbers[small] - <span class="number">1</span>;</span><br><span class="line">        small = big++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> gaps &lt;= zeros;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>45.<br>每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LastRemaining</span>(<span class="params">n, m</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">1</span> || m &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> last = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        last = (last + m) % i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>46.<br>求1+2+3+…+n，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Sum</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">    plus(n);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">plus</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">        sum += num;</span><br><span class="line">        num &gt; <span class="number">0</span> &amp;&amp; plus(--num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>47.<br>写一个函数，求两个整数之和，要求在函数体内不得使用+、-、*、/四则运算符号。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum, carry;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        sum = num1 ^ num2;</span><br><span class="line">        carry = (num1 &amp; num2) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">        num1 = sum;</span><br><span class="line">        num2 = carry;</span><br><span class="line">    &#125; <span class="keyword">while</span> (num2 != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> num1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>48.<br>在一个长度为n的数组里的所有数字都在0到n-1的范围内。 数组中某些数字是重复的，但不知道有几个数字是重复的。也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duplicate</span>(<span class="params">numbers, duplication</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!numbers || !numbers.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> len = numbers.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> curr = numbers[i];</span><br><span class="line">        <span class="keyword">if</span> (numbers.indexOf(curr) !== i) &#123;</span><br><span class="line">            duplication[<span class="number">0</span>] = curr;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>49.<br>给定一个数组A[0,1,…,n-1],请构建一个数组B[0,1,…,n-1],其中B中的元素B[i]=A[0]A[1]…A[i-1]A[i+1]…A[n-1]。不能使用除法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!array || !array.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> len1 = array.length;</span><br><span class="line">    result[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len1; i++) &#123;</span><br><span class="line">        result[i] = array[i - <span class="number">1</span>] * result[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = len1 - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        temp *= array[i + <span class="number">1</span>];</span><br><span class="line">        result[i] *= temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>50.<br>请实现一个函数用来匹配包括’.’和’’的正则表达式。模式中的字符’.’表示任意一个字符，而’’表示它前面的字符可以出现任意次（包含0次）。 在本题中，匹配是指字符串的所有字符匹配整个模式。例如，字符串”aaa”与模式”a.a”和”abaca”匹配，但是与”aa.a”和”ab*a”均不匹配</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">match</span>(<span class="params">s, pattern</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s === <span class="string">""</span> &amp;&amp; pattern === <span class="string">""</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!pattern || pattern.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'^'</span> + pattern + <span class="string">'$'</span>);</span><br><span class="line">    <span class="keyword">return</span> reg.test(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;26.&lt;br&gt;输入一个字符串,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer--JavaScript版I</title>
    <link href="onlookerliu.github.io/2017/12/27/%E5%89%91%E6%8C%87offer-JavaScript%E7%89%88I/"/>
    <id>onlookerliu.github.io/2017/12/27/剑指offer-JavaScript版I/</id>
    <published>2017-12-27T15:47:53.000Z</published>
    <updated>2017-12-27T17:51:45.463Z</updated>
    
    <content type="html"><![CDATA[<p>1.<br>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Find</span>(<span class="params">target, array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rowCount = array.length - <span class="number">1</span>, i, j;</span><br><span class="line">    <span class="keyword">for</span> (i=rowCount, j=<span class="number">0</span>; i&gt;=<span class="number">0</span> &amp;&amp; j&lt;array[i].length;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == array[i][j]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &gt; array[i][j]) &#123;</span><br><span class="line">            j++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (target &lt; array[i][j]) &#123;</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.<br>请实现一个函数，将一个字符串中的空格替换成“%20”。例如，当字符串为We Are Happy.则经过替换之后的字符串为We%20Are%20Happy。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpace</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/ /g</span>, <span class="string">'%20'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.<br>输入一个链表，从尾到头打印链表每个节点的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceSpace</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str.replace(<span class="regexp">/ /g</span>, <span class="string">'%20'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = x;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printListFromTailToHead</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">        <span class="keyword">var</span> curr = head;</span><br><span class="line">        <span class="keyword">while</span>(curr) &#123;</span><br><span class="line">            arr.push(curr.val);</span><br><span class="line">            curr = curr.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr.reverse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.<br>输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。例如输入前序遍历序列 {1,2,4,7,3,5,6,8} 和中序遍历序列 {4,7,2,1,5,3,8,6}，则重建二叉树并返回。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TreeNode</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = x;</span><br><span class="line">    <span class="keyword">this</span>.left = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.right = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reConstructBinaryTree</span>(<span class="params">pre, vin</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pre.length == <span class="number">0</span> || vin.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> index = vin.indexOf(pre[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">var</span> left = vin.slice(<span class="number">0</span>, index);</span><br><span class="line">    <span class="keyword">var</span> right = vin.slice(index+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> node = <span class="keyword">new</span> TreeNode(vin[index]);</span><br><span class="line"></span><br><span class="line">    node.left = reConstructBinaryTree(pre.slice(<span class="number">1</span>, index+<span class="number">1</span>), left);</span><br><span class="line">    node.right = reConstructBinaryTree(pre.slice(index+<span class="number">1</span>), right);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.<br>用两个栈来实现一个队列，完成队列的Push和Pop操作。 队列中的元素为int类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stack1 = [];</span><br><span class="line"><span class="keyword">var</span> stack2 = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    stack1.push(node);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = stack1.pop();</span><br><span class="line">    <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">        stack2.push(temp);</span><br><span class="line">        temp = stack1.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = stack2.pop();</span><br><span class="line">        temp = stack2.pop();</span><br><span class="line">    <span class="keyword">while</span> (temp) &#123;</span><br><span class="line">        stack1.push(temp);</span><br><span class="line">        temp = stack2.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.<br>把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非递减排序的数组的一个旋转，输出旋转数组的最小元素。 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">minNumberInRotateArray</span>(<span class="params">rotateArray</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> len = rotateArray.length;</span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, rotateArray);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.<br>大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。n&lt;=39</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">1</span>, temp;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        temp = b;</span><br><span class="line">        b = a + b;</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.<br>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloor</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (number &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> temp = <span class="number">0</span>, a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">3</span>; i &lt;= number; i++) &#123;</span><br><span class="line">        temp = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.<br>一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jumpFloorII</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(<span class="number">2</span>, number - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10.<br>我们可以用21的小矩形横着或者竖着去覆盖更大的矩形。请问用n个21的小矩形无重叠地覆盖一个2*n的大矩形，总共有多少种方法？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rectCover</span>(<span class="params">number</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>,, temp;</span><br><span class="line">    <span class="keyword">if</span> (number &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (number === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">3</span>; i &lt;= number; i++) &#123;</span><br><span class="line">        temp = a + b;</span><br><span class="line">        a = b;</span><br><span class="line">        b = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11.<br>输入一个整数，输出该数二进制表示中1的个数。其中负数用补码表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">NumberOf1</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        n = n &gt;&gt;&gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> arr = n.toString(<span class="number">2</span>).split(<span class="string">''</span>);</span><br><span class="line">    <span class="keyword">return</span> arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b === <span class="string">"1"</span> ? a+<span class="number">1</span> : a;</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12.<br>给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Power</span>(<span class="params">base, exponent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.pow(base, exponent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13.<br>输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reOrderArray</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> even = [];</span><br><span class="line">    array.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((item &amp; <span class="number">1</span>) === <span class="number">1</span>) &#123;</span><br><span class="line">            result.push(item);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            even.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result.concat(even);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>14.<br>输入一个链表，输出该链表中倒数第k个结点。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ListNode</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = x;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FindKthToTail</span>(<span class="params">head, k</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!head || k&lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> i = head, j = head;</span><br><span class="line">    <span class="keyword">while</span> (--k) &#123;</span><br><span class="line">        j = j.next;</span><br><span class="line">        <span class="keyword">if</span> (!j) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (j.next) &#123;</span><br><span class="line">        i = i.next;</span><br><span class="line">        j = j.next;</span><br><span class="line">    &#125;</span><br><span class="line">    j = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>15.<br>输入一个链表，反转链表后，输出链表的所有元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ReverseList</span>(<span class="params">pHead</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newHead, temp;</span><br><span class="line">    <span class="keyword">if</span> (!pHead) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pHead.next === <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> pHead;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newHead = ReverseList(pHead.next);</span><br><span class="line">    &#125;</span><br><span class="line">    temp = pHead.next;</span><br><span class="line">    temp.next = pHead;</span><br><span class="line">    pHead.next = <span class="literal">null</span>;</span><br><span class="line">    temp = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> newHead;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>16.<br>输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Merge</span>(<span class="params">pHead1, pHead2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pHead1) &#123;</span><br><span class="line">        <span class="keyword">return</span> pHead2 ? pHead2 : <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!pHead2) &#123;</span><br><span class="line">        <span class="keyword">return</span> pHead1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// debugger;</span></span><br><span class="line">    <span class="keyword">var</span> curr1 = pHead1;</span><br><span class="line">    <span class="keyword">var</span> curr2 = pHead2;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">new</span> ListNode(<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">var</span> curr = result;</span><br><span class="line">    <span class="keyword">while</span> (curr1 &amp;&amp; curr2) &#123;</span><br><span class="line">        <span class="keyword">if</span> (curr1.val &lt; curr2.val) &#123;</span><br><span class="line">            curr.next = curr1;</span><br><span class="line">            curr1 = curr1.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curr.next = curr2;</span><br><span class="line">            curr2 = curr2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        curr = curr.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (curr1) &#123;</span><br><span class="line">        curr.next = curr1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (curr2) &#123;</span><br><span class="line">        curr.next = curr2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 防止内存泄漏</span></span><br><span class="line">    curr = result.next;</span><br><span class="line">    result.next = <span class="literal">null</span>;</span><br><span class="line">    result = curr;</span><br><span class="line">    curr = curr1 = curr2 = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>17.<br>v输入两棵二叉树A，B，判断B是不是A的子结构。（ps：我们约定空树不是任意一个树的子结构）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HasSubtree</span>(<span class="params">pRoot1, pRoot2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pRoot1 == <span class="literal">null</span> || pRoot2 == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSubTree(pRoot1, pRoot2)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> HasSubtree(pRoot1.left, pRoot2) || HasSubtree(pRoot1.right, pRoot2)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isSubTree</span>(<span class="params">pRoot1, pRoot2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pRoot2 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (pRoot1 == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (pRoot1.val === pRoot2.val) &#123;</span><br><span class="line">            <span class="keyword">return</span> isSubTree(pRoot1.left, pRoot2.left) &amp;&amp; isSubTree(pRoot1.right, pRoot2.right)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>18.<br>操作给定的二叉树，将其变换为源二叉树的镜像。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Mirror</span>(<span class="params">root</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> temp = root.left;</span><br><span class="line">    root.left = root.right;</span><br><span class="line">    root.right = temp;</span><br><span class="line">    <span class="keyword">if</span> (root.left) &#123;</span><br><span class="line">        Mirror(root.left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.right) &#123;</span><br><span class="line">        Mirror(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>19.<br>输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，例如，如果输入如下矩阵： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printMatrix</span>(<span class="params">matrix</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!matrix || !matrix.length) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">var</span> rows = matrix.length, col = matrix[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">var</span> len = rows * cols;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> circle = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> (j &lt; cols - cirle) &#123;</span><br><span class="line">            result.push(matrix[i][j]);</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result.length === len) <span class="keyword">break</span>;</span><br><span class="line">        j--, i++;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; rows - circle) &#123;</span><br><span class="line">            result.push(matrix[i][j]);</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result.length === len) <span class="keyword">break</span>;</span><br><span class="line">        i--, j--;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= circle) &#123;</span><br><span class="line">            result.push(matrix[i][j]);</span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result.length === len) <span class="keyword">break</span>;</span><br><span class="line">        j++, i--;</span><br><span class="line">        circle++;</span><br><span class="line">        <span class="keyword">while</span> (i &gt;= circle) &#123;</span><br><span class="line">            result.push(matrix[i][j]);</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (result.length === len) <span class="keyword">break</span>;</span><br><span class="line">        j++, i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>20.<br>定义栈的数据结构，请在该类型中实现一个能够得到栈最小元素的min函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stack = [];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">push</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    stack.push(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">top</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> stack[stack.length - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">min</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, stack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>21.<br>输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。假设压入栈的所有数字均不相等。例如序列1,2,3,4,5是某栈的压入顺序，序列4，5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsPopOrder</span>(<span class="params">pushV, popV</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pushV.length || !popV.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">var</span> popIndex = <span class="number">0</span>;;</span><br><span class="line">    <span class="keyword">var</span> len = pushV.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        temp.push(pushV[i]);</span><br><span class="line">        <span class="keyword">while</span> (temp.length &amp;&amp; temp[temp.length - <span class="number">1</span>] === popV[popIndex]) &#123;</span><br><span class="line">            temp.pop();</span><br><span class="line">            popIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp.length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>22.<br>从上往下打印出二叉树的每个节点，同层节点从左至右打印。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsPopOrder</span>(<span class="params">pushV, popV</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pushV.length || !popV.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">var</span> popIndex = <span class="number">0</span>;;</span><br><span class="line">    <span class="keyword">var</span> len = pushV.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        temp.push(pushV[i]);</span><br><span class="line">        <span class="keyword">while</span> (temp.length &amp;&amp; temp[temp.length - <span class="number">1</span>] === popV[popIndex]) &#123;</span><br><span class="line">            temp.pop();</span><br><span class="line">            popIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp.length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>23.<br>输入一颗二叉树和一个整数，打印出二叉树中结点值的和为输入整数的所有路径。路径定义为从树的根结点开始往下一直到叶结点所经过的结点形成一条路径。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsPopOrder</span>(<span class="params">pushV, popV</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pushV.length || !popV.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">var</span> popIndex = <span class="number">0</span>;;</span><br><span class="line">    <span class="keyword">var</span> len = pushV.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        temp.push(pushV[i]);</span><br><span class="line">        <span class="keyword">while</span> (temp.length &amp;&amp; temp[temp.length - <span class="number">1</span>] === popV[popIndex]) &#123;</span><br><span class="line">            temp.pop();</span><br><span class="line">            popIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp.length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>24.<br>输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsPopOrder</span>(<span class="params">pushV, popV</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pushV.length || !popV.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> temp = [];</span><br><span class="line">    <span class="keyword">var</span> popIndex = <span class="number">0</span>;;</span><br><span class="line">    <span class="keyword">var</span> len = pushV.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        temp.push(pushV[i]);</span><br><span class="line">        <span class="keyword">while</span> (temp.length &amp;&amp; temp[temp.length - <span class="number">1</span>] === popV[popIndex]) &#123;</span><br><span class="line">            temp.pop();</span><br><span class="line">            popIndex++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp.length === <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>25.<br>输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p><blockquote><p>将左子树构成双向链表，返回的是左子树的尾结点，将其连接到root的左边；<br>将右子树构成双向链表，将其追加到root结点之后，并返回尾结点；<br>向左遍历返回的链表至头结点处，即为所求双向链表的首结点。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Convert</span>(<span class="params">pRootOfTree</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!pRootOfTree) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> lastNode = <span class="literal">null</span>;</span><br><span class="line">    lastNode = ConvertNode(pRootOfTree);</span><br><span class="line">    <span class="keyword">var</span> head = lastNode;</span><br><span class="line">    <span class="keyword">while</span> (head &amp;&amp; head.left) &#123;</span><br><span class="line">        head = head.left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ConvertNode</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node.left) &#123;</span><br><span class="line">            lastNode = ConvertNode(node.left);</span><br><span class="line">        &#125;</span><br><span class="line">        node.left = lastNode;</span><br><span class="line">        <span class="keyword">if</span> (lastNode) &#123;</span><br><span class="line">            lastNode.right = node;</span><br><span class="line">        &#125;</span><br><span class="line">        lastNode = node;</span><br><span class="line">        <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line">            lastNode = ConvertNode(node.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lastNode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.&lt;br&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table
      
    
    </summary>
    
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>30 seconds of code</title>
    <link href="onlookerliu.github.io/2017/12/25/30-seconds-of-code/"/>
    <id>onlookerliu.github.io/2017/12/25/30-seconds-of-code/</id>
    <published>2017-12-25T15:24:11.000Z</published>
    <updated>2017-12-27T18:08:58.590Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Curated collection of useful Javascript snippets that you can understand in 30 seconds or less.</p></blockquote><h2 id="table-of-contents"><a href="#table-of-contents" class="headerlink" title="table-of-contents"></a>table-of-contents</h2><h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><ul><li><a href="#call"><code>call</code></a></li><li><a href="#collectinto"><code>collectInto</code></a></li><li><a href="#flip"><code>flip</code></a></li><li><a href="#pipefunctions"><code>pipeFunctions</code></a></li><li><a href="#promisify"><code>promisify</code></a></li><li><a href="#spreadover"><code>spreadOver</code></a></li></ul><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><ul><li><a href="#arraygcd"><code>arrayGcd</code></a></li><li><a href="#arraylcm"><code>arrayLcm</code></a></li><li><a href="#arraymax"><code>arrayMax</code></a></li><li><a href="#arraymin"><code>arrayMin</code></a></li><li><a href="#chunk"><code>chunk</code></a></li><li><a href="#compact"><code>compact</code></a></li><li><a href="#countoccurrences"><code>countOccurrences</code></a></li><li><a href="#deepflatten"><code>deepFlatten</code></a></li><li><a href="#difference"><code>difference</code></a></li><li><a href="#differencewith"><code>differenceWith</code></a></li><li><a href="#distinctvaluesofarray"><code>distinctValuesOfArray</code></a></li><li><a href="#dropelements"><code>dropElements</code></a></li><li><a href="#dropright"><code>dropRight</code></a></li><li><a href="#everynth"><code>everyNth</code></a></li><li><a href="#filternonunique"><code>filterNonUnique</code></a></li><li><a href="#flatten"><code>flatten</code></a></li><li><a href="#flattendepth"><code>flattenDepth</code></a></li><li><a href="#groupby"><code>groupBy</code></a></li><li><a href="#head"><code>head</code></a></li><li><a href="#initial"><code>initial</code></a></li><li><a href="#initialize2darray"><code>initialize2DArray</code></a></li><li><a href="#initializearraywithrange"><code>initializeArrayWithRange</code></a></li><li><a href="#initializearraywithvalues"><code>initializeArrayWithValues</code></a></li><li><a href="#intersection"><code>intersection</code></a></li><li><a href="#last"><code>last</code></a></li><li><a href="#mapobject"><code>mapObject</code></a></li><li><a href="#nthelement"><code>nthElement</code></a></li><li><a href="#pick"><code>pick</code></a></li><li><a href="#pull"><code>pull</code></a></li><li><a href="#pullatindex"><code>pullAtIndex</code></a></li><li><a href="#pullatvalue"><code>pullAtValue</code></a></li><li><a href="#remove"><code>remove</code></a></li><li><a href="#sample"><code>sample</code></a></li><li><a href="#shuffle"><code>shuffle</code></a></li><li><a href="#similarity"><code>similarity</code></a></li><li><a href="#symmetricdifference"><code>symmetricDifference</code></a></li><li><a href="#tail"><code>tail</code></a></li><li><a href="#take"><code>take</code></a></li><li><a href="#takeright"><code>takeRight</code></a></li><li><a href="#union"><code>union</code></a></li><li><a href="#without"><code>without</code></a></li><li><a href="#zip"><code>zip</code></a></li><li><a href="#zipobject"><code>zipObject</code></a></li></ul><h3 id="Browser"><a href="#Browser" class="headerlink" title="Browser"></a>Browser</h3><ul><li><a href="#arraytohtmllist"><code>arrayToHtmlList</code></a></li><li><a href="#bottomvisible"><code>bottomVisible</code></a></li><li><a href="#currenturl"><code>currentURL</code></a></li><li><a href="#detectdevicetype"><code>detectDeviceType</code></a></li><li><a href="#elementisvisibleinviewport"><code>elementIsVisibleInViewport</code></a></li><li><a href="#getscrollposition"><code>getScrollPosition</code></a></li><li><a href="#geturlparameters"><code>getURLParameters</code></a></li><li><a href="#httpsredirect"><code>httpsRedirect</code></a></li><li><a href="#redirect"><code>redirect</code></a></li><li><a href="#scrolltotop"><code>scrollToTop</code></a></li></ul><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><ul><li><a href="#getdaysdiffbetweendates"><code>getDaysDiffBetweenDates</code></a></li><li><a href="#jsontodate"><code>JSONToDate</code></a></li><li><a href="#toenglishdate"><code>toEnglishDate</code></a></li><li><a href="#tomorrow"><code>tomorrow</code></a></li></ul><h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><ul><li><a href="#chainasync"><code>chainAsync</code></a></li><li><a href="#compose"><code>compose</code></a></li><li><a href="#curry"><code>curry</code></a></li><li><a href="#functionname"><code>functionName</code></a></li><li><a href="#runpromisesinseries"><code>runPromisesInSeries</code></a></li><li><a href="#sleep"><code>sleep</code></a></li></ul><h3 id="Logic"><a href="#Logic" class="headerlink" title="Logic"></a>Logic</h3><ul><li><a href="#negate"><code>negate</code></a></li></ul><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><ul><li><a href="#arrayaverage"><code>arrayAverage</code></a></li><li><a href="#arraysum"><code>arraySum</code></a></li><li><a href="#clampnumber"><code>clampNumber</code></a></li><li><a href="#collatz"><code>collatz</code></a></li><li><a href="#digitize"><code>digitize</code></a></li><li><a href="#distance"><code>distance</code></a></li><li><a href="#factorial"><code>factorial</code></a></li><li><a href="#fibonacci"><code>fibonacci</code></a></li><li><a href="#fibonaccicountuntilnum"><code>fibonacciCountUntilNum</code></a></li><li><a href="#fibonacciuntilnum"><code>fibonacciUntilNum</code></a></li><li><a href="#gcd"><code>gcd</code></a></li><li><a href="#hammingdistance"><code>hammingDistance</code></a></li><li><a href="#inrange"><code>inRange</code></a></li><li><a href="#isarmstrongnumber"><code>isArmstrongNumber</code></a></li><li><a href="#isdivisible"><code>isDivisible</code></a></li><li><a href="#iseven"><code>isEven</code></a></li><li><a href="#isprime"><code>isPrime</code></a></li><li><a href="#lcm"><code>lcm</code></a></li><li><a href="#median"><code>median</code></a></li><li><a href="#palindrome"><code>palindrome</code></a></li><li><a href="#percentile"><code>percentile</code></a></li><li><a href="#powerset"><code>powerset</code></a></li><li><a href="#primes"><code>primes</code></a></li><li><a href="#randomintegerinrange"><code>randomIntegerInRange</code></a></li><li><a href="#randomnumberinrange"><code>randomNumberInRange</code></a></li><li><a href="#round"><code>round</code></a></li><li><a href="#sdbmhashalgorithm"><code>sdbmHashAlgorithm</code></a></li><li><a href="#standarddeviation"><code>standardDeviation</code></a></li></ul><h3 id="Media"><a href="#Media" class="headerlink" title="Media"></a>Media</h3><ul><li><a href="#speechsynthesis"><code>speechSynthesis</code></a></li></ul><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><ul><li><a href="#jsontofile"><code>JSONToFile</code></a></li><li><a href="#readfilelines"><code>readFileLines</code></a></li></ul><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><ul><li><a href="#cleanobj"><code>cleanObj</code></a></li><li><a href="#objectfrompairs"><code>objectFromPairs</code></a></li><li><a href="#objecttopairs"><code>objectToPairs</code></a></li><li><a href="#orderby"><code>orderBy</code></a></li><li><a href="#select"><code>select</code></a></li><li><a href="#shallowclone"><code>shallowClone</code></a></li><li><a href="#truthcheckcollection"><code>truthCheckCollection</code></a></li></ul><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li><a href="#anagrams"><code>anagrams</code></a></li><li><a href="#capitalize"><code>capitalize</code></a></li><li><a href="#capitalizeeveryword"><code>capitalizeEveryWord</code></a></li><li><a href="#countvowels"><code>countVowels</code></a></li><li><a href="#escaperegexp"><code>escapeRegExp</code></a></li><li><a href="#fromcamelcase"><code>fromCamelCase</code></a></li><li><a href="#repeatstring"><code>repeatString</code></a></li><li><a href="#reversestring"><code>reverseString</code></a></li><li><a href="#sortcharactersinstring"><code>sortCharactersInString</code></a></li><li><a href="#tocamelcase"><code>toCamelCase</code></a></li><li><a href="#tokebabcase"><code>toKebabCase</code></a></li><li><a href="#tosnakecase"><code>toSnakeCase</code></a></li><li><a href="#truncatestring"><code>truncateString</code></a></li><li><a href="#words"><code>words</code></a></li></ul><h3 id="Utility"><a href="#Utility" class="headerlink" title="Utility"></a>Utility</h3><ul><li><a href="#coalesce"><code>coalesce</code></a></li><li><a href="#coalescefactory"><code>coalesceFactory</code></a></li><li><a href="#extendhex"><code>extendHex</code></a></li><li><a href="#gettype"><code>getType</code></a></li><li><a href="#hextorgb"><code>hexToRGB</code></a></li><li><a href="#isarray"><code>isArray</code></a></li><li><a href="#isboolean"><code>isBoolean</code></a></li><li><a href="#isfunction"><code>isFunction</code></a></li><li><a href="#isnumber"><code>isNumber</code></a></li><li><a href="#isstring"><code>isString</code></a></li><li><a href="#issymbol"><code>isSymbol</code></a></li><li><a href="#randomhexcolor"><code>randomHexColor</code></a></li><li><a href="#rgbtohex"><code>RGBToHex</code></a></li><li><a href="#timetaken"><code>timeTaken</code></a></li><li><a href="#todecimalmark"><code>toDecimalMark</code></a></li><li><a href="#toordinalsuffix"><code>toOrdinalSuffix</code></a></li><li><a href="#uuidgenerator"><code>UUIDGenerator</code></a></li><li><a href="#validatenumber"><code>validateNumber</code></a></li></ul><h2 id="Adapter-1"><a href="#Adapter-1" class="headerlink" title="Adapter"></a>Adapter</h2><h3 id="call"><a href="#call" class="headerlink" title="call"></a>call</h3><p>Given a key and a set of arguments, call them when given a context. Primarily useful in composition.</p><p>Use a closure to call a stored key with stored arguments.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> call = <span class="function">(<span class="params">key, ...args</span>) =&gt;</span> context =&gt; context[ key ](...args);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Promise.resolve( [ 1, 2, 3 ] ).then( call('map', x =&gt; 2 * x ) ).then( console.log ) //[ 2, 4, 6 ]</span></span><br><span class="line"><span class="comment">const map = call.bind(null, 'map')</span></span><br><span class="line"><span class="comment">Promise.resolve( [ 1, 2, 3 ] ).then( map( x =&gt; 2 * x ) ).then( console.log ) //[ 2, 4, 6 ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="collectInto"><a href="#collectInto" class="headerlink" title="collectInto"></a>collectInto</h3><p>Changes a function that accepts an array into a variadic function.</p><p>Given a function, return a closure that collects all inputs into an array-accepting function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> collectInto = <span class="function"><span class="params">fn</span> =&gt;</span> (...args) =&gt; fn(args);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const Pall = collectInto( Promise.all.bind(Promise) )</span></span><br><span class="line"><span class="comment">let p1 = Promise.resolve(1)</span></span><br><span class="line"><span class="comment">let p2 = Promise.resolve(2)</span></span><br><span class="line"><span class="comment">let p3 = new Promise((resolve) =&gt; setTimeout(resolve,2000,3))</span></span><br><span class="line"><span class="comment">Pall(p1, p2, p3).then(console.log)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="flip"><a href="#flip" class="headerlink" title="flip"></a>flip</h3><p>Flip takes a function as an argument, then makes the first argument the last</p><p>Return a closure that takes variadic inputs, and splices the last argument to make it the first argument before applying the rest.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flip = <span class="function"><span class="params">fn</span> =&gt;</span> (...args) =&gt; fn(args.pop(), ...args);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">let a = &#123;name: 'John Smith'&#125;</span></span><br><span class="line"><span class="comment">let b = &#123;&#125;</span></span><br><span class="line"><span class="comment">const mergeFrom = flip(Object.assign)</span></span><br><span class="line"><span class="comment">let mergePerson = mergeFrom.bind(null, a)</span></span><br><span class="line"><span class="comment">mergePerson(b) // == b</span></span><br><span class="line"><span class="comment">b = &#123;&#125;</span></span><br><span class="line"><span class="comment">Object.assign(b, a) // == b</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="pipeFunctions"><a href="#pipeFunctions" class="headerlink" title="pipeFunctions"></a>pipeFunctions</h3><p>Performs left-to-right function composition.</p><p>Use <code>Array.reduce()</code> with the spread operator (<code>...</code>) to perform left-to-right function composition.<br>The first (leftmost) function can accept one or more arguments; the remaining functions must be unary.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pipeFunctions = <span class="function">(<span class="params">...fns</span>) =&gt;</span> fns.reduce(<span class="function">(<span class="params">f, g</span>) =&gt;</span> (...args) =&gt; g(f(...args)));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const add5 = x =&gt; x + 5</span></span><br><span class="line"><span class="comment">const multiply = (x, y) =&gt; x * y</span></span><br><span class="line"><span class="comment">const multiplyAndAdd5 = pipeFunctions(multiply, add5)</span></span><br><span class="line"><span class="comment">multiplyAndAdd5(5, 2) -&gt; 15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="promisify"><a href="#promisify" class="headerlink" title="promisify"></a>promisify</h3><p>Converts an asynchronous function to return a promise.</p><p>Use currying to return a function returning a <code>Promise</code> that calls the original function.<br>Use the <code>...rest</code> operator to pass in all the parameters.</p><p><em>In Node 8+, you can use <a href="https://nodejs.org/api/util.html#util_util_promisify_original" target="_blank" rel="noopener"><code>util.promisify</code></a></em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promisify = <span class="function"><span class="params">func</span> =&gt;</span></span><br><span class="line">  (...args) =&gt;</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span></span><br><span class="line">      func(...args, (err, result) =&gt;</span><br><span class="line">        err ? reject(err) : resolve(result))</span><br><span class="line">    );</span><br><span class="line"><span class="comment">// const delay = promisify((d, cb) =&gt; setTimeout(cb, d))</span></span><br><span class="line"><span class="comment">// delay(2000).then(() =&gt; console.log('Hi!')) -&gt; Promise resolves after 2s</span></span><br></pre></td></tr></table></figure><p><a href="#Table of Contents">⬆ back to top</a></p><h3 id="spreadOver"><a href="#spreadOver" class="headerlink" title="spreadOver"></a>spreadOver</h3><p>Takes a variadic function and returns a closure that accepts an array of arguments to map to the inputs of the function.</p><p>Use closures and the spread operator (<code>...</code>) to map the array of arguments to the inputs of the function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> spreadOver = <span class="function"><span class="params">fn</span> =&gt;</span> argsArr =&gt; fn(...argsArr);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const arrayMax = spreadOver(Math.max)</span></span><br><span class="line"><span class="comment">arrayMax([1,2,3]) // -&gt; 3</span></span><br><span class="line"><span class="comment">arrayMax([1,2,4]) // -&gt; 4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h2 id="Array-1"><a href="#Array-1" class="headerlink" title="Array"></a>Array</h2><h3 id="arrayGcd"><a href="#arrayGcd" class="headerlink" title="arrayGcd"></a>arrayGcd</h3><p>Calculates the greatest common denominator (gcd) of an array of numbers.</p><p>Use <code>Array.reduce()</code> and the <code>gcd</code> formula (uses recursion) to calculate the greatest common denominator of an array of numbers.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayGcd = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> gcd = <span class="function">(<span class="params">x, y</span>) =&gt;</span> !y ? x : gcd(y, x % y);</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> gcd(a, b));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// arrayGcd([1,2,3,4,5]) -&gt; 1</span></span><br><span class="line"><span class="comment">// arrayGcd([4,8,12]) -&gt; 4</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="arrayLcm"><a href="#arrayLcm" class="headerlink" title="arrayLcm"></a>arrayLcm</h3><p>Calculates the lowest common multiple (lcm) of an array of numbers.</p><p>Use <code>Array.reduce()</code> and the <code>lcm</code> formula (uses recursion) to calculate the lowest common multiple of an array of numbers.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayLcm = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> gcd = <span class="function">(<span class="params">x, y</span>) =&gt;</span> !y ? x : gcd(y, x % y);</span><br><span class="line">  <span class="keyword">const</span> lcm = <span class="function">(<span class="params">x, y</span>) =&gt;</span> (x * y) / gcd(x, y);</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> lcm(a, b));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// arrayLcm([1,2,3,4,5]) -&gt; 60</span></span><br><span class="line"><span class="comment">// arrayLcm([4,8,12]) -&gt; 24</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="arrayMax"><a href="#arrayMax" class="headerlink" title="arrayMax"></a>arrayMax</h3><p>Returns the maximum value in an array.</p><p>Use <code>Math.max()</code> combined with the spread operator (<code>...</code>) to get the maximum value in the array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayMax = <span class="function"><span class="params">arr</span> =&gt;</span> <span class="built_in">Math</span>.max(...arr);</span><br><span class="line"><span class="comment">// arrayMax([10, 1, 5]) -&gt; 10</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="arrayMin"><a href="#arrayMin" class="headerlink" title="arrayMin"></a>arrayMin</h3><p>Returns the minimum value in an array.</p><p>Use <code>Math.min()</code> combined with the spread operator (<code>...</code>) to get the minimum value in the array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayMin = <span class="function"><span class="params">arr</span> =&gt;</span> <span class="built_in">Math</span>.min(...arr);</span><br><span class="line"><span class="comment">// arrayMin([10, 1, 5]) -&gt; 1</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="chunk"><a href="#chunk" class="headerlink" title="chunk"></a>chunk</h3><p>Chunks an array into smaller arrays of a specified size.</p><p>Use <code>Array.from()</code> to create a new array, that fits the number of chunks that will be produced.<br>Use <code>Array.slice()</code> to map each element of the new array to a chunk the length of <code>size</code>.<br>If the original array can’t be split evenly, the final chunk will contain the remaining elements.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chunk = <span class="function">(<span class="params">arr, size</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: <span class="built_in">Math</span>.ceil(arr.length / size)&#125;, (v, i) =&gt; arr.slice(i * size, i * size + size));</span><br><span class="line"><span class="comment">// chunk([1,2,3,4,5], 2) -&gt; [[1,2],[3,4],[5]]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="compact"><a href="#compact" class="headerlink" title="compact"></a>compact</h3><p>Removes falsey values from an array.</p><p>Use <code>Array.filter()</code> to filter out falsey values (<code>false</code>, <code>null</code>, <code>0</code>, <code>&quot;&quot;</code>, <code>undefined</code>, and <code>NaN</code>).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compact = <span class="function"><span class="params">arr</span> =&gt;</span> arr.filter(<span class="built_in">Boolean</span>);</span><br><span class="line"><span class="comment">// compact([0, 1, false, 2, '', 3, 'a', 'e'*23, NaN, 's', 34]) -&gt; [ 1, 2, 3, 'a', 's', 34 ]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="countOccurrences"><a href="#countOccurrences" class="headerlink" title="countOccurrences"></a>countOccurrences</h3><p>Counts the occurrences of a value in an array.</p><p>Use <code>Array.reduce()</code> to increment a counter each time you encounter the specific value inside the array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countOccurrences = <span class="function">(<span class="params">arr, value</span>) =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> v === value ? a + <span class="number">1</span> : a + <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// countOccurrences([1,1,2,1,2,3], 1) -&gt; 3</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="deepFlatten"><a href="#deepFlatten" class="headerlink" title="deepFlatten"></a>deepFlatten</h3><p>Deep flattens an array.</p><p>Use recursion.<br>Use <code>Array.concat()</code> with an empty array (<code>[]</code>) and the spread operator (<code>...</code>) to flatten an array.<br>Recursively flatten each element that is an array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> deepFlatten = <span class="function"><span class="params">arr</span> =&gt;</span> [].concat(...arr.map(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">Array</span>.isArray(v) ? deepFlatten(v) : v));</span><br><span class="line"><span class="comment">// deepFlatten([1,[2],[[3],4],5]) -&gt; [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="difference"><a href="#difference" class="headerlink" title="difference"></a>difference</h3><p>Returns the difference between two arrays.</p><p>Create a <code>Set</code> from <code>b</code>, then use <code>Array.filter()</code> on <code>a</code> to only keep values not contained in <code>b</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> difference = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(b); <span class="keyword">return</span> a.filter(<span class="function"><span class="params">x</span> =&gt;</span> !s.has(x)); &#125;;</span><br><span class="line"><span class="comment">// difference([1,2,3], [1,2,4]) -&gt; [3]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="differenceWith"><a href="#differenceWith" class="headerlink" title="differenceWith"></a>differenceWith</h3><p>Filters out all values from an array for which the comparator function does not return <code>true</code>.</p><p>Use <code>Array.filter()</code> and <code>Array.find()</code> to find the appropriate values.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> differenceWith = <span class="function">(<span class="params">arr, val, comp</span>) =&gt;</span> arr.filter(<span class="function"><span class="params">a</span> =&gt;</span> !val.find(<span class="function"><span class="params">b</span> =&gt;</span> comp(a, b)));</span><br><span class="line"><span class="comment">// differenceWith([1, 1.2, 1.5, 3], [1.9, 3], (a,b) =&gt; Math.round(a) == Math.round(b)) -&gt; [1, 1.2]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="distinctValuesOfArray"><a href="#distinctValuesOfArray" class="headerlink" title="distinctValuesOfArray"></a>distinctValuesOfArray</h3><p>Returns all the distinct values of an array.</p><p>Use ES6 <code>Set</code> and the <code>...rest</code> operator to discard all duplicated values.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> distinctValuesOfArray = <span class="function"><span class="params">arr</span> =&gt;</span> [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="comment">// distinctValuesOfArray([1,2,2,3,4,4,5]) -&gt; [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="dropElements"><a href="#dropElements" class="headerlink" title="dropElements"></a>dropElements</h3><p>Removes elements in an array until the passed function returns <code>true</code>. Returns the remaining elements in the array.</p><p>Loop through the array, using <code>Array.slice()</code> to drop the first element of the array until the returned value from the function is <code>true</code>.<br>Returns the remaining elements.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dropElements = <span class="function">(<span class="params">arr, func</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (arr.length &gt; <span class="number">0</span> &amp;&amp; !func(arr[<span class="number">0</span>])) arr = arr.slice(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// dropElements([1, 2, 3, 4], n =&gt; n &gt;= 3) -&gt; [3,4]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="dropRight"><a href="#dropRight" class="headerlink" title="dropRight"></a>dropRight</h3><p>Returns a new array with <code>n</code> elements removed from the right.</p><p>Use <code>Array.slice()</code> to slice the remove the specified number of elements from the right.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dropRight = <span class="function">(<span class="params">arr, n = <span class="number">1</span></span>) =&gt;</span> arr.slice(<span class="number">0</span>, -n);</span><br><span class="line"><span class="comment">// dropRight([1,2,3]) -&gt; [1,2]</span></span><br><span class="line"><span class="comment">// dropRight([1,2,3], 2) -&gt; [1]</span></span><br><span class="line"><span class="comment">// dropRight([1,2,3], 42) -&gt; []</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="everyNth"><a href="#everyNth" class="headerlink" title="everyNth"></a>everyNth</h3><p>Returns every nth element in an array.</p><p>Use <code>Array.filter()</code> to create a new array that contains every nth element of a given array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> everyNth = <span class="function">(<span class="params">arr, nth</span>) =&gt;</span> arr.filter(<span class="function">(<span class="params">e, i</span>) =&gt;</span> i % nth === nth - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// everyNth([1,2,3,4,5,6], 2) -&gt; [ 2, 4, 6 ]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="filterNonUnique"><a href="#filterNonUnique" class="headerlink" title="filterNonUnique"></a>filterNonUnique</h3><p>Filters out the non-unique values in an array.</p><p>Use <code>Array.filter()</code> for an array containing only the unique values.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> filterNonUnique = <span class="function"><span class="params">arr</span> =&gt;</span> arr.filter(<span class="function"><span class="params">i</span> =&gt;</span> arr.indexOf(i) === arr.lastIndexOf(i));</span><br><span class="line"><span class="comment">// filterNonUnique([1,2,2,3,4,4,5]) -&gt; [1,3,5]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="flatten"><a href="#flatten" class="headerlink" title="flatten"></a>flatten</h3><p>Flattens an array.</p><p>Use a new array and concatenate it with the spread input array causing a shallow denesting of any contained arrays.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flatten = <span class="function"><span class="params">arr</span> =&gt;</span> [ ].concat(...arr);</span><br><span class="line"><span class="comment">// flatten([1,[2],3,4]) -&gt; [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="flattenDepth"><a href="#flattenDepth" class="headerlink" title="flattenDepth"></a>flattenDepth</h3><p>Flattens an array up to the specified depth.</p><p>Use recursion, decrementing <code>depth</code> by 1 for each level of depth.<br>Use <code>Array.reduce()</code> and <code>Array.concat()</code> to merge elements or arrays.<br>Base case, for <code>depth</code> equal to <code>1</code> stops recursion.<br>Omit the second element, <code>depth</code> to flatten only to a depth of <code>1</code> (single flatten).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flattenDepth = <span class="function">(<span class="params">arr, depth = <span class="number">1</span></span>) =&gt;</span></span><br><span class="line">  depth != <span class="number">1</span> ? arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> a.concat(<span class="built_in">Array</span>.isArray(v) ? flattenDepth(v, depth - <span class="number">1</span>) : v), [])</span><br><span class="line">  : arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> a.concat(v), []);</span><br><span class="line"><span class="comment">// flattenDepth([1,[2],[[[3],4],5]], 2) -&gt; [1,2,[3],4,5]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="groupBy"><a href="#groupBy" class="headerlink" title="groupBy"></a>groupBy</h3><p>Groups the elements of an array based on the given function.</p><p>Use <code>Array.map()</code> to map the values of an array to a function or property name.<br>Use <code>Array.reduce()</code> to create an object, where the keys are produced from the mapped results.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> groupBy = <span class="function">(<span class="params">arr, func</span>) =&gt;</span></span><br><span class="line">  arr.map(<span class="keyword">typeof</span> func === <span class="string">'function'</span> ? func : <span class="function"><span class="params">val</span> =&gt;</span> val[func])</span><br><span class="line">    .reduce(<span class="function">(<span class="params">acc, val, i</span>) =&gt;</span> &#123; acc[val] = (acc[val] || []).concat(arr[i]); <span class="keyword">return</span> acc; &#125;, &#123;&#125;);</span><br><span class="line"><span class="comment">// groupBy([6.1, 4.2, 6.3], Math.floor) -&gt; &#123;4: [4.2], 6: [6.1, 6.3]&#125;</span></span><br><span class="line"><span class="comment">// groupBy(['one', 'two', 'three'], 'length') -&gt; &#123;3: ['one', 'two'], 5: ['three']&#125;</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>Returns the head of a list.</p><p>Use <code>arr[0]</code> to return the first element of the passed array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> head = <span class="function"><span class="params">arr</span> =&gt;</span> arr[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// head([1,2,3]) -&gt; 1</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="initial"><a href="#initial" class="headerlink" title="initial"></a>initial</h3><p>Returns all the elements of an array except the last one.</p><p>Use <code>arr.slice(0,-1)</code> to return all but the last element of the array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initial = <span class="function"><span class="params">arr</span> =&gt;</span> arr.slice(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// initial([1,2,3]) -&gt; [1,2]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="initialize2DArray"><a href="#initialize2DArray" class="headerlink" title="initialize2DArray"></a>initialize2DArray</h3><p>Initializes a 2D array of given width and height and value.</p><p>Use <code>Array.map()</code> to generate h rows where each is a new array of size w initialize with value. If the value is not provided, default to <code>null</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialize2DArray = <span class="function">(<span class="params">w, h, val = <span class="literal">null</span></span>) =&gt;</span> <span class="built_in">Array</span>(h).fill().map(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">Array</span>(w).fill(val));</span><br><span class="line"><span class="comment">// initializeArrayWithRange(2, 2, 0) -&gt; [[0,0], [0,0]]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="initializeArrayWithRange"><a href="#initializeArrayWithRange" class="headerlink" title="initializeArrayWithRange"></a>initializeArrayWithRange</h3><p>Initializes an array containing the numbers in the specified range where <code>start</code> and <code>end</code> are inclusive.</p><p>Use <code>Array((end + 1) - start)</code> to create an array of the desired length, <code>Array.map()</code> to fill with the desired values in a range.<br>You can omit <code>start</code> to use a default value of <code>0</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initializeArrayWithRange = <span class="function">(<span class="params">end, start = <span class="number">0</span></span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: <span class="function">(<span class="params">end + <span class="number">1</span></span>) - <span class="params">start</span> &#125;).<span class="params">map</span>(<span class="params">(v, i</span>) =&gt;</span> i + start);</span><br><span class="line"><span class="comment">// initializeArrayWithRange(5) -&gt; [0,1,2,3,4,5]</span></span><br><span class="line"><span class="comment">// initializeArrayWithRange(7, 3) -&gt; [3,4,5,6,7]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="initializeArrayWithValues"><a href="#initializeArrayWithValues" class="headerlink" title="initializeArrayWithValues"></a>initializeArrayWithValues</h3><p>Initializes and fills an array with the specified values.</p><p>Use <code>Array(n)</code> to create an array of the desired length, <code>fill(v)</code> to fill it with the desired values.<br>You can omit <code>value</code> to use a default value of <code>0</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initializeArrayWithValues = <span class="function">(<span class="params">n, value = <span class="number">0</span></span>) =&gt;</span> <span class="built_in">Array</span>(n).fill(value);</span><br><span class="line"><span class="comment">// initializeArrayWithValues(5, 2) -&gt; [2,2,2,2,2]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="intersection"><a href="#intersection" class="headerlink" title="intersection"></a>intersection</h3><p>Returns a list of elements that exist in both arrays.</p><p>Create a <code>Set</code> from <code>b</code>, then use <code>Array.filter()</code> on <code>a</code> to only keep values contained in <code>b</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> intersection = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123; <span class="keyword">const</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(b); <span class="keyword">return</span> a.filter(<span class="function"><span class="params">x</span> =&gt;</span> s.has(x)); &#125;;</span><br><span class="line"><span class="comment">// intersection([1,2,3], [4,3,2]) -&gt; [2,3]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="last"><a href="#last" class="headerlink" title="last"></a>last</h3><p>Returns the last element in an array.</p><p>Use <code>arr.length - 1</code> to compute the index of the last element of the given array and returning it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> last = <span class="function"><span class="params">arr</span> =&gt;</span> arr[arr.length - <span class="number">1</span>];</span><br><span class="line"><span class="comment">// last([1,2,3]) -&gt; 3</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="mapObject"><a href="#mapObject" class="headerlink" title="mapObject"></a>mapObject</h3><p>Maps the values of an array to an object using a function, where the key-value pairs consist of the original value as the key and the mapped value.</p><p>Use an anonymous inner function scope to declare an undefined memory space, using closures to store a return value. Use a new <code>Array</code> to store the array with a map of the function over its data set and a comma operator to return a second step, without needing to move from one context to another (due to closures and order of operations).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapObject = <span class="function">(<span class="params">arr, fn</span>) =&gt;</span></span><br><span class="line">  (<span class="function"><span class="params">a</span> =&gt;</span> (a = [arr, arr.map(fn)], a[<span class="number">0</span>].reduce(<span class="function">(<span class="params">acc, val, ind</span>) =&gt;</span> (acc[val] = a[<span class="number">1</span>][ind], acc), &#123;&#125;)))();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const squareIt = arr =&gt; mapObject(arr, a =&gt; a*a)</span></span><br><span class="line"><span class="comment">squareIt([1,2,3]) // &#123; 1: 1, 2: 4, 3: 9 &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="nthElement"><a href="#nthElement" class="headerlink" title="nthElement"></a>nthElement</h3><p>Returns the nth element of an array.</p><p>Use <code>Array.slice()</code> to get an array containing the nth element at the first place.<br>If the index is out of bounds, return <code>[]</code>.<br>Omit the second argument, <code>n</code>, to get the first element of the array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nthElement = <span class="function">(<span class="params">arr, n = <span class="number">0</span></span>) =&gt;</span> (n &gt; <span class="number">0</span> ? arr.slice(n, n + <span class="number">1</span>) : arr.slice(n))[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// nthElement(['a','b','c'],1) -&gt; 'b'</span></span><br><span class="line"><span class="comment">// nthElement(['a','b','b'],-3) -&gt; 'a'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="pick"><a href="#pick" class="headerlink" title="pick"></a>pick</h3><p>Picks the key-value pairs corresponding to the given keys from an object.</p><p>Use <code>Array.reduce()</code> to convert the filtered/picked keys back to an object with the corresponding key-value pair if the key exists in the obj.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pick = <span class="function">(<span class="params">obj, arr</span>) =&gt;</span></span><br><span class="line">  arr.reduce(<span class="function">(<span class="params">acc, curr</span>) =&gt;</span> (curr <span class="keyword">in</span> obj &amp;&amp; (acc[curr] = obj[curr]), acc), &#123;&#125;);</span><br><span class="line"><span class="comment">// pick(&#123; 'a': 1, 'b': '2', 'c': 3 &#125;, ['a', 'c']) -&gt; &#123; 'a': 1, 'c': 3 &#125;</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h3><p>Mutates the original array to filter out the values specified.</p><p>Use <code>Array.filter()</code> and <code>Array.includes()</code> to pull out the values that are not needed.<br>Use <code>Array.length = 0</code> to mutate the passed in an array by resetting it’s length to zero and <code>Array.push()</code> to re-populate it with only the pulled values.</p><p><em>(For a snippet that does not mutate the original array see <a href="#without"><code>without</code></a>)</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pull = <span class="function">(<span class="params">arr, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> argState = <span class="built_in">Array</span>.isArray(args[<span class="number">0</span>]) ? args[<span class="number">0</span>] : args;</span><br><span class="line">  <span class="keyword">let</span> pulled = arr.filter(<span class="function">(<span class="params">v, i</span>) =&gt;</span> !argState.includes(v));</span><br><span class="line">  arr.length = <span class="number">0</span>;</span><br><span class="line">  pulled.forEach(<span class="function"><span class="params">v</span> =&gt;</span> arr.push(v));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let myArray1 = ['a', 'b', 'c', 'a', 'b', 'c'];</span></span><br><span class="line"><span class="comment">// pull(myArray1, 'a', 'c');</span></span><br><span class="line"><span class="comment">// console.log(myArray1) -&gt; [ 'b', 'b' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let myArray2 = ['a', 'b', 'c', 'a', 'b', 'c'];</span></span><br><span class="line"><span class="comment">// pull(myArray2, ['a', 'c']);</span></span><br><span class="line"><span class="comment">// console.log(myArray2) -&gt; [ 'b', 'b' ]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="pullAtIndex"><a href="#pullAtIndex" class="headerlink" title="pullAtIndex"></a>pullAtIndex</h3><p>Mutates the original array to filter out the values at the specified indexes.</p><p>Use <code>Array.filter()</code> and <code>Array.includes()</code> to pull out the values that are not needed.<br>Use <code>Array.length = 0</code> to mutate the passed in an array by resetting it’s length to zero and <code>Array.push()</code> to re-populate it with only the pulled values.<br>Use <code>Array.push()</code> to keep track of pulled values</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pullAtIndex = <span class="function">(<span class="params">arr, pullArr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> removed = [];</span><br><span class="line">  <span class="keyword">let</span> pulled = arr.map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> pullArr.includes(i) ? removed.push(v) : v)</span><br><span class="line">                  .filter(<span class="function">(<span class="params">v, i</span>) =&gt;</span> !pullArr.includes(i));</span><br><span class="line">  arr.length = <span class="number">0</span>;</span><br><span class="line">  pulled.forEach(<span class="function"><span class="params">v</span> =&gt;</span> arr.push(v));</span><br><span class="line">  <span class="keyword">return</span> removed;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let myArray = ['a', 'b', 'c', 'd'];</span></span><br><span class="line"><span class="comment">// let pulled = pullAtIndex(myArray, [1, 3]);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(myArray); -&gt; [ 'a', 'c' ]</span></span><br><span class="line"><span class="comment">// console.log(pulled); -&gt; [ 'b', 'd' ]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="pullAtValue"><a href="#pullAtValue" class="headerlink" title="pullAtValue"></a>pullAtValue</h3><p>Mutates the original array to filter out the values specified. Returns the removed elements.</p><p>Use <code>Array.filter()</code> and <code>Array.includes()</code> to pull out the values that are not needed.<br>Use <code>Array.length = 0</code> to mutate the passed in an array by resetting it’s length to zero and <code>Array.push()</code> to re-populate it with only the pulled values.<br>Use <code>Array.push()</code> to keep track of pulled values</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pullAtValue = <span class="function">(<span class="params">arr, pullArr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> removed = [],</span><br><span class="line">    pushToRemove = arr.forEach(<span class="function">(<span class="params">v, i</span>) =&gt;</span> pullArr.includes(v) ? removed.push(v) : v),</span><br><span class="line">    mutateTo = arr.filter(<span class="function">(<span class="params">v, i</span>) =&gt;</span> !pullArr.includes(v));</span><br><span class="line">  arr.length = <span class="number">0</span>;</span><br><span class="line">  mutateTo.forEach(<span class="function"><span class="params">v</span> =&gt;</span> arr.push(v));</span><br><span class="line">  <span class="keyword">return</span> removed;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">let myArray = ['a', 'b', 'c', 'd'];</span></span><br><span class="line"><span class="comment">let pulled = pullAtValue(myArray, ['b', 'd']);</span></span><br><span class="line"><span class="comment">console.log(myArray); -&gt; [ 'a', 'c' ]</span></span><br><span class="line"><span class="comment">console.log(pulled); -&gt; [ 'b', 'd' ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><p>Removes elements from an array for which the given function returns <code>false</code>.</p><p>Use <code>Array.filter()</code> to find array elements that return truthy values and <code>Array.reduce()</code> to remove elements using <code>Array.splice()</code>.<br>The <code>func</code> is invoked with three arguments (<code>value, index, array</code>).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> remove = <span class="function">(<span class="params">arr, func</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.isArray(arr) ? arr.filter(func).reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> &#123;</span><br><span class="line">    arr.splice(arr.indexOf(val), <span class="number">1</span>); <span class="keyword">return</span> acc.concat(val);</span><br><span class="line">  &#125;, [])</span><br><span class="line">  : [];</span><br><span class="line"><span class="comment">// remove([1, 2, 3, 4], n =&gt; n % 2 == 0) -&gt; [2, 4]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h3><p>Returns a random element from an array.</p><p>Use <code>Math.random()</code> to generate a random number, multiply it by <code>length</code> and round it of to the nearest whole number using <code>Math.floor()</code>.<br>This method also works with strings.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sample = <span class="function"><span class="params">arr</span> =&gt;</span> arr[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * arr.length)];</span><br><span class="line"><span class="comment">// sample([3, 7, 9, 11]) -&gt; 9</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h3><p>Randomizes the order of the values of an array, returning a new array.</p><p>Uses the Fisher-Yates algoritm to reorder the elements of the array, based on the <a href="https://github.com/lodash/lodash/blob/b2ea6b1cd251796dcb5f9700c4911a7b6223920b/shuffle.js" target="_blank" rel="noopener">Lodash implementation</a>, but as a pure function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shuffle = <span class="function">(<span class="params">[...arr]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> m = arr.length;</span><br><span class="line">  <span class="keyword">while</span> (m) &#123;</span><br><span class="line">    <span class="keyword">const</span> i = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * m--);</span><br><span class="line">    [arr[m], arr[i]] = [arr[i], arr[m]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// const foo = [1,2,3]</span></span><br><span class="line"><span class="comment">// shuffle(foo) -&gt; [2,3,1]</span></span><br><span class="line"><span class="comment">// console.log(foo) -&gt; [1,2,3]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="similarity"><a href="#similarity" class="headerlink" title="similarity"></a>similarity</h3><p>Returns an array of elements that appear in both arrays.</p><p>Use <code>filter()</code> to remove values that are not part of <code>values</code>, determined using <code>includes()</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> similarity = <span class="function">(<span class="params">arr, values</span>) =&gt;</span> arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> values.includes(v));</span><br><span class="line"><span class="comment">// similarity([1,2,3], [1,2,4]) -&gt; [1,2]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="symmetricDifference"><a href="#symmetricDifference" class="headerlink" title="symmetricDifference"></a>symmetricDifference</h3><p>Returns the symmetric difference between two arrays.</p><p>Create a <code>Set</code> from each array, then use <code>Array.filter()</code> on each of them to only keep values not contained in the other.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> symmetricDifference = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> sA = <span class="keyword">new</span> <span class="built_in">Set</span>(a), sB = <span class="keyword">new</span> <span class="built_in">Set</span>(b);</span><br><span class="line">  <span class="keyword">return</span> [...a.filter(<span class="function"><span class="params">x</span> =&gt;</span> !sB.has(x)), ...b.filter(<span class="function"><span class="params">x</span> =&gt;</span> !sA.has(x))];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// symmetricDifference([1,2,3], [1,2,4]) -&gt; [3,4]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>Returns all elements in an array except for the first one.</p><p>Return <code>arr.slice(1)</code> if the array’s <code>length</code> is more than <code>1</code>, otherwise, return the whole array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tail = <span class="function"><span class="params">arr</span> =&gt;</span> arr.length &gt; <span class="number">1</span> ? arr.slice(<span class="number">1</span>) : arr;</span><br><span class="line"><span class="comment">// tail([1,2,3]) -&gt; [2,3]</span></span><br><span class="line"><span class="comment">// tail([1]) -&gt; [1]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="take"><a href="#take" class="headerlink" title="take"></a>take</h3><p>Returns an array with n elements removed from the beginning.</p><p>Use <code>Array.slice()</code> to create a slice of the array with <code>n</code> elements taken from the beginning.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> take = <span class="function">(<span class="params">arr, n = <span class="number">1</span></span>) =&gt;</span> arr.slice(<span class="number">0</span>, n);</span><br><span class="line"><span class="comment">// take([1, 2, 3], 5) -&gt; [1, 2, 3]</span></span><br><span class="line"><span class="comment">// take([1, 2, 3], 0) -&gt; []</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="takeRight"><a href="#takeRight" class="headerlink" title="takeRight"></a>takeRight</h3><p>Returns an array with n elements removed from the end.</p><p>Use <code>Array.slice()</code> to create a slice of the array with <code>n</code> elements taken from the end.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> takeRight = <span class="function">(<span class="params">arr, n = <span class="number">1</span></span>) =&gt;</span> arr.slice(arr.length - n, arr.length);</span><br><span class="line"><span class="comment">// takeRight([1, 2, 3], 2) -&gt; [ 2, 3 ]</span></span><br><span class="line"><span class="comment">// takeRight([1, 2, 3]) -&gt; [3]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>Returns every element that exists in any of the two arrays once.</p><p>Create a <code>Set</code> with all values of <code>a</code> and <code>b</code> and convert to an array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> union = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>([...a, ...b]));</span><br><span class="line"><span class="comment">// union([1,2,3], [4,3,2]) -&gt; [1,2,3,4]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="without"><a href="#without" class="headerlink" title="without"></a>without</h3><p>Filters out the elements of an array, that have one of the specified values.</p><p>Use <code>Array.filter()</code> to create an array excluding(using <code>!Array.includes()</code>) all given values.</p><p><em>(For a snippet that mutates the original array see <a href="#pull"><code>pull</code></a>)</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> without = <span class="function">(<span class="params">arr, ...args</span>) =&gt;</span> arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> !args.includes(v));</span><br><span class="line"><span class="comment">// without([2, 1, 2, 3], 1, 2) -&gt; [3]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h3><p>Creates an array of elements, grouped based on the position in the original arrays.</p><p>Use <code>Math.max.apply()</code> to get the longest array in the arguments.<br>Creates an array with that length as return value and use <code>Array.from()</code> with a map-function to create an array of grouped elements.<br>If lengths of the argument-arrays vary, <code>undefined</code> is used where no value could be found.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zip = <span class="function">(<span class="params">...arrays</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> maxLength = <span class="built_in">Math</span>.max(...arrays.map(<span class="function"><span class="params">x</span> =&gt;</span> x.length));</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: maxLength&#125;).map(<span class="function">(<span class="params">_, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: arrays.length&#125;, (_, k) =&gt; arrays[k][i]);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// zip(['a', 'b'], [1, 2], [true, false]); -&gt; [['a', 1, true], ['b', 2, false]]</span></span><br><span class="line"><span class="comment">// zip(['a'], [1, 2], [true, false]); -&gt; [['a', 1, true], [undefined, 2, false]]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="zipObject"><a href="#zipObject" class="headerlink" title="zipObject"></a>zipObject</h3><p>Given an array of valid property identifiers and an array of values, return an object associating the properties to the values.</p><p>Since an object can have undefined values but not undefined property pointers, the array of properties is used to decide the structure of the resulting object using <code>Array.reduce()</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zipObject = <span class="function">(<span class="params">props, values</span>) =&gt;</span> props.reduce(<span class="function">(<span class="params">obj, prop, index</span>) =&gt;</span> (obj[prop] = values[index], obj), &#123;&#125;);</span><br><span class="line"><span class="comment">// zipObject(['a','b','c'], [1,2]) -&gt; &#123;a: 1, b: 2, c: undefined&#125;</span></span><br><span class="line"><span class="comment">// zipObject(['a','b'], [1,2,3]) -&gt; &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h2 id="Browser-1"><a href="#Browser-1" class="headerlink" title="Browser"></a>Browser</h2><h3 id="arrayToHtmlList"><a href="#arrayToHtmlList" class="headerlink" title="arrayToHtmlList"></a>arrayToHtmlList</h3><p>Converts the given array elements into <code>&lt;li&gt;</code> tags and appends them to the list of the given id.</p><p>Use <code>Array.map()</code> and <code>document.querySelector()</code> to create a list of html tags.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayToHtmlList = <span class="function">(<span class="params">arr, listID</span>) =&gt;</span> arr.map(<span class="function"><span class="params">item</span> =&gt;</span> <span class="built_in">document</span>.querySelector(<span class="string">'#'</span> + listID).innerHTML += <span class="string">`&lt;li&gt;<span class="subst">$&#123;item&#125;</span>&lt;/li&gt;`</span>);</span><br><span class="line"><span class="comment">// arrayToHtmlList(['item 1', 'item 2'],'myListID')</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="bottomVisible"><a href="#bottomVisible" class="headerlink" title="bottomVisible"></a>bottomVisible</h3><p>Returns <code>true</code> if the bottom of the page is visible, <code>false</code> otherwise.</p><p>Use <code>scrollY</code>, <code>scrollHeight</code> and <code>clientHeight</code> to determine if the bottom of the page is visible.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bottomVisible = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  <span class="built_in">document</span>.documentElement.clientHeight + <span class="built_in">window</span>.scrollY &gt;= (<span class="built_in">document</span>.documentElement.scrollHeight || <span class="built_in">document</span>.documentElement.clientHeight);</span><br><span class="line"><span class="comment">// bottomVisible() -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="currentURL"><a href="#currentURL" class="headerlink" title="currentURL"></a>currentURL</h3><p>Returns the current URL.</p><p>Use <code>window.location.href</code> to get current URL.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> currentURL = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">window</span>.location.href;</span><br><span class="line"><span class="comment">// currentUrl() -&gt; 'https://google.com'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="detectDeviceType"><a href="#detectDeviceType" class="headerlink" title="detectDeviceType"></a>detectDeviceType</h3><p>Detects wether the website is being opened in a mobile device or a desktop/laptop.</p><p>Use a regular expression to test the <code>navigator.userAgent</code> property to figure out if the device is a mobile device or a desktop/laptop.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> detectDeviceType = <span class="function"><span class="params">()</span> =&gt;</span> /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ? <span class="string">'Mobile'</span> : <span class="string">'Desktop'</span>;</span><br><span class="line"><span class="comment">// detectDeviceType() -&gt; "Mobile"</span></span><br><span class="line"><span class="comment">// detectDeviceType() -&gt; "Desktop"</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="elementIsVisibleInViewport"><a href="#elementIsVisibleInViewport" class="headerlink" title="elementIsVisibleInViewport"></a>elementIsVisibleInViewport</h3><p>Returns <code>true</code> if the element specified is visible in the viewport, <code>false</code> otherwise.</p><p>Use <code>Element.getBoundingClientRect()</code> and the <code>window.inner(Width|Height)</code> values<br>to determine if a given element is visible in the viewport.<br>Omit the second argument to determine if the element is entirely visible, or specify <code>true</code> to determine if<br>it is partially visible.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> elementIsVisibleInViewport = <span class="function">(<span class="params">el, partiallyVisible = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; top, left, bottom, right &#125; = el.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">const</span> &#123; innerHeight, innerWidth &#125; = <span class="built_in">window</span>;</span><br><span class="line">  <span class="keyword">return</span> partiallyVisible</span><br><span class="line">    ? ((top &gt; <span class="number">0</span> &amp;&amp; top &lt; innerHeight) || (bottom &gt; <span class="number">0</span> &amp;&amp; bottom &lt; innerHeight)) &amp;&amp;</span><br><span class="line">      ((left &gt; <span class="number">0</span> &amp;&amp; left &lt; innerWidth) || (right &gt; <span class="number">0</span> &amp;&amp; right &lt; innerWidth))</span><br><span class="line">    : top &gt;= <span class="number">0</span> &amp;&amp; left &gt;= <span class="number">0</span> &amp;&amp; bottom &lt;= innerHeight &amp;&amp; right &lt;= innerWidth;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// e.g. 100x100 viewport and a 10x10px element at position &#123;top: -1, left: 0, bottom: 9, right: 10&#125;</span></span><br><span class="line"><span class="comment">// elementIsVisibleInViewport(el) -&gt; false (not fully visible)</span></span><br><span class="line"><span class="comment">// elementIsVisibleInViewport(el, true) -&gt; true (partially visible)</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="getScrollPosition"><a href="#getScrollPosition" class="headerlink" title="getScrollPosition"></a>getScrollPosition</h3><p>Returns the scroll position of the current page.</p><p>Use <code>pageXOffset</code> and <code>pageYOffset</code> if they are defined, otherwise <code>scrollLeft</code> and <code>scrollTop</code>.<br>You can omit <code>el</code> to use a default value of <code>window</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getScrollPosition = <span class="function">(<span class="params">el = <span class="built_in">window</span></span>) =&gt;</span></span><br><span class="line">  (&#123;<span class="attr">x</span>: (el.pageXOffset !== <span class="literal">undefined</span>) ? el.pageXOffset : el.scrollLeft,</span><br><span class="line">    y: (el.pageYOffset !== <span class="literal">undefined</span>) ? el.pageYOffset : el.scrollTop&#125;);</span><br><span class="line"><span class="comment">// getScrollPosition() -&gt; &#123;x: 0, y: 200&#125;</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="getURLParameters"><a href="#getURLParameters" class="headerlink" title="getURLParameters"></a>getURLParameters</h3><p>Returns an object containing the parameters of the current URL.</p><p>Use <code>match()</code> with an appropriate regular expression to get all key-value pairs, <code>Array.reduce()</code> to map and combine them into a single object.<br>Pass <code>location.search</code> as the argument to apply to the current <code>url</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getURLParameters = <span class="function"><span class="params">url</span> =&gt;</span></span><br><span class="line">  url.match(<span class="regexp">/([^?=&amp;]+)(=([^&amp;]*))/g</span>).reduce(</span><br><span class="line">    (a, v) =&gt; (a[v.slice(<span class="number">0</span>, v.indexOf(<span class="string">'='</span>))] = v.slice(v.indexOf(<span class="string">'='</span>) + <span class="number">1</span>), a), &#123;&#125;</span><br><span class="line">  );</span><br><span class="line"><span class="comment">// getURLParameters('http://url.com/page?name=Adam&amp;surname=Smith') -&gt; &#123;name: 'Adam', surname: 'Smith'&#125;</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="httpsRedirect"><a href="#httpsRedirect" class="headerlink" title="httpsRedirect"></a>httpsRedirect</h3><p>Redirects the page to HTTPS if its currently in HTTP. Also, pressing the back button doesn’t take it back to the HTTP page as its replaced in the history.</p><p>Use <code>location.protocol</code> to get the protocol currently being used. If it’s not HTTPS, use <code>location.replace()</code> to replace the existing page with the HTTPS version of the page. Use <code>location.href</code> to get the full address, split it with <code>String.split()</code> and remove the protocol part of the URL.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> httpsRedirect = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (location.protocol !== <span class="string">'https:'</span>) location.replace(<span class="string">'https://'</span> + location.href.split(<span class="string">'//'</span>)[<span class="number">1</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="redirect"><a href="#redirect" class="headerlink" title="redirect"></a>redirect</h3><p>Redirects to a specified URL.</p><p>Use <code>window.location.href</code> or <code>window.location.replace()</code> to redirect to <code>url</code>.<br>Pass a second argument to simulate a link click (<code>true</code> - default) or an HTTP redirect (<code>false</code>).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> redirect = <span class="function">(<span class="params">url, asLink = <span class="literal">true</span></span>) =&gt;</span></span><br><span class="line">  asLink ? <span class="built_in">window</span>.location.href = url : <span class="built_in">window</span>.location.replace(url);</span><br><span class="line"><span class="comment">// redirect('https://google.com')</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="scrollToTop"><a href="#scrollToTop" class="headerlink" title="scrollToTop"></a>scrollToTop</h3><p>Smooth-scrolls to the top of the page.</p><p>Get distance from top using <code>document.documentElement.scrollTop</code> or <code>document.body.scrollTop</code>.<br>Scroll by a fraction of the distance from the top. Use <code>window.requestAnimationFrame()</code> to animate the scrolling.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scrollToTop = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> c = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">  <span class="keyword">if</span> (c &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(scrollToTop);</span><br><span class="line">    <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, c - c / <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// scrollToTop()</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h2 id="Date-1"><a href="#Date-1" class="headerlink" title="Date"></a>Date</h2><h3 id="getDaysDiffBetweenDates"><a href="#getDaysDiffBetweenDates" class="headerlink" title="getDaysDiffBetweenDates"></a>getDaysDiffBetweenDates</h3><p>Returns the difference (in days) between two dates.</p><p>Calculate the difference (in days) between two <code>Date</code> objects.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getDaysDiffBetweenDates = <span class="function">(<span class="params">dateInitial, dateFinal</span>) =&gt;</span> (dateFinal - dateInitial) / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>);</span><br><span class="line"><span class="comment">// getDaysDiffBetweenDates(new Date("2017-12-13"), new Date("2017-12-22")) -&gt; 9</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="JSONToDate"><a href="#JSONToDate" class="headerlink" title="JSONToDate"></a>JSONToDate</h3><p>Converts a JSON object to a date.</p><p>Use <code>Date()</code>, to convert dates in JSON format to readable format (<code>dd/mm/yyyy</code>).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> JSONToDate = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(arr.toString().substr(<span class="number">6</span>)));</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;dt.getDate()&#125;</span>/<span class="subst">$&#123;dt.getMonth() + <span class="number">1</span>&#125;</span>/<span class="subst">$&#123;dt.getFullYear()&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// JSONToDate(/Date(1489525200000)/) -&gt; "14/3/2017"</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="toEnglishDate"><a href="#toEnglishDate" class="headerlink" title="toEnglishDate"></a>toEnglishDate</h3><p>Converts a date from American format to English format.</p><p>Use <code>Date.toISOString()</code>, <code>split(&#39;T&#39;)</code> and <code>replace()</code> to convert a date from American format to the English format.<br>Throws an error if the passed time cannot be converted to a date.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toEnglishDate = <span class="function">(<span class="params">time</span>) =&gt;</span> &#123; <span class="keyword">try</span> &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(time).toISOString().split(<span class="string">'T'</span>)[<span class="number">0</span>].replace(<span class="regexp">/-/g</span>, <span class="string">'/'</span>); &#125; <span class="keyword">catch</span> (e) &#123;&#125; &#125;;</span><br><span class="line"><span class="comment">// toEnglishDate('09/21/2010') -&gt; '21/09/2010'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="tomorrow"><a href="#tomorrow" class="headerlink" title="tomorrow"></a>tomorrow</h3><p>Results in a string representation of tomorrow’s date.<br>Use <code>new Date()</code> to get today’s date, adding <code>86400000</code> of seconds to it(24 hours), using <code>toISOString</code> to convert Date object to string.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> tomorrow = <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() + <span class="number">86400000</span>).toISOString().split(<span class="string">'T'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// tomorrow() -&gt; 2017-12-27 (if current date is 2017-12-26)</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h2 id="Function-1"><a href="#Function-1" class="headerlink" title="Function"></a>Function</h2><h3 id="chainAsync"><a href="#chainAsync" class="headerlink" title="chainAsync"></a>chainAsync</h3><p>Chains asynchronous functions.</p><p>Loop through an array of functions containing asynchronous events, calling <code>next</code> when each asynchronous event has completed.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chainAsync = <span class="function"><span class="params">fns</span> =&gt;</span> &#123; <span class="keyword">let</span> curr = <span class="number">0</span>; <span class="keyword">const</span> next = <span class="function"><span class="params">()</span> =&gt;</span> fns[curr++](next); next(); &#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">chainAsync([</span></span><br><span class="line"><span class="comment">  next =&gt; &#123; console.log('0 seconds'); setTimeout(next, 1000); &#125;,</span></span><br><span class="line"><span class="comment">  next =&gt; &#123; console.log('1 second');  setTimeout(next, 1000); &#125;,</span></span><br><span class="line"><span class="comment">  next =&gt; &#123; console.log('2 seconds'); &#125;</span></span><br><span class="line"><span class="comment">])</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p>Performs right-to-left function composition.</p><p>Use <code>Array.reduce()</code> to perform right-to-left function composition.<br>The last (rightmost) function can accept one or more arguments; the remaining functions must be unary.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compose = <span class="function">(<span class="params">...fns</span>) =&gt;</span> fns.reduce(<span class="function">(<span class="params">f, g</span>) =&gt;</span> (...args) =&gt; f(g(...args)));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const add5 = x =&gt; x + 5</span></span><br><span class="line"><span class="comment">const multiply = (x, y) =&gt; x * y</span></span><br><span class="line"><span class="comment">const multiplyAndAdd5 = compose(add5, multiply)</span></span><br><span class="line"><span class="comment">multiplyAndAdd5(5, 2) -&gt; 15</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="curry"><a href="#curry" class="headerlink" title="curry"></a>curry</h3><p>Curries a function.</p><p>Use recursion.<br>If the number of provided arguments (<code>args</code>) is sufficient, call the passed function <code>fn</code>.<br>Otherwise, return a curried function <code>fn</code> that expects the rest of the arguments.<br>If you want to curry a function that accepts a variable number of arguments (a variadic function, e.g. <code>Math.min()</code>), you can optionally pass the number of arguments to the second parameter <code>arity</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> curry = <span class="function">(<span class="params">fn, arity = fn.length, ...args</span>) =&gt;</span></span><br><span class="line">  arity &lt;= args.length</span><br><span class="line">    ? fn(...args)</span><br><span class="line">    : curry.bind(<span class="literal">null</span>, fn, arity, ...args);</span><br><span class="line"><span class="comment">// curry(Math.pow)(2)(10) -&gt; 1024</span></span><br><span class="line"><span class="comment">// curry(Math.min, 3)(10)(50)(2) -&gt; 2</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="functionName"><a href="#functionName" class="headerlink" title="functionName"></a>functionName</h3><p>Logs the name of a function.</p><p>Use <code>console.debug()</code> and the <code>name</code> property of the passed method to log the method’s name to the <code>debug</code> channel of the console.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> functionName = <span class="function"><span class="params">fn</span> =&gt;</span> (<span class="built_in">console</span>.debug(fn.name), fn);</span><br><span class="line"><span class="comment">// functionName(Math.max) -&gt; max (logged in debug channel of console)</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="runPromisesInSeries"><a href="#runPromisesInSeries" class="headerlink" title="runPromisesInSeries"></a>runPromisesInSeries</h3><p>Runs an array of promises in series.</p><p>Use <code>Array.reduce()</code> to create a promise chain, where each promise returns the next promise when resolved.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> runPromisesInSeries = <span class="function"><span class="params">ps</span> =&gt;</span> ps.reduce(<span class="function">(<span class="params">p, next</span>) =&gt;</span> p.then(next), <span class="built_in">Promise</span>.resolve());</span><br><span class="line"><span class="comment">// const delay = (d) =&gt; new Promise(r =&gt; setTimeout(r, d))</span></span><br><span class="line"><span class="comment">// runPromisesInSeries([() =&gt; delay(1000), () =&gt; delay(2000)]) -&gt; executes each promise sequentially, taking a total of 3 seconds to complete</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><p>Delays the execution of an asynchronous function.</p><p>Delay executing part of an <code>async</code> function, by putting it to sleep, returning a <code>Promise</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sleep = <span class="function"><span class="params">ms</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, ms));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">async function sleepyWork() &#123;</span></span><br><span class="line"><span class="comment">  console.log('I\'m going to sleep for 1 second.');</span></span><br><span class="line"><span class="comment">  await sleep(1000);</span></span><br><span class="line"><span class="comment">  console.log('I woke up after 1 second.');</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h2 id="Logic-1"><a href="#Logic-1" class="headerlink" title="Logic"></a>Logic</h2><h3 id="negate"><a href="#negate" class="headerlink" title="negate"></a>negate</h3><p>Negates a predicate function.</p><p>Take a predicate function and apply <code>not</code> to it with its arguments.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> negate = <span class="function"><span class="params">func</span> =&gt;</span> (...args) =&gt; !func(...args);</span><br><span class="line"><span class="comment">// filter([1, 2, 3, 4, 5, 6], negate(isEven)) -&gt; [1, 3, 5]</span></span><br><span class="line"><span class="comment">// negate(isOdd)(1) -&gt; false</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h2 id="Math-1"><a href="#Math-1" class="headerlink" title="Math"></a>Math</h2><h3 id="arrayAverage"><a href="#arrayAverage" class="headerlink" title="arrayAverage"></a>arrayAverage</h3><p>Returns the average of an array of numbers.</p><p>Use <code>Array.reduce()</code> to add each value to an accumulator, initialized with a value of <code>0</code>, divide by the <code>length</code> of the array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrayAverage = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>) / arr.length;</span><br><span class="line"><span class="comment">// arrayAverage([1,2,3]) -&gt; 2</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="arraySum"><a href="#arraySum" class="headerlink" title="arraySum"></a>arraySum</h3><p>Returns the sum of an array of numbers.</p><p>Use <code>Array.reduce()</code> to add each value to an accumulator, initialized with a value of <code>0</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arraySum = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// arraySum([1,2,3,4]) -&gt; 10</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="clampNumber"><a href="#clampNumber" class="headerlink" title="clampNumber"></a>clampNumber</h3><p>Clamps <code>num</code> within the inclusive range specified by the boundary values <code>a</code> and <code>b</code></p><p>If <code>num</code> falls within the range, return <code>num</code>.<br>Otherwise, return the nearest number in the range.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> clampNumber = <span class="function">(<span class="params">num, a, b</span>) =&gt;</span> <span class="built_in">Math</span>.max(<span class="built_in">Math</span>.min(num, <span class="built_in">Math</span>.max(a,b)),<span class="built_in">Math</span>.min(a,b));</span><br><span class="line"><span class="comment">// clampNumber(2, 3, 5) -&gt; 3</span></span><br><span class="line"><span class="comment">// clampNumber(1, -1, -5) -&gt; -1</span></span><br><span class="line"><span class="comment">// clampNumber(3, 2, 4) -&gt; 3</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="collatz"><a href="#collatz" class="headerlink" title="collatz"></a>collatz</h3><p>Applies the Collatz algorithm.</p><p>If <code>n</code> is even, return <code>n/2</code>. Otherwise, return <code>3n+1</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> collatz = <span class="function"><span class="params">n</span> =&gt;</span> (n % <span class="number">2</span> == <span class="number">0</span>) ? (n / <span class="number">2</span>) : (<span class="number">3</span> * n + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// collatz(8) --&gt; 4</span></span><br><span class="line"><span class="comment">// collatz(5) --&gt; 16</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="digitize"><a href="#digitize" class="headerlink" title="digitize"></a>digitize</h3><p>Converts a number to an array of digits.</p><p>Convert the number to a string, using spread operators in ES6(<code>[...string]</code>) build an array.<br>Use <code>Array.map()</code> and <code>parseInt()</code> to transform each value to an integer.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> digitize = <span class="function"><span class="params">n</span> =&gt;</span> [...<span class="string">''</span> + n].map(<span class="function"><span class="params">i</span> =&gt;</span> <span class="built_in">parseInt</span>(i));</span><br><span class="line"><span class="comment">// digitize(2334) -&gt; [2, 3, 3, 4]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="distance"><a href="#distance" class="headerlink" title="distance"></a>distance</h3><p>Returns the distance between two points.</p><p>Use <code>Math.hypot()</code> to calculate the Euclidean distance between two points.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> distance = <span class="function">(<span class="params">x0, y0, x1, y1</span>) =&gt;</span> <span class="built_in">Math</span>.hypot(x1 - x0, y1 - y0);</span><br><span class="line"><span class="comment">// distance(1,1, 2,3) -&gt; 2.23606797749979</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="factorial"><a href="#factorial" class="headerlink" title="factorial"></a>factorial</h3><p>Calculates the factorial of a number.</p><p>Use recursion.<br>If <code>n</code> is less than or equal to <code>1</code>, return <code>1</code>.<br>Otherwise, return the product of <code>n</code> and the factorial of <code>n - 1</code>.<br>Throws an exception if <code>n</code> is a negative number.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> factorial = <span class="function"><span class="params">n</span> =&gt;</span></span><br><span class="line">  n &lt; <span class="number">0</span> ? <span class="function">(<span class="params">(</span>) =&gt;</span> &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'Negative numbers are not allowed!'</span>); &#125;)()</span><br><span class="line">  : n &lt;= <span class="number">1</span> ? <span class="number">1</span> : n * factorial(n - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// factorial(6) -&gt; 720</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="fibonacci"><a href="#fibonacci" class="headerlink" title="fibonacci"></a>fibonacci</h3><p>Generates an array, containing the Fibonacci sequence, up until the nth term.</p><p>Create an empty array of the specific length, initializing the first two values (<code>0</code> and <code>1</code>).<br>Use <code>Array.reduce()</code> to add values into the array, using the sum of the last two values, except for the first two.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fibonacci = <span class="function"><span class="params">n</span> =&gt;</span></span><br><span class="line">  <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: n&#125;).reduce(<span class="function">(<span class="params">acc, val, i</span>) =&gt;</span> acc.concat(i &gt; <span class="number">1</span> ? acc[i - <span class="number">1</span>] + acc[i - <span class="number">2</span>] : i), []);</span><br><span class="line"><span class="comment">// fibonacci(5) -&gt; [0,1,1,2,3]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="fibonacciCountUntilNum"><a href="#fibonacciCountUntilNum" class="headerlink" title="fibonacciCountUntilNum"></a>fibonacciCountUntilNum</h3><p>Returns the number of fibonnacci numbers up to <code>num</code>(<code>0</code> and <code>num</code> inclusive).</p><p>Use a mathematical formula to calculate the number of fibonacci numbers until <code>num</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fibonacciCountUntilNum = <span class="function"><span class="params">num</span> =&gt;</span></span><br><span class="line">  <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.log(num * <span class="built_in">Math</span>.sqrt(<span class="number">5</span>) + <span class="number">1</span> / <span class="number">2</span>) / <span class="built_in">Math</span>.log((<span class="built_in">Math</span>.sqrt(<span class="number">5</span>) + <span class="number">1</span>) / <span class="number">2</span>));</span><br><span class="line"><span class="comment">// fibonacciCountUntilNum(10) -&gt; 7</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="fibonacciUntilNum"><a href="#fibonacciUntilNum" class="headerlink" title="fibonacciUntilNum"></a>fibonacciUntilNum</h3><p>Generates an array, containing the Fibonacci sequence, up until the nth term.</p><p>Create an empty array of the specific length, initializing the first two values (<code>0</code> and <code>1</code>).<br>Use <code>Array.reduce()</code> to add values into the array, using the sum of the last two values, except for the first two.<br>Uses a mathematical formula to calculate the length of the array required.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fibonacciUntilNum = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> n = <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.log(num * <span class="built_in">Math</span>.sqrt(<span class="number">5</span>) + <span class="number">1</span> / <span class="number">2</span>) / <span class="built_in">Math</span>.log((<span class="built_in">Math</span>.sqrt(<span class="number">5</span>) + <span class="number">1</span>) / <span class="number">2</span>));</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(&#123; <span class="attr">length</span>: n&#125;).reduce(<span class="function">(<span class="params">acc, val, i</span>) =&gt;</span> acc.concat(i &gt; <span class="number">1</span> ? acc[i - <span class="number">1</span>] + acc[i - <span class="number">2</span>] : i), []);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// fibonacciUntilNum(15) -&gt; [0,1,1,2,3,5,8,13]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="gcd"><a href="#gcd" class="headerlink" title="gcd"></a>gcd</h3><p>Calculates the greatest common divisor between two numbers.</p><p>Use recursion.<br>Base case is when <code>y</code> equals <code>0</code>. In this case, return <code>x</code>.<br>Otherwise, return the GCD of <code>y</code> and the remainder of the division <code>x/y</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> gcd = <span class="function">(<span class="params">x, y</span>) =&gt;</span> !y ? x : gcd(y, x % y);</span><br><span class="line"><span class="comment">// gcd (8, 36) -&gt; 4</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="hammingDistance"><a href="#hammingDistance" class="headerlink" title="hammingDistance"></a>hammingDistance</h3><p>Calculates the Hamming distance between two values.</p><p>Use XOR operator (<code>^</code>) to find the bit difference between the two numbers, convert to a binary string using <code>toString(2)</code>.<br>Count and return the number of <code>1</code>s in the string, using <code>match(/1/g)</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hammingDistance = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span></span><br><span class="line">  ((num1 ^ num2).toString(<span class="number">2</span>).match(<span class="regexp">/1/g</span>) || <span class="string">''</span>).length;</span><br><span class="line"><span class="comment">// hammingDistance(2,3) -&gt; 1</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="inRange"><a href="#inRange" class="headerlink" title="inRange"></a>inRange</h3><p>Checks if the given number falls within the given range.</p><p>Use arithmetic comparison to check if the given number is in the specified range.<br>If the second parameter, <code>end</code>, is not specified, the range is considered to be from <code>0</code> to <code>start</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inRange = <span class="function">(<span class="params">n, start, end = <span class="literal">null</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (end &amp;&amp; start &gt; end) end = [start, start = end][<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">return</span> (end == <span class="literal">null</span>) ? (n &gt;= <span class="number">0</span> &amp;&amp; n &lt; start) : (n &gt;= start &amp;&amp; n &lt; end);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// inRange(3, 2, 5) -&gt; true</span></span><br><span class="line"><span class="comment">// inRange(3, 4) -&gt; true</span></span><br><span class="line"><span class="comment">// inRange(2, 3, 5) -&gt; false</span></span><br><span class="line"><span class="comment">// inrange(3, 2) -&gt; false</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="isArmstrongNumber"><a href="#isArmstrongNumber" class="headerlink" title="isArmstrongNumber"></a>isArmstrongNumber</h3><p>Checks if the given number is an Armstrong number or not.</p><p>Convert the given number into an array of digits. Use <code>Math.pow()</code> to get the appropriate power for each digit and sum them up. If the sum is equal to the number itself, return <code>true</code> otherwise <code>false</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isArmstrongNumber = <span class="function"><span class="params">digits</span> =&gt;</span></span><br><span class="line">  (<span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, d</span>) =&gt;</span> a + <span class="built_in">Math</span>.pow(<span class="built_in">parseInt</span>(d), arr.length), <span class="number">0</span>) == digits)((digits + <span class="string">''</span>).split(<span class="string">''</span>));</span><br><span class="line"><span class="comment">// isArmstrongNumber(1634) -&gt; true</span></span><br><span class="line"><span class="comment">// isArmstrongNumber(371) -&gt; true</span></span><br><span class="line"><span class="comment">// isArmstrongNumber(56) -&gt; false</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="isDivisible"><a href="#isDivisible" class="headerlink" title="isDivisible"></a>isDivisible</h3><p>Checks if the first numeric argument is divisible by the second one.</p><p>Use the modulo operator (<code>%</code>) to check if the remainder is equal to <code>0</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isDivisible = <span class="function">(<span class="params">dividend, divisor</span>) =&gt;</span> dividend % divisor === <span class="number">0</span>;</span><br><span class="line"><span class="comment">// isDivisible(6,3) -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="isEven"><a href="#isEven" class="headerlink" title="isEven"></a>isEven</h3><p>Returns <code>true</code> if the given number is even, <code>false</code> otherwise.</p><p>Checks whether a number is odd or even using the modulo (<code>%</code>) operator.<br>Returns <code>true</code> if the number is even, <code>false</code> if the number is odd.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isEven = <span class="function"><span class="params">num</span> =&gt;</span> num % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line"><span class="comment">// isEven(3) -&gt; false</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="isPrime"><a href="#isPrime" class="headerlink" title="isPrime"></a>isPrime</h3><p>Checks if the provided integer is a prime number.</p><p>Check numbers from <code>2</code> to the square root of the given number.<br>Return <code>false</code> if any of them divides the given number, else return <code>true</code>, unless the number is less than <code>2</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isPrime = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> boundary = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(num));</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i * i &lt;= boundary; i++) <span class="keyword">if</span> (num % i == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> num &gt;= <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// isPrime(11) -&gt; true</span></span><br><span class="line"><span class="comment">// isPrime(12) -&gt; false</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="lcm"><a href="#lcm" class="headerlink" title="lcm"></a>lcm</h3><p>Returns the least common multiple of two numbers.</p><p>Use the greatest common divisor (GCD) formula and <code>Math.abs()</code> to determine the least common multiple.<br>The GCD formula uses recursion.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> lcm = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> gcd = <span class="function">(<span class="params">x, y</span>) =&gt;</span> !y ? x : gcd(y, x % y);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.abs(x * y) / (gcd(x, y));</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// lcm(12,7) -&gt; 84</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="median"><a href="#median" class="headerlink" title="median"></a>median</h3><p>Returns the median of an array of numbers.</p><p>Find the middle of the array, use <code>Array.sort()</code> to sort the values.<br>Return the number at the midpoint if <code>length</code> is odd, otherwise the average of the two middle numbers.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> median = <span class="function"><span class="params">arr</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mid = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>), nums = [...arr].sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">  <span class="keyword">return</span> arr.length % <span class="number">2</span> !== <span class="number">0</span> ? nums[mid] : (nums[mid - <span class="number">1</span>] + nums[mid]) / <span class="number">2</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// median([5,6,50,1,-5]) -&gt; 5</span></span><br><span class="line"><span class="comment">// median([0,10,-2,7]) -&gt; 3.5</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="palindrome"><a href="#palindrome" class="headerlink" title="palindrome"></a>palindrome</h3><p>Returns <code>true</code> if the given string is a palindrome, <code>false</code> otherwise.</p><p>Convert string <code>toLowerCase()</code> and use <code>replace()</code> to remove non-alphanumeric characters from it.<br>Then, <code>split(&#39;&#39;)</code> into individual characters, <code>reverse()</code>, <code>join(&#39;&#39;)</code> and compare to the original, unreversed string, after converting it <code>tolowerCase()</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> palindrome = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> s = str.toLowerCase().replace(<span class="regexp">/[\W_]/g</span>,<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> s === s.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// palindrome('taco cat') -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="percentile"><a href="#percentile" class="headerlink" title="percentile"></a>percentile</h3><p>Uses the percentile formula to calculate how many numbers in the given array are less or equal to the given value.</p><p>Use <code>Array.reduce()</code> to calculate how many numbers are below the value and how many are the same value and apply the percentile formula.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> percentile = <span class="function">(<span class="params">arr, val</span>) =&gt;</span></span><br><span class="line">  <span class="number">100</span> * arr.reduce(<span class="function">(<span class="params">acc,v</span>) =&gt;</span> acc + (v &lt; val ? <span class="number">1</span> : <span class="number">0</span>) + (v === val ? <span class="number">0.5</span> : <span class="number">0</span>), <span class="number">0</span>) / arr.length;</span><br><span class="line"><span class="comment">// percentile([1,2,3,4,5,6,7,8,9,10], 6) -&gt; 55</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="powerset"><a href="#powerset" class="headerlink" title="powerset"></a>powerset</h3><p>Returns the powerset of a given array of numbers.</p><p>Use <code>Array.reduce()</code> combined with <code>Array.map()</code> to iterate over elements and combine into an array containing all combinations.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> powerset = <span class="function"><span class="params">arr</span> =&gt;</span></span><br><span class="line">  arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> a.concat(a.map(<span class="function"><span class="params">r</span> =&gt;</span> [v].concat(r))), [[]]);</span><br><span class="line"><span class="comment">// powerset([1,2]) -&gt; [[], [1], [2], [2,1]]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h3><p>Generates primes up to a given number, using the Sieve of Eratosthenes.</p><p>Generate an array from <code>2</code> to the given number. Use <code>Array.filter()</code> to filter out the values divisible by any number from <code>2</code> to the square root of the provided number.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> primes = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: num - <span class="number">1</span>&#125;).map(<span class="function">(<span class="params">x, i</span>) =&gt;</span> i + <span class="number">2</span>),</span><br><span class="line">    sqroot = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.sqrt(num)),</span><br><span class="line">    numsTillSqroot = <span class="built_in">Array</span>.from(&#123;<span class="attr">length</span>: sqroot - <span class="number">1</span>&#125;).map(<span class="function">(<span class="params">x, i</span>) =&gt;</span> i + <span class="number">2</span>);</span><br><span class="line">  numsTillSqroot.forEach(<span class="function"><span class="params">x</span> =&gt;</span> arr = arr.filter(<span class="function"><span class="params">y</span> =&gt;</span> ((y % x) !== <span class="number">0</span>) || (y == x)));</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// primes(10) -&gt; [2,3,5,7]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="randomIntegerInRange"><a href="#randomIntegerInRange" class="headerlink" title="randomIntegerInRange"></a>randomIntegerInRange</h3><p>Returns a random integer in the specified range.</p><p>Use <code>Math.random()</code> to generate a random number and map it to the desired range, using <code>Math.floor()</code> to make it an integer.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomIntegerInRange = <span class="function">(<span class="params">min, max</span>) =&gt;</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * (max - min + <span class="number">1</span>)) + min;</span><br><span class="line"><span class="comment">// randomIntegerInRange(0, 5) -&gt; 2</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="randomNumberInRange"><a href="#randomNumberInRange" class="headerlink" title="randomNumberInRange"></a>randomNumberInRange</h3><p>Returns a random number in the specified range.</p><p>Use <code>Math.random()</code> to generate a random value, map it to the desired range using multiplication.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomNumberInRange = <span class="function">(<span class="params">min, max</span>) =&gt;</span> <span class="built_in">Math</span>.random() * (max - min) + min;</span><br><span class="line"><span class="comment">// randomNumberInRange(2,10) -&gt; 6.0211363285087005</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3><p>Rounds a number to a specified amount of digits.</p><p>Use <code>Math.round()</code> and template literals to round the number to the specified number of digits.<br>Omit the second argument, <code>decimals</code> to round to an integer.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> round = <span class="function">(<span class="params">n, decimals = <span class="number">0</span></span>) =&gt;</span> <span class="built_in">Number</span>(<span class="string">`<span class="subst">$&#123;<span class="built_in">Math</span>.round(<span class="string">`<span class="subst">$&#123;n&#125;</span>e<span class="subst">$&#123;decimals&#125;</span>`</span>)&#125;</span>e-<span class="subst">$&#123;decimals&#125;</span>`</span>);</span><br><span class="line"><span class="comment">// round(1.005, 2) -&gt; 1.01</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="sdbmHashAlgorithm"><a href="#sdbmHashAlgorithm" class="headerlink" title="sdbmHashAlgorithm"></a>sdbmHashAlgorithm</h3><p>This algorithm is a simple hash-algorithm that hashes it input string <code>s</code> into a whole number.</p><p>Use <code>split(&#39;&#39;)</code> and <code>Array.reduce()</code> to create a hash of the input string, utilizing bit shifting.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sdbm = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = str.split(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> arr.reduce(<span class="function">(<span class="params">hashCode, currentVal</span>) =&gt;</span></span><br><span class="line">    hashCode = currentVal.charCodeAt(<span class="number">0</span>) + (hashCode &lt;&lt; <span class="number">6</span>) + (hashCode &lt;&lt; <span class="number">16</span>)  - hashCode</span><br><span class="line">  ,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// console.log(sdbm("name")) // -3521204949</span></span><br><span class="line"><span class="comment">// console.log(sdbm("age")) // 808122783</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="standardDeviation"><a href="#standardDeviation" class="headerlink" title="standardDeviation"></a>standardDeviation</h3><p>Returns the standard deviation of an array of numbers.</p><p>Use <code>Array.reduce()</code> to calculate the mean, variance and the sum of the variance of the values, the variance of the values, then<br>determine the standard deviation.<br>You can omit the second argument to get the sample standard deviation or set it to <code>true</code> to get the population standard deviation.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> standardDeviation = <span class="function">(<span class="params">arr, usePopulation = <span class="literal">false</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> mean = arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>) / arr.length;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.sqrt(</span><br><span class="line">    arr.reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc.concat(<span class="built_in">Math</span>.pow(val - mean, <span class="number">2</span>)), [])</span><br><span class="line">       .reduce(<span class="function">(<span class="params">acc, val</span>) =&gt;</span> acc + val, <span class="number">0</span>) / (arr.length - (usePopulation ? <span class="number">0</span> : <span class="number">1</span>))</span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// standardDeviation([10,2,38,23,38,23,21]) -&gt; 13.284434142114991 (sample)</span></span><br><span class="line"><span class="comment">// standardDeviation([10,2,38,23,38,23,21], true) -&gt; 12.29899614287479 (population)</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h2 id="Media-1"><a href="#Media-1" class="headerlink" title="Media"></a>Media</h2><h3 id="speechSynthesis"><a href="#speechSynthesis" class="headerlink" title="speechSynthesis"></a>speechSynthesis</h3><p>Performs speech synthesis (experimental).</p><p>Use <code>SpeechSynthesisUtterance.voice</code> and <code>window.speechSynthesis.getVoices()</code> to convert a message to speech.<br>Use <code>window.speechSynthesis.speak()</code> to play the message.</p><p>Learn more about the <a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance" target="_blank" rel="noopener">SpeechSynthesisUtterance interface of the Web Speech API</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> speechSynthesis = <span class="function"><span class="params">message</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="keyword">new</span> SpeechSynthesisUtterance(message);</span><br><span class="line">  msg.voice = <span class="built_in">window</span>.speechSynthesis.getVoices()[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">window</span>.speechSynthesis.speak(msg);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// speechSynthesis('Hello, World') -&gt; plays the message</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h2 id="Node-1"><a href="#Node-1" class="headerlink" title="Node"></a>Node</h2><h3 id="JSONToFile"><a href="#JSONToFile" class="headerlink" title="JSONToFile"></a>JSONToFile</h3><p>Writes a JSON object to a file.</p><p>Use <code>fs.writeFile()</code>, template literals and <code>JSON.stringify()</code> to write a <code>json</code> object to a <code>.json</code> file.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> JSONToFile = <span class="function">(<span class="params">obj, filename</span>) =&gt;</span> fs.writeFile(<span class="string">`<span class="subst">$&#123;filename&#125;</span>.json`</span>, <span class="built_in">JSON</span>.stringify(obj, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// JSONToFile(&#123;test: "is passed"&#125;, 'testJsonFile') -&gt; writes the object to 'testJsonFile.json'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="readFileLines"><a href="#readFileLines" class="headerlink" title="readFileLines"></a>readFileLines</h3><p>Returns an array of lines from the specified file.</p><p>Use <code>readFileSync</code> function in <code>fs</code> node package to create a <code>Buffer</code> from a file.<br>convert buffer to string using <code>toString(encoding)</code> function.<br>creating an array from contents of file by <code>split</code>ing file content line by line (each <code>\n</code>).</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> readFileLines = <span class="function"><span class="params">filename</span> =&gt;</span> fs.readFileSync(filename).toString(<span class="string">'UTF8'</span>).split(<span class="regexp">/\r?\n/</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  contents of test.txt :</span></span><br><span class="line"><span class="comment">    line1</span></span><br><span class="line"><span class="comment">    line2</span></span><br><span class="line"><span class="comment">    line3</span></span><br><span class="line"><span class="comment">    ___________________________</span></span><br><span class="line"><span class="comment">  let arr = readFileLines('test.txt')</span></span><br><span class="line"><span class="comment">  console.log(arr) // -&gt; ['line1', 'line2', 'line3']</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h2 id="Object-1"><a href="#Object-1" class="headerlink" title="Object"></a>Object</h2><h3 id="cleanObj"><a href="#cleanObj" class="headerlink" title="cleanObj"></a>cleanObj</h3><p>Removes any properties except the ones specified from a JSON object.</p><p>Use <code>Object.keys()</code> method to loop over given JSON object and deleting keys that are not <code>include</code>d in given array.<br>Also if you give it a special key (<code>childIndicator</code>) it will search deeply inside it to apply function to inner objects too.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cleanObj = <span class="function">(<span class="params">obj, keysToKeep = [], childIndicator</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (key === childIndicator) &#123;</span><br><span class="line">      cleanObj(obj[key], keysToKeep, childIndicator);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!keysToKeep.includes(key)) &#123;</span><br><span class="line">      <span class="keyword">delete</span> obj[key];</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  const testObj = &#123;a: 1, b: 2, children: &#123;a: 1, b: 2&#125;&#125;</span></span><br><span class="line"><span class="comment">  cleanObj(testObj, ["a"],"children") // &#123; a: 1, children : &#123; a: 1&#125;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="objectFromPairs"><a href="#objectFromPairs" class="headerlink" title="objectFromPairs"></a>objectFromPairs</h3><p>Creates an object from the given key-value pairs.</p><p>Use <code>Array.reduce()</code> to create and combine key-value pairs.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectFromPairs = <span class="function"><span class="params">arr</span> =&gt;</span> arr.reduce(<span class="function">(<span class="params">a, v</span>) =&gt;</span> (a[v[<span class="number">0</span>]] = v[<span class="number">1</span>], a), &#123;&#125;);</span><br><span class="line"><span class="comment">// objectFromPairs([['a',1],['b',2]]) -&gt; &#123;a: 1, b: 2&#125;</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="objectToPairs"><a href="#objectToPairs" class="headerlink" title="objectToPairs"></a>objectToPairs</h3><p>Creates an array of key-value pair arrays from an object.</p><p>Use <code>Object.keys()</code> and <code>Array.map()</code> to iterate over the object’s keys and produce an array with key-value pairs.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objectToPairs = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.keys(obj).map(<span class="function"><span class="params">k</span> =&gt;</span> [k, obj[k]]);</span><br><span class="line"><span class="comment">// objectToPairs(&#123;a: 1, b: 2&#125;) -&gt; [['a',1],['b',2]])</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="orderBy"><a href="#orderBy" class="headerlink" title="orderBy"></a>orderBy</h3><p>Returns a sorted array of objects ordered by properties and orders.</p><p>Uses a custom implementation of sort, that reduces the props array argument with a default value of 0, it uses destructuring to swap the properties position depending on the order passed.<br>If no orders array is passed it sort by ‘asc’ by default.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> orderBy = <span class="function">(<span class="params">arr, props, orders</span>) =&gt;</span></span><br><span class="line">  arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span></span><br><span class="line">    props.reduce(<span class="function">(<span class="params">acc, prop, i</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (acc === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> [p1, p2] = orders &amp;&amp; orders[i] === <span class="string">'desc'</span> ? [b[prop], a[prop]] : [a[prop], b[prop]];</span><br><span class="line">        acc = p1 &gt; p2 ? <span class="number">1</span> : p1 &lt; p2 ? <span class="number">-1</span> : <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">  );</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const users = [&#123; 'name': 'fred',   'age': 48 &#125;,&#123; 'name': 'barney', 'age': 36 &#125;,</span></span><br><span class="line"><span class="comment">  &#123; 'name': 'fred',   'age': 40 &#125;,&#123; 'name': 'barney', 'age': 34 &#125;];</span></span><br><span class="line"><span class="comment">orderby(users, ['name', 'age'], ['asc', 'desc']) -&gt; [&#123;name: 'barney', age: 36&#125;, &#123;name: 'barney', age: 34&#125;, &#123;name: 'fred', age: 48&#125;, &#123;name: 'fred', age: 40&#125;]</span></span><br><span class="line"><span class="comment">orderby(users, ['name', 'age']) -&gt; [&#123;name: 'barney', age: 34&#125;, &#123;name: 'barney', age: 36&#125;, &#123;name: 'fred', age: 40&#125;, &#123;name: 'fred', age: 48&#125;]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>Retrieve a property that indicated by the selector from an object.</p><p>If the property does not exists returns <code>undefined</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> select = <span class="function">(<span class="params"><span class="keyword">from</span>, selector</span>) =&gt;</span></span><br><span class="line">  selector.split(<span class="string">'.'</span>).reduce(<span class="function">(<span class="params">prev, cur</span>) =&gt;</span> prev &amp;&amp; prev[cur], <span class="keyword">from</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// const obj = &#123;selector: &#123;to: &#123;val: 'val to select'&#125;&#125;&#125;;</span></span><br><span class="line"><span class="comment">// select(obj, 'selector.to.val'); -&gt; 'val to select'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="shallowClone"><a href="#shallowClone" class="headerlink" title="shallowClone"></a>shallowClone</h3><p>Creates a shallow clone of an object.</p><p>Use <code>Object.assign()</code> and an empty object (<code>{}</code>) to create a shallow clone of the original.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowClone = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="built_in">Object</span>.assign(&#123;&#125;, obj);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">const a = &#123; x: true, y: 1 &#125;;</span></span><br><span class="line"><span class="comment">const b = shallowClone(a);</span></span><br><span class="line"><span class="comment">a === b -&gt; false</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="truthCheckCollection"><a href="#truthCheckCollection" class="headerlink" title="truthCheckCollection"></a>truthCheckCollection</h3><p>Checks if the predicate (second argument) is truthy on all elements of a collection (first argument).</p><p>Use <code>Array.every()</code> to check if each passed object has the specified property and if it returns a truthy value.</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> truthCheckCollection = <span class="function">(<span class="params">collection, pre</span>) =&gt;</span> (collection.every(<span class="function"><span class="params">obj</span> =&gt;</span> obj[pre]));</span><br><span class="line"><span class="comment">// truthCheckCollection([&#123;"user": "Tinky-Winky", "sex": "male"&#125;, &#123;"user": "Dipsy", "sex": "male"&#125;], "sex") -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h2 id="String-1"><a href="#String-1" class="headerlink" title="String"></a>String</h2><h3 id="anagrams"><a href="#anagrams" class="headerlink" title="anagrams"></a>anagrams</h3><p>Generates all anagrams of a string (contains duplicates).</p><p>Use recursion.<br>For each letter in the given string, create all the partial anagrams for the rest of its letters.<br>Use <code>Array.map()</code> to combine the letter with each partial anagram, then <code>Array.reduce()</code> to combine all anagrams in one array.<br>Base cases are for string <code>length</code> equal to <code>2</code> or <code>1</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> anagrams = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (str.length &lt;= <span class="number">2</span>) <span class="keyword">return</span> str.length === <span class="number">2</span> ? [str, str[<span class="number">1</span>] + str[<span class="number">0</span>]] : [str];</span><br><span class="line">  <span class="keyword">return</span> str.split(<span class="string">''</span>).reduce(<span class="function">(<span class="params">acc, letter, i</span>) =&gt;</span></span><br><span class="line">    acc.concat(anagrams(str.slice(<span class="number">0</span>, i) + str.slice(i + <span class="number">1</span>)).map(<span class="function"><span class="params">val</span> =&gt;</span> letter + val)), []);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// anagrams('abc') -&gt; ['abc','acb','bac','bca','cab','cba']</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="Capitalize"><a href="#Capitalize" class="headerlink" title="Capitalize"></a>Capitalize</h3><p>Capitalizes the first letter of a string.</p><p>Use destructuring and <code>toUpperCase()</code> to capitalize first letter, <code>...rest</code> to get array of characters after first letter and then <code>Array.join(&#39;&#39;)</code> to make it a string again.<br>Omit the <code>lowerRest</code> parameter to keep the rest of the string intact, or set it to <code>true</code> to convert to lowercase.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> capitalize = <span class="function">(<span class="params">[first, ...rest], lowerRest = <span class="literal">false</span></span>) =&gt;</span></span><br><span class="line">  first.toUpperCase() + (lowerRest ? rest.join(<span class="string">''</span>).toLowerCase() : rest.join(<span class="string">''</span>));</span><br><span class="line"><span class="comment">// capitalize('myName') -&gt; 'MyName'</span></span><br><span class="line"><span class="comment">// capitalize('myName', true) -&gt; 'Myname'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="capitalizeEveryWord"><a href="#capitalizeEveryWord" class="headerlink" title="capitalizeEveryWord"></a>capitalizeEveryWord</h3><p>Capitalizes the first letter of every word in a string.</p><p>Use <code>replace()</code> to match the first character of each word and <code>toUpperCase()</code> to capitalize it.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> capitalizeEveryWord = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/\b[a-z]/g</span>, char =&gt; char.toUpperCase());</span><br><span class="line"><span class="comment">// capitalizeEveryWord('hello world!') -&gt; 'Hello World!'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="countVowels"><a href="#countVowels" class="headerlink" title="countVowels"></a>countVowels</h3><p>Retuns <code>number</code> of vowels in provided string.</p><p>Use a regular expression to count the number of vowels <code>(A, E, I, O, U)</code> in a <code>string</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countVowels = <span class="function"><span class="params">str</span> =&gt;</span> (str.match(<span class="regexp">/[aeiou]/ig</span>) || []).length;</span><br><span class="line"><span class="comment">// countVowels('foobar') -&gt; 3</span></span><br><span class="line"><span class="comment">// countVowels('gym') -&gt; 0</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="escapeRegExp"><a href="#escapeRegExp" class="headerlink" title="escapeRegExp"></a>escapeRegExp</h3><p>Escapes a string to use in a regular expression.</p><p>Use <code>replace()</code> to escape special characters.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> escapeRegExp = <span class="function"><span class="params">str</span> =&gt;</span> str.replace(<span class="regexp">/[.*+?^$&#123;&#125;()|[\]\\]/g</span>, <span class="string">'\\$&amp;'</span>);</span><br><span class="line"><span class="comment">// escapeRegExp('(test)') -&gt; \\(test\\)</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="fromCamelCase"><a href="#fromCamelCase" class="headerlink" title="fromCamelCase"></a>fromCamelCase</h3><p>Converts a string from camelcase.</p><p>Use <code>replace()</code> to remove underscores, hyphens, and spaces and convert words to camelcase.<br>Omit the second argument to use a default separator of <code>_</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fromCamelCase = <span class="function">(<span class="params">str, separator = <span class="string">'_'</span></span>) =&gt;</span></span><br><span class="line">  str.replace(<span class="regexp">/([a-z\d])([A-Z])/g</span>, <span class="string">'$1'</span> + separator + <span class="string">'$2'</span>)</span><br><span class="line">    .replace(<span class="regexp">/([A-Z]+)([A-Z][a-z\d]+)/g</span>, <span class="string">'$1'</span> + separator + <span class="string">'$2'</span>).toLowerCase();</span><br><span class="line"><span class="comment">// fromCamelCase('someDatabaseFieldName', ' ') -&gt; 'some database field name'</span></span><br><span class="line"><span class="comment">// fromCamelCase('someLabelThatNeedsToBeCamelized', '-') -&gt; 'some-label-that-needs-to-be-camelized'</span></span><br><span class="line"><span class="comment">// fromCamelCase('someJavascriptProperty', '_') -&gt; 'some_javascript_property'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="repeatString"><a href="#repeatString" class="headerlink" title="repeatString"></a>repeatString</h3><p>Repeats a string n times using <code>String.repeat()</code></p><p>If no string is provided the default is <code>&quot;&quot;</code> and the default number of times is 2.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> repeatString = <span class="function">(<span class="params">str = <span class="string">''</span>, num = <span class="number">2</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> num &gt;= <span class="number">0</span> ? str.repeat(num) : str;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// repeatString("abc",3) -&gt; 'abcabcabc'</span></span><br><span class="line"><span class="comment">// repeatString("abc") -&gt; 'abcabc'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="reverseString"><a href="#reverseString" class="headerlink" title="reverseString"></a>reverseString</h3><p>Reverses a string.</p><p>Use <code>split(&#39;&#39;)</code> and <code>Array.reverse()</code> to reverse the order of the characters in the string.<br>Combine characters to get a string using <code>join(&#39;&#39;)</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reverseString = <span class="function"><span class="params">str</span> =&gt;</span> str.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">// reverseString('foobar') -&gt; 'raboof'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="sortCharactersInString"><a href="#sortCharactersInString" class="headerlink" title="sortCharactersInString"></a>sortCharactersInString</h3><p>Alphabetically sorts the characters in a string.</p><p>Split the string using <code>split(&#39;&#39;)</code>, <code>Array.sort()</code> utilizing <code>localeCompare()</code>, recombine using <code>join(&#39;&#39;)</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> sortCharactersInString = <span class="function"><span class="params">str</span> =&gt;</span></span><br><span class="line">  str.split(<span class="string">''</span>).sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a.localeCompare(b)).join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">// sortCharactersInString('cabbage') -&gt; 'aabbceg'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="toCamelCase"><a href="#toCamelCase" class="headerlink" title="toCamelCase"></a>toCamelCase</h3><p>Converts a string to camelcase.</p><p>Break the string into words and combine them capitalizing the first letter of each word.<br>For more detailed explanation of this Regex, <a href="https://regex101.com/r/bMCgAB/1" target="_blank" rel="noopener">visit this Site</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toCamelCase = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> s = str &amp;&amp; str.match(<span class="regexp">/[A-Z]&#123;2,&#125;(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">x</span> =&gt;</span> x.slice(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + x.slice(<span class="number">1</span>).toLowerCase())</span><br><span class="line">    .join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">return</span> s.slice(<span class="number">0</span>, <span class="number">1</span>).toLowerCase() + s.slice(<span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// toCamelCase("some_database_field_name") -&gt; 'someDatabaseFieldName'</span></span><br><span class="line"><span class="comment">// toCamelCase("Some label that needs to be camelized") -&gt; 'someLabelThatNeedsToBeCamelized'</span></span><br><span class="line"><span class="comment">// toCamelCase("some-javascript-property") -&gt; 'someJavascriptProperty'</span></span><br><span class="line"><span class="comment">// toCamelCase("some-mixed_string with spaces_underscores-and-hyphens") -&gt; 'someMixedStringWithSpacesUnderscoresAndHyphens'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="toKebabCase"><a href="#toKebabCase" class="headerlink" title="toKebabCase"></a>toKebabCase</h3><p>Converts a string to kebab case.</p><p>Break the string into words and combine them using <code>-</code> as a separator.<br>For more detailed explanation of this Regex, <a href="https://regex101.com/r/bMCgAB/1" target="_blank" rel="noopener">visit this Site</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toKebabCase = <span class="function"><span class="params">str</span> =&gt;</span></span><br><span class="line">  str &amp;&amp; str.match(<span class="regexp">/[A-Z]&#123;2,&#125;(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">x</span> =&gt;</span> x.toLowerCase())</span><br><span class="line">    .join(<span class="string">'-'</span>);</span><br><span class="line"><span class="comment">// toKebabCase("camelCase") -&gt; 'camel-case'</span></span><br><span class="line"><span class="comment">// toKebabCase("some text") -&gt; 'some-text'</span></span><br><span class="line"><span class="comment">// toKebabCase("some-mixed_string With spaces_underscores-and-hyphens") -&gt; 'some-mixed-string-with-spaces-underscores-and-hyphens'</span></span><br><span class="line"><span class="comment">// toKebabCase("AllThe-small Things") -&gt; "all-the-small-things"</span></span><br><span class="line"><span class="comment">// toKebabCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML') -&gt; "i-am-listening-to-fm-while-loading-different-url-on-my-browser-and-also-editing-xml-and-html"</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="toSnakeCase"><a href="#toSnakeCase" class="headerlink" title="toSnakeCase"></a>toSnakeCase</h3><p>Converts a string to snake case.</p><p>Break the string into words and combine them using <code>_</code> as a separator.<br>For more detailed explanation of this Regex, <a href="https://regex101.com/r/bMCgAB/1" target="_blank" rel="noopener">visit this Site</a>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toSnakeCase = <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">  str &amp;&amp; str.match(<span class="regexp">/[A-Z]&#123;2,&#125;(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g</span>)</span><br><span class="line">    .map(<span class="function"><span class="params">x</span> =&gt;</span> x.toLowerCase())</span><br><span class="line">    .join(<span class="string">'_'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// toSnakeCase("camelCase") -&gt; 'camel_case'</span></span><br><span class="line"><span class="comment">// toSnakeCase("some text") -&gt; 'some_text'</span></span><br><span class="line"><span class="comment">// toSnakeCase("some-javascript-property") -&gt; 'some_javascript_property'</span></span><br><span class="line"><span class="comment">// toSnakeCase("some-mixed_string With spaces_underscores-and-hyphens") -&gt; 'some_mixed_string_with_spaces_underscores_and_hyphens'</span></span><br><span class="line"><span class="comment">// toSnakeCase("AllThe-small Things") -&gt; "all_the_small_things"</span></span><br><span class="line"><span class="comment">// toSnakeCase('IAmListeningToFMWhileLoadingDifferentURLOnMyBrowserAndAlsoEditingSomeXMLAndHTML') -&gt; "i_am_listening_to_fm_while_loading_different_url_on_my_browser_and_also_editing_some_xml_and_html"</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="truncateString"><a href="#truncateString" class="headerlink" title="truncateString"></a>truncateString</h3><p>Truncates a string up to a specified length.</p><p>Determine if the string’s <code>length</code> is greater than <code>num</code>.<br>Return the string truncated to the desired length, with <code>...</code> appended to the end or the original string.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> truncateString = <span class="function">(<span class="params">str, num</span>) =&gt;</span></span><br><span class="line">  str.length &gt; num ? str.slice(<span class="number">0</span>, num &gt; <span class="number">3</span> ? num - <span class="number">3</span> : num) + <span class="string">'...'</span> : str;</span><br><span class="line"><span class="comment">// truncateString('boomerang', 7) -&gt; 'boom...'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="words"><a href="#words" class="headerlink" title="words"></a>words</h3><p>Converts a given string into an array of words.</p><p>Use <code>String.split()</code> with a supplied pattern (defaults to non-alpha as a regex) to convert to an array of strings. Use <code>Array.filter()</code> to remove any empty strings.<br>Omit the second argument to use the default regex.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> words = <span class="function">(<span class="params">str, pattern = <span class="regexp">/[^a-zA-Z-]+/</span></span>) =&gt;</span> str.split(pattern).filter(<span class="built_in">Boolean</span>);</span><br><span class="line"><span class="comment">// words("I love javaScript!!") -&gt; ["I", "love", "javaScript"]</span></span><br><span class="line"><span class="comment">// words("python, javaScript &amp; coffee") -&gt; ["python", "javaScript", "coffee"]</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h2 id="Utility-1"><a href="#Utility-1" class="headerlink" title="Utility"></a>Utility</h2><h3 id="coalesce"><a href="#coalesce" class="headerlink" title="coalesce"></a>coalesce</h3><p>Returns the first non-null/undefined argument.</p><p>Use <code>Array.find()</code> to return the first non <code>null</code>/<code>undefined</code> argument.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> coalesce = <span class="function">(<span class="params">...args</span>) =&gt;</span> args.find(<span class="function"><span class="params">_</span> =&gt;</span> ![<span class="literal">undefined</span>, <span class="literal">null</span>].includes(_));</span><br><span class="line"><span class="comment">// coalesce(null,undefined,"",NaN, "Waldo") -&gt; ""</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="coalesceFactory"><a href="#coalesceFactory" class="headerlink" title="coalesceFactory"></a>coalesceFactory</h3><p>Returns a customized coalesce function that returns the first argument that returns <code>true</code> from the provided argument validation function.</p><p>Use <code>Array.find()</code> to return the first argument that returns <code>true</code> from the provided argument validation function.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> coalesceFactory = <span class="function"><span class="params">valid</span> =&gt;</span> (...args) =&gt; args.find(valid);</span><br><span class="line"><span class="comment">// const customCoalesce = coalesceFactory(_ =&gt; ![null, undefined, "", NaN].includes(_))</span></span><br><span class="line"><span class="comment">// customCoalesce(undefined, null, NaN, "", "Waldo") //-&gt; "Waldo"</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="extendHex"><a href="#extendHex" class="headerlink" title="extendHex"></a>extendHex</h3><p>Extends a 3-digit color code to a 6-digit color code.</p><p>Use <code>Array.map()</code>, <code>split()</code> and <code>Array.join()</code> to join the mapped array for converting a 3-digit RGB notated hexadecimal color-code to the 6-digit form.<br><code>String.slice()</code> is used to remove <code>#</code> from string start since it’s added once.<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> extendHex = <span class="function"><span class="params">shortHex</span> =&gt;</span></span><br><span class="line">  <span class="string">'#'</span> + shortHex.slice(shortHex.startsWith(<span class="string">'#'</span>) ? <span class="number">1</span> : <span class="number">0</span>).split(<span class="string">''</span>).map(<span class="function"><span class="params">x</span> =&gt;</span> x + x).join(<span class="string">''</span>);</span><br><span class="line"><span class="comment">// extendHex('#03f') -&gt; '#0033ff'</span></span><br><span class="line"><span class="comment">// extendHex('05a') -&gt; '#0055aa'</span></span><br></pre></td></tr></table></figure></p><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="getType"><a href="#getType" class="headerlink" title="getType"></a>getType</h3><p>Returns the native type of a value.</p><p>Returns lowercased constructor name of value, “undefined” or “null” if value is undefined or null</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> getType = <span class="function"><span class="params">v</span> =&gt;</span></span><br><span class="line">  v === <span class="literal">undefined</span> ? <span class="string">'undefined'</span> : v === <span class="literal">null</span> ? <span class="string">'null'</span> : v.constructor.name.toLowerCase();</span><br><span class="line"><span class="comment">// getType(new Set([1,2,3])) -&gt; "set"</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="hexToRGB"><a href="#hexToRGB" class="headerlink" title="hexToRGB"></a>hexToRGB</h3><p>Converts a color code to a <code>rgb()</code> or <code>rgba()</code> string if alpha value is provided.</p><p>Use bitwise right-shift operator and mask bits with <code>&amp;</code> (and) operator to convert a hexadecimal color code (with or without prefixed with <code>#</code>) to a string with the RGB values. If it’s 3-digit color code, first convert to 6-digit version. If an alpha value is provided alongside 6-digit hex, give <code>rgba()</code> string in return.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hexToRGB = <span class="function"><span class="params">hex</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> alpha = <span class="literal">false</span>, h = hex.slice(hex.startsWith(<span class="string">'#'</span>) ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (h.length === <span class="number">3</span>) h = [...h].map(<span class="function"><span class="params">x</span> =&gt;</span> x + x).join(<span class="string">''</span>);</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (h.length === <span class="number">8</span>) alpha = <span class="literal">true</span>;</span><br><span class="line">  h = <span class="built_in">parseInt</span>(h, <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'rgb'</span> + (alpha ? <span class="string">'a'</span> : <span class="string">''</span>) + <span class="string">'('</span> +</span><br><span class="line">    (h &gt;&gt;&gt; (alpha ? <span class="number">24</span> : <span class="number">16</span>)) + <span class="string">', '</span> +</span><br><span class="line">    ((h &amp; (alpha ? <span class="number">0x00ff0000</span> : <span class="number">0x00ff00</span>)) &gt;&gt;&gt; (alpha ? <span class="number">16</span> : <span class="number">8</span>)) + <span class="string">', '</span> +</span><br><span class="line">    ((h &amp; (alpha ? <span class="number">0x0000ff00</span> : <span class="number">0x0000ff</span>)) &gt;&gt;&gt; (alpha ? <span class="number">8</span> : <span class="number">0</span>)) +</span><br><span class="line">    (alpha ? <span class="string">`, <span class="subst">$&#123;(h &amp; <span class="number">0x000000ff</span>)&#125;</span>`</span> : <span class="string">''</span>) + <span class="string">')'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// hexToRGB('#27ae60ff') -&gt; 'rgba(39, 174, 96, 255)'</span></span><br><span class="line"><span class="comment">// hexToRGB('27ae60') -&gt; 'rgb(39, 174, 96)'</span></span><br><span class="line"><span class="comment">// hexToRGB('#fff') -&gt; 'rgb(255, 255, 255)'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="isArray"><a href="#isArray" class="headerlink" title="isArray"></a>isArray</h3><p>Checks if the given argument is an array.</p><p>Use <code>Array.isArray()</code> to check if a value is classified as an array.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isArray = <span class="function"><span class="params">val</span> =&gt;</span> !!val &amp;&amp; <span class="built_in">Array</span>.isArray(val);</span><br><span class="line"><span class="comment">// isArray(null) -&gt; false</span></span><br><span class="line"><span class="comment">// isArray([1]) -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="isBoolean"><a href="#isBoolean" class="headerlink" title="isBoolean"></a>isBoolean</h3><p>Checks if the given argument is a native boolean element.</p><p>Use <code>typeof</code> to check if a value is classified as a boolean primitive.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isBoolean = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">'boolean'</span>;</span><br><span class="line"><span class="comment">// isBoolean(null) -&gt; false</span></span><br><span class="line"><span class="comment">// isBoolean(false) -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="isFunction"><a href="#isFunction" class="headerlink" title="isFunction"></a>isFunction</h3><p>Checks if the given argument is a function.</p><p>Use <code>typeof</code> to check if a value is classified as a function primitive.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isFunction = <span class="function"><span class="params">val</span> =&gt;</span> val &amp;&amp; <span class="keyword">typeof</span> val === <span class="string">'function'</span>;</span><br><span class="line"><span class="comment">// isFunction('x') -&gt; false</span></span><br><span class="line"><span class="comment">// isFunction(x =&gt; x) -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="isNumber"><a href="#isNumber" class="headerlink" title="isNumber"></a>isNumber</h3><p>Checks if the given argument is a number.</p><p>Use <code>typeof</code> to check if a value is classified as a number primitive.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isNumber = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">'number'</span>;</span><br><span class="line"><span class="comment">// isNumber('1') -&gt; false</span></span><br><span class="line"><span class="comment">// isNumber(1) -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="isString"><a href="#isString" class="headerlink" title="isString"></a>isString</h3><p>Checks if the given argument is a string.</p><p>Use <code>typeof</code> to check if a value is classified as a string primitive.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isString = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">'string'</span>;</span><br><span class="line"><span class="comment">// isString(10) -&gt; false</span></span><br><span class="line"><span class="comment">// isString('10') -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="isSymbol"><a href="#isSymbol" class="headerlink" title="isSymbol"></a>isSymbol</h3><p>Checks if the given argument is a symbol.</p><p>Use <code>typeof</code> to check if a value is classified as a symbol primitive.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> isSymbol = <span class="function"><span class="params">val</span> =&gt;</span> <span class="keyword">typeof</span> val === <span class="string">'symbol'</span>;</span><br><span class="line"><span class="comment">// isSymbol('x') -&gt; false</span></span><br><span class="line"><span class="comment">// isSymbol(Symbol('x')) -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="randomHexColor"><a href="#randomHexColor" class="headerlink" title="randomHexColor"></a>randomHexColor</h3><p>Generates a random hexadecimal color code.</p><p>Use <code>Math.random</code> to generate a random 24-bit(6x4bits) hexadecimal number. Use bit shifting and then convert it to an hexadecimal String using <code>toString(16)</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> randomHexColor = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> n = (<span class="built_in">Math</span>.random() * <span class="number">0xfffff</span> | <span class="number">0</span>).toString(<span class="number">16</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'#'</span> + (n.length !== <span class="number">6</span></span><br><span class="line">        ? (<span class="built_in">Math</span>.random() * <span class="number">0xf</span> | <span class="number">0</span>).toString(<span class="number">16</span>) + n : n);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// randomHexColorCode() -&gt; "#e34155"</span></span><br><span class="line"><span class="comment">// randomHexColorCode() -&gt; "#fd73a6"</span></span><br><span class="line"><span class="comment">// randomHexColorCode() -&gt; "#4144c6"</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="RGBToHex"><a href="#RGBToHex" class="headerlink" title="RGBToHex"></a>RGBToHex</h3><p>Converts the values of RGB components to a color code.</p><p>Convert given RGB parameters to hexadecimal string using bitwise left-shift operator (<code>&lt;&lt;</code>) and <code>toString(16)</code>, then <code>padStart(6,&#39;0&#39;)</code> to get a 6-digit hexadecimal value.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RGBToHex = <span class="function">(<span class="params">r, g, b</span>) =&gt;</span> ((r &lt;&lt; <span class="number">16</span>) + (g &lt;&lt; <span class="number">8</span>) + b).toString(<span class="number">16</span>).padStart(<span class="number">6</span>, <span class="string">'0'</span>);</span><br><span class="line"><span class="comment">// RGBToHex(255, 165, 1) -&gt; 'ffa501'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="timeTaken"><a href="#timeTaken" class="headerlink" title="timeTaken"></a>timeTaken</h3><p>Measures the time taken by a function to execute.</p><p>Use <code>console.time()</code> and <code>console.timeEnd()</code> to measure the difference between the start and end times to determine how long the callback took to execute.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timeTaken = <span class="function"><span class="params">callback</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">'timeTaken'</span>); <span class="keyword">const</span> r = callback();</span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">'timeTaken'</span>); <span class="keyword">return</span> r;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// timeTaken(() =&gt; Math.pow(2, 10)) -&gt; 1024</span></span><br><span class="line"><span class="comment">// (logged): timeTaken: 0.02099609375ms</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="toDecimalMark"><a href="#toDecimalMark" class="headerlink" title="toDecimalMark"></a>toDecimalMark</h3><p>Use <code>toLocaleString()</code> to convert a float-point arithmetic to the <a href="https://en.wikipedia.org/wiki/Decimal_mark" target="_blank" rel="noopener">Decimal mark</a> form. It makes a comma separated string from a number.</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toDecimalMark = <span class="function"><span class="params">num</span> =&gt;</span> num.toLocaleString(<span class="string">'en-US'</span>);</span><br><span class="line"><span class="comment">// toDecimalMark(12305030388.9087) -&gt; "12,305,030,388.9087"</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="toOrdinalSuffix"><a href="#toOrdinalSuffix" class="headerlink" title="toOrdinalSuffix"></a>toOrdinalSuffix</h3><p>Adds an ordinal suffix to a number.</p><p>Use the modulo operator (<code>%</code>) to find values of single and tens digits.<br>Find which ordinal pattern digits match.<br>If digit is found in teens pattern, use teens ordinal.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> toOrdinalSuffix = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> int = <span class="built_in">parseInt</span>(num), digits = [(int % <span class="number">10</span>), (int % <span class="number">100</span>)],</span><br><span class="line">    ordinals = [<span class="string">'st'</span>, <span class="string">'nd'</span>, <span class="string">'rd'</span>, <span class="string">'th'</span>], oPattern = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">    tPattern = [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>];</span><br><span class="line">  <span class="keyword">return</span> oPattern.includes(digits[<span class="number">0</span>]) &amp;&amp; !tPattern.includes(digits[<span class="number">1</span>]) ? int + ordinals[digits[<span class="number">0</span>] - <span class="number">1</span>] : int + ordinals[<span class="number">3</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// toOrdinalSuffix("123") -&gt; "123rd"</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="UUIDGenerator"><a href="#UUIDGenerator" class="headerlink" title="UUIDGenerator"></a>UUIDGenerator</h3><p>Generates a UUID.</p><p>Use <code>crypto</code> API to generate a UUID, compliant with <a href="https://www.ietf.org/rfc/rfc4122.txt" target="_blank" rel="noopener">RFC4122</a> version 4.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> UUIDGenerator = <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">  ([<span class="number">1e7</span>] + <span class="number">-1e3</span> + <span class="number">-4e3</span> + <span class="number">-8e3</span> + <span class="number">-1e11</span>).replace(<span class="regexp">/[018]/g</span>, c =&gt;</span><br><span class="line">    (c ^ crypto.getRandomValues(<span class="keyword">new</span> <span class="built_in">Uint8Array</span>(<span class="number">1</span>))[<span class="number">0</span>] &amp; <span class="number">15</span> &gt;&gt; c / <span class="number">4</span>).toString(<span class="number">16</span>)</span><br><span class="line">  );</span><br><span class="line"><span class="comment">// UUIDGenerator() -&gt; '7982fcfe-5721-4632-bede-6000885be57d'</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h3 id="validateNumber"><a href="#validateNumber" class="headerlink" title="validateNumber"></a>validateNumber</h3><p>Returns <code>true</code> if the given value is a number, <code>false</code> otherwise.</p><p>Use <code>!isNaN</code> in combination with <code>parseFloat()</code> to check if the argument is a number.<br>Use <code>isFinite()</code> to check if the number is finite.<br>Use <code>Number()</code> to check if the coercion holds.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validateNumber = <span class="function"><span class="params">n</span> =&gt;</span> !<span class="built_in">isNaN</span>(<span class="built_in">parseFloat</span>(n)) &amp;&amp; <span class="built_in">isFinite</span>(n) &amp;&amp; <span class="built_in">Number</span>(n) == n;</span><br><span class="line"><span class="comment">// validateNumber('10') -&gt; true</span></span><br></pre></td></tr></table></figure><p><a href="#table-of-contents">⬆ back to top</a></p><h2 id="Credits"><a href="#Credits" class="headerlink" title="Credits"></a>Credits</h2><p><em>Icons made by <a href="https://www.flaticon.com/authors/smashicons" target="_blank" rel="noopener">Smashicons</a> from <a href="https://www.flaticon.com/" target="_blank" rel="noopener">www.flaticon.com</a> is licensed by <a href="http://creativecommons.org/licenses/by/3.0/" target="_blank" rel="noopener">CC 3.0 BY</a>.</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Curated collection of useful Javascript snippets that you can understand in 30 seconds or less.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;ta
      
    
    </summary>
    
    
      <category term="javascript" scheme="onlookerliu.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>julia基于GLM包的线性回归</title>
    <link href="onlookerliu.github.io/2017/11/29/julia%E5%9F%BA%E4%BA%8EGLM%E5%8C%85%E7%9A%84%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>onlookerliu.github.io/2017/11/29/julia基于GLM包的线性回归/</id>
    <published>2017-11-29T13:49:51.000Z</published>
    <updated>2017-12-28T17:50:24.085Z</updated>
    
    <content type="html"><![CDATA[<p>本文利用GLM包进行简单线性回归分析，同时对模型检验以及置信区间作图。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> GLM,DataFrames</span><br></pre></td></tr></table></figure><p>先随机生成一组数据用于回归分析。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置截距</span></span><br><span class="line">α = <span class="number">100</span></span><br><span class="line"><span class="comment"># 设置系数</span></span><br><span class="line">β = <span class="number">5</span></span><br><span class="line"><span class="comment"># 设置随机数个数</span></span><br><span class="line">n = <span class="number">50</span></span><br><span class="line"><span class="comment"># 设置误差项</span></span><br><span class="line">ε = rand(Normal(),n) * <span class="number">11</span></span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line">x = randn(n)*<span class="number">3</span></span><br><span class="line">y = α + β * x + ε</span><br><span class="line">dataForRegression = DataFrame(x = x, y = y)</span><br></pre></td></tr></table></figure><table class="data-frame"><thead><tr><th></th><th>x</th><th>y</th></tr></thead><tbody><tr><th>1</th><td>-0.2945844765867794</td><td>95.47303779965895</td></tr><tr><th>2</th><td>-1.3440842917796316</td><td>100.32164951469537</td></tr><tr><th>3</th><td>1.3037018863265355</td><td>109.57629236830104</td></tr><tr><th>4</th><td>4.012507916775679</td><td>106.46933242509654</td></tr><tr><th>5</th><td>-1.7321051747524616</td><td>89.55844065579969</td></tr><tr><th>6</th><td>-1.4253325394154235</td><td>92.72629790575935</td></tr><tr><th>7</th><td>-0.9042631229720477</td><td>87.93522916305417</td></tr><tr><th>8</th><td>3.4865202058421714</td><td>127.92951823278281</td></tr><tr><th>9</th><td>-2.134433785764415</td><td>94.20802706899649</td></tr><tr><th>10</th><td>3.322020816866826</td><td>118.04216195389577</td></tr><tr><th>11</th><td>2.203086430462482</td><td>105.55320230669415</td></tr><tr><th>12</th><td>-5.281962503754427</td><td>82.8888784146054</td></tr><tr><th>13</th><td>2.001897730730764</td><td>108.02467262087006</td></tr><tr><th>14</th><td>-2.7543838829327565</td><td>88.76348948674855</td></tr><tr><th>15</th><td>6.101614682211077</td><td>128.6239736717972</td></tr><tr><th>16</th><td>0.6888033886810481</td><td>111.17457991815601</td></tr><tr><th>17</th><td>0.7010819245192449</td><td>107.39681268065465</td></tr><tr><th>18</th><td>3.1116548996809783</td><td>113.4549225848041</td></tr><tr><th>19</th><td>-1.8511960189357837</td><td>83.79388935398916</td></tr><tr><th>20</th><td>-0.962664244723129</td><td>91.41543924802386</td></tr><tr><th>21</th><td>0.5608348467513868</td><td>90.8605217368299</td></tr><tr><th>22</th><td>2.1522594774515786</td><td>93.8105103626811</td></tr><tr><th>23</th><td>-0.31022032825520746</td><td>101.53069848453823</td></tr><tr><th>24</th><td>1.6256993827235733</td><td>104.12765249398367</td></tr><tr><th>25</th><td>3.3214081526457813</td><td>118.46644563889394</td></tr><tr><th>26</th><td>0.43501963025212675</td><td>95.810320259296</td></tr><tr><th>27</th><td>2.59876092609342</td><td>121.9741328977443</td></tr><tr><th>28</th><td>-1.0290269848902651</td><td>113.72423797098067</td></tr><tr><th>29</th><td>-0.21404769863190354</td><td>92.43405156194733</td></tr><tr><th>30</th><td>3.5537714568100016</td><td>99.06513391626848</td></tr><tr><th>&vellip;</th><td>&vellip;</td><td>&vellip;</td></tr></tbody></table><p>使用<code>lm</code>函数进行线性回归分析：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mod = lm(<span class="meta">@formula</span>(y ~ x), dataForRegression)</span><br></pre></td></tr></table></figure><pre><code>DataFrames.DataFrameRegressionModel{GLM.LinearModel{GLM.LmResp{Array{Float64,1}},GLM.DensePredChol{Float64,Base.LinAlg.Cholesky{Float64,Array{Float64,2}}}},Array{Float64,2}}Formula: y ~ 1 + xCoefficients:             Estimate Std.Error t value Pr(&gt;|t|)(Intercept)   99.8365   1.42361 70.1292   &lt;1e-49x             5.19724  0.457037 11.3716   &lt;1e-14</code></pre><p>另外一种等价的写法是：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mod = fit(LinearModel, <span class="meta">@formula</span>(y ~ x), dataForRegression)</span><br></pre></td></tr></table></figure><pre><code>DataFrames.DataFrameRegressionModel{GLM.LinearModel{GLM.LmResp{Array{Float64,1}},GLM.DensePredChol{Float64,Base.LinAlg.Cholesky{Float64,Array{Float64,2}}}},Array{Float64,2}}Formula: y ~ 1 + xCoefficients:             Estimate Std.Error t value Pr(&gt;|t|)(Intercept)   99.8365   1.42361 70.1292   &lt;1e-49x             5.19724  0.457037 11.3716   &lt;1e-14</code></pre><p>故知回归系数为<code>5.19724</code>，截距为<code>99.8365</code>，所以最优拟合直线为 $y = 99.8365 + 5.19724x$。同时给出了标准差、t检验和p值等结果。</p><p>接下来对假设回归系数是 $0$ 进行FF检验。</p><p>原假设 $H_0: \beta = 0$，备选假设 $H_1: \beta\neq 0$</p><p>构造回归系数为 $0$ 的模型：</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nullmod = lm(<span class="meta">@formula</span>(y ~ <span class="number">1</span>), dataForRegression)</span><br></pre></td></tr></table></figure><pre><code>DataFrames.DataFrameRegressionModel{GLM.LinearModel{GLM.LmResp{Array{Float64,1}},GLM.DensePredChol{Float64,Base.LinAlg.Cholesky{Float64,Array{Float64,2}}}},Array{Float64,2}}Formula: y ~ +1Coefficients:             Estimate Std.Error t value Pr(&gt;|t|)(Intercept)   104.526   2.59199 40.3264   &lt;1e-38</code></pre><p>假设回归系数为 $0$，则截距为 $y$ 的平均数。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isapprox(coef(nullmod)[<span class="number">1</span>], mean(dataForRegression[:y]))</span><br></pre></td></tr></table></figure><pre><code>true</code></pre><p>GLM的<code>ftest</code>函数提供了回归模型的FF检验。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftest(mod.model, nullmod.model)</span><br></pre></td></tr></table></figure><pre><code>        Res. DOF DOF ΔDOF        SSR        ΔSSR      R²    ΔR²       F*  p(&gt;F)Model 1       48   3       4455.8890              0.7293Model 2       49   2   -1 16460.1689 -12004.2799 -0.0000 0.7293 129.3132 &lt;1e-14</code></pre><p>在此例中，$p&lt;0.05$，差异显著，拒绝 $\beta = 0$ 的假设，回归系数显著不为0，说明了回归方程有较高的有效性。而 $R^2=0.7293$ 也说明了随机变量 $x$ 与 $y$ 之间有相对高的关联程度。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> RCall</span><br><span class="line"><span class="string">R"summary(lm(<span class="subst">$(dataForRegression[:x])</span> ~ <span class="subst">$(dataForRegression[:y])</span>))"</span></span><br></pre></td></tr></table></figure><pre><code>WARNING: Method definition ==(Base.Nullable{S}, Base.Nullable{T}) in module Base at nullable.jl:238 overwritten in module NullableArrays at /Users/kay/.julia/v0.6/NullableArrays/src/operators.jl:99.RCall.RObject{RCall.VecSxp}Call:lm(formula = `#JL`$`(dataForRegression[:x])` ~ `#JL`$`(dataForRegression[:y])`)Residuals:    Min      1Q  Median      3Q     Max-3.2220 -0.9915 -0.1898  0.7734  3.6579Coefficients:                                 Estimate Std. Error t value Pr(&gt;|t|)(Intercept)                     -13.76511    1.30911  -10.52 4.77e-14 ***`#JL`$`(dataForRegression[:y])`   0.14032    0.01234   11.37 3.19e-15 ***---Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1Residual standard error: 1.583 on 48 degrees of freedomMultiple R-squared:  0.7293,    Adjusted R-squared:  0.7237F-statistic: 129.3 on 1 and 48 DF,  p-value: 3.195e-15</code></pre><p>以上是R的输出结果，除了小数点精度外，结果完全相同。</p><p>下面对回归结果做可视化。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本数据作图</span></span><br><span class="line"><span class="keyword">using</span> Gadfly</span><br><span class="line">plot(layer(dataForRegression,</span><br><span class="line">        x = :x,</span><br><span class="line">        y = :y,</span><br><span class="line">        Geom.point,),</span><br><span class="line">    layer(dataForRegression,</span><br><span class="line">        x = :x,</span><br><span class="line">        y = :y,</span><br><span class="line">        Geom.smooth(method = :lm),</span><br><span class="line">        color = [<span class="string">colorant"purple"</span>])</span><br><span class="line">)</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://oye4atjxc.bkt.clouddn.com/julia/GLM/output_17_0.svg"><br></div><p>函数<code>predict</code>返回的是回归值。残差定义为回归值与观测值之差。</p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 残差点图</span></span><br><span class="line">resid = dataForRegression[:y] - predict(mod)</span><br><span class="line">plot(x = predict(mod),</span><br><span class="line">    y = resid,</span><br><span class="line">    Geom.point,</span><br><span class="line">    Guide.xlabel(<span class="string">"predict(mod)"</span>),</span><br><span class="line">    Guide.ylabel(<span class="string">"resid"</span>))</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://oye4atjxc.bkt.clouddn.com/julia/GLM/output_19_0.svg"><br></div><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 残差线段图</span></span><br><span class="line">plot(dataForRegression, x = <span class="string">"x"</span>,</span><br><span class="line">    y = <span class="string">"y"</span>,</span><br><span class="line">    xend = <span class="string">"x"</span>,</span><br><span class="line">    yend = predict(mod),</span><br><span class="line">    Geom.segment)</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://oye4atjxc.bkt.clouddn.com/julia/GLM/output_20_0.svg"><br></div><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过Q-Q图的线性程度来检验残差的正态性。</span></span><br><span class="line">plot(x = Normal(), y = resid, Stat.qq, Geom.point,)</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://oye4atjxc.bkt.clouddn.com/julia/GLM/output_21_0.svg"><br></div><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制置信区间</span></span><br><span class="line">mod_predict_confidence = predict(mod,</span><br><span class="line">    hcat(ones(nrow(dataForRegression)), collect(dataForRegression[:,<span class="number">1</span>])),</span><br><span class="line">    :confint)</span><br><span class="line"></span><br><span class="line">plot(layer(dataForRegression,</span><br><span class="line">        x = <span class="string">"x"</span>,</span><br><span class="line">        y = <span class="string">"y"</span>,</span><br><span class="line">        Geom.point,</span><br><span class="line">        intercept = [coef(mod)[<span class="number">1</span>]],</span><br><span class="line">        slope = [coef(mod)[<span class="number">2</span>]],</span><br><span class="line">        Geom.abline),</span><br><span class="line">    layer(x = dataForRegression[:x],</span><br><span class="line">        y = mod_predict_confidence[:,<span class="number">2</span>],</span><br><span class="line">        Geom.point, Theme(default_color = <span class="string">"purple"</span>)),</span><br><span class="line">    layer(x = dataForRegression[:x],</span><br><span class="line">        y = mod_predict_confidence[:,<span class="number">3</span>],</span><br><span class="line">        Geom.point, Theme(default_color = <span class="string">"purple"</span>))</span><br><span class="line">)</span><br></pre></td></tr></table></figure><div align="center"><br><img src="http://oye4atjxc.bkt.clouddn.com/julia/GLM/output_22_0.svg"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文利用GLM包进行简单线性回归分析，同时对模型检验以及置信区间作图。&lt;/p&gt;
&lt;figure class=&quot;highlight julia&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
      <category term="julia" scheme="onlookerliu.github.io/tags/julia/"/>
    
  </entry>
  
</feed>
